gprconfig.xsd:6972:<?xml version="1.0"?>
<!--
  This file contains the XML Schema for the knowledge base of gprconfig.
-->

<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

   <xsd:element name="gprconfig">
      <xsd:complexType>
         <xsd:choice>
            <xsd:element ref="compiler_description" maxOccurs="unbounded"/>
            <xsd:element ref="configuration" maxOccurs="unbounded"/>
            <xsd:element ref="targetset" maxOccurs="unbounded"/>
            <xsd:element ref="fallback_targets" maxOccurs="unbounded"/>
         </xsd:choice>
      </xsd:complexType>
   </xsd:element>

   <xsd:element name="compiler_description">
      <xsd:complexType>
         <xsd:sequence>
            <xsd:element name="name"       type="xsd:string" />
            <xsd:element name="executable" type="Texecutable" minOccurs="0" />
            <xsd:element name="version"    type="Texternal"   minOccurs="0" />
            <xsd:element name="languages"  type="Texternal"   minOccurs="0" />
            <xsd:element name="variable"   type="Texternal_with_name"
                         minOccurs="0" maxOccurs="unbounded"/>
            <xsd:element name="runtimes"   type="Texternal_with_default"
                         minOccurs="0" />
            <xsd:element name="target"     type="Texternal"   minOccurs="0" />
         </xsd:sequence>
      </xsd:complexType>
   </xsd:element>

   <xsd:element name="configuration">
      <xsd:complexType>
         <xsd:sequence>
            <xsd:element name="compilers" type="Tcompilers"
                         minOccurs="0" maxOccurs="unbounded"/>
            <xsd:element name="targets" type="Ttargets"
                         minOccurs="0" maxOccurs="unbounded"/>
            <xsd:element name="hosts" type="Thosts"
                         minOccurs="0" maxOccurs="unbounded"/>
            <xsd:element name="config" type="xsd:string" minOccurs="1"/>
         </xsd:sequence>
      </xsd:complexType>
   </xsd:element>

   <xsd:element name="targetset">
      <xsd:complexType>
         <xsd:sequence>
            <xsd:element name="target" type="xsd:string"
               maxOccurs="unbounded" minOccurs="1"/>
         </xsd:sequence>
         <xsd:attribute name="canonical" type="xsd:string" />
      </xsd:complexType>
   </xsd:element>

   <xsd:element name="fallback_targets">
      <xsd:complexType>
         <xsd:sequence>
            <xsd:element name="target" type="xsd:string"
               maxOccurs="unbounded" minOccurs="1"/>
         </xsd:sequence>
      </xsd:complexType>
   </xsd:element>

   <!--  The "executable" node in a "compiler_description" -->

   <xsd:complexType name="Texecutable">
      <xsd:simpleContent>
         <xsd:extension base="xsd:string">
            <xsd:attribute name="prefix" type="xsd:string" />
         </xsd:extension>
      </xsd:simpleContent>
   </xsd:complexType>

   <!-- All nodes in a "compiler_description" that get their value from
        the environment (a process, environment variable,...)

        ??? How do we show in the schema that if a simple content is used
        we cannot specify any child ?
    -->

   <xsd:complexType name="Texternal" mixed="true">
      <xsd:sequence minOccurs="0" maxOccurs="1">
         <xsd:choice>
            <xsd:element name="external" type="xsd:string" />
            <xsd:element name="getenv" type="Tgetenv" />
            <xsd:element name="directory" type="Tdirectory"
                         maxOccurs="unbounded"/>
         </xsd:choice>
         <xsd:element name="nogrep" type="Tgrep" minOccurs="0" />
         <xsd:element name="grep" type="Tgrep" minOccurs="0" />
         <xsd:element name="must_match" type="xsd:string" minOccurs="0" />
      </xsd:sequence>
   </xsd:complexType>

   <xsd:complexType name="Texternal_with_name" mixed="true">
      <xsd:complexContent>
         <xsd:extension base="Texternal">
            <xsd:attribute name="name" type="xsd:string" />
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>

   <xsd:complexType name="Texternal_with_default" mixed="true">
      <xsd:complexContent>
         <xsd:extension base="Texternal">
            <xsd:attribute name="default" type="xsd:string" />
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>

   <!--  ??? Could check that "group" is a valid parenthesis count for the
         regexp.
   -->

   <xsd:complexType name="Tgrep">  <!--  No text allowed, no children -->
      <xsd:attribute name="regexp" type="xsd:string" />
      <xsd:attribute name="group" type="xsd:nonNegativeInteger" />
   </xsd:complexType>

   <xsd:complexType name="Tgetenv"> <!-- No text allowed, no children -->
      <xsd:attribute name="name" type="xsd:string" />
   </xsd:complexType>

   <xsd:simpleType name="TpositiveOrDefault">
      <xsd:union>
        <xsd:simpleType>
          <xsd:restriction base="xsd:nonNegativeInteger"/>
        </xsd:simpleType>
        <xsd:simpleType>
          <xsd:restriction base="xsd:string">
            <xsd:enumeration value="default"/>
          </xsd:restriction>
        </xsd:simpleType>
      </xsd:union> 
   </xsd:simpleType>

   <xsd:complexType name="Tdirectory">
      <xsd:simpleContent>
         <xsd:extension base="xsd:string">
            <xsd:attribute name="group" type="TpositiveOrDefault" />
            <xsd:attribute name="contents" type="xsd:string" />
         </xsd:extension>
      </xsd:simpleContent>
   </xsd:complexType>

   <xsd:complexType name="Tcompilers">
      <xsd:sequence>
         <xsd:element name="compiler" type="Tcompiler" maxOccurs="unbounded"/>
      </xsd:sequence>
      <xsd:attribute name="negate" type="xsd:boolean" />
   </xsd:complexType>

   <xsd:complexType name="Tcompiler"> <!-- No text allowed, no children -->
      <xsd:attribute name="name" type="xsd:string"/>
      <xsd:attribute name="version" type="xsd:string"/>
      <xsd:attribute name="runtime" type="xsd:string"/>
      <xsd:attribute name="language" type="xsd:string"/>
   </xsd:complexType>

   <xsd:complexType name="Ttargets">
      <xsd:sequence>
         <xsd:element name="target" type="Ttarget" maxOccurs="unbounded"/>
      </xsd:sequence>
      <xsd:attribute name="negate" type="xsd:boolean" />
   </xsd:complexType>

   <xsd:complexType name="Ttarget"> <!-- No text allowed, no children -->
      <xsd:attribute name="name" type="xsd:string"/>
      <xsd:attribute name="except" type="xsd:string"/>
   </xsd:complexType>

   <xsd:complexType name="Thosts">
      <xsd:sequence>
         <xsd:element name="host" type="Thost" maxOccurs="unbounded"/>
      </xsd:sequence>
      <xsd:attribute name="negate" type="xsd:boolean" />
   </xsd:complexType>

   <xsd:complexType name="Thost"> <!-- No text allowed, no children -->
      <xsd:attribute name="name" type="xsd:string"/>
      <xsd:attribute name="except" type="xsd:string"/>
   </xsd:complexType>


</xsd:schema>
env.ent:881:   <!ENTITY environment
    '
   <configuration>
    &if_this_target;

    <config>

   EXEC_ADA := "${EXEC(Ada)}";
   EXEC_C   := "${EXEC(C)}";
   EXEC_CPP := "${EXEC(C++)}";

   HOST_ADA := "${HOST(Ada)}";
   HOST_C   := "${HOST(C)}";
   HOST_CPP := "${HOST(C++)}";

   TARGET_ADA := "${TARGET(Ada)}";
   TARGET_C   := "${TARGET(C)}";
   TARGET_CPP := "${TARGET(C++)}";

   VERSION_ADA := "${VERSION(Ada)}";
   VERSION_C   := "${VERSION(C)}";
   VERSION_CPP := "${VERSION(C++)}";

   PREFIX_ADA := "${PREFIX(Ada)}";
   PREFIX_C   := "${PREFIX(C)}";
   PREFIX_CPP := "${PREFIX(C++)}";

   PATH_ADA := "${PATH(Ada)}";
   PATH_C   := "${PATH(C)}";
   PATH_CPP := "${PATH(C++)}";

   RUNTIME_ADA := "${RUNTIME(Ada)}";
   RUNTIME_C   := "${RUNTIME(C)}";
   RUNTIME_CPP := "${RUNTIME(C++)}";

   GPRCONFIG_PREFIX := "${GPRCONFIG_PREFIX}";

    </config>
   </configuration>
    '
   >
shortcuts.ent:2228:   <!ENTITY languages_c
    '<languages>C</languages>'
   >
   <!ENTITY languages_cpp
    '<languages>C++</languages>'
   >

   <!ENTITY if_no_ada
   '<compilers negate="true" >
       <compiler language="Ada" />
    </compilers>'
   >

   <!ENTITY if_ada
   '<compilers>
       <compiler language="Ada" />
    </compilers>'
   >

   <!ENTITY if_cpp
   '<compilers>
       <compiler language="C++" />
    </compilers>'
   >

   <!ENTITY if_no_cpp
   '<compilers negate="true">
       <compiler language="C++" />
    </compilers>'
   >

   <!ENTITY if_c_only
   '<compilers negate="true">
       <compiler language="C++" />
       <compiler language="Fortran" />
       <compiler language="Ada" />
    </compilers>
    <compilers>
       <compiler language="C" />
    </compilers>'
   >

   <!ENTITY if_this_target
    '<targets>
       <target name="^&this_target;$" />
     </targets>'>

   <!ENTITY config_gnat_ar
    '<config>
   for Archive_Builder  use ("&this_target;-ar", "cr");
   for Archive_Builder_Append_Option use ("q");
   for Archive_Indexer  use ("&this_target;-ranlib");
   for Archive_Suffix   use ".a";
     </config>'
   >

   <!ENTITY configurations_gnat_ar
    '<configuration>
     &if_this_target;

     &config_gnat_ar;
     </configuration>'
   >

   <!ENTITY config_ada_partial_link
    '<config>
   for Library_Partial_Linker use
         (PATH_ADA &amp; PREFIX_ADA &amp; "gcc", "-nostdlib", "-Wl,-r", "-o");
     </config>'
   >

   <!ENTITY config_cpp_partial_link
    '<config>
   for Library_Partial_Linker use
         (PATH_CPP &amp; EXEC_CPP, "-nostdlib", "-Wl,-r", "-o");
     </config>'
   >

   <!ENTITY config_c_partial_link
    '<config>
   for Library_Partial_Linker use
         (PATH_C &amp; EXEC_C, "-nostdlib", "-Wl,-r", "-o");
     </config>'
   >

  <!ENTITY gnat_post_20
     '<compiler language="Ada" version="[2-3][0-9]" />
      <compiler name="^GCC_Pro$" language="C" version="([8-9]|1[0-9]).*" />
      <compiler name="^G\+\+_Pro$" language="C++" version="([8-9]|1[0-9]).*" />'
  >

  <!ENTITY if_gnat_20_pre
   '<compilers negate="true" >
      &gnat_post_20;
    </compilers>'
  >

  <!ENTITY if_gnat_20_and_later
   '<compilers>
      &gnat_post_20;
    </compilers>'
  >
vx6.ent:8073:   <!ENTITY version_from_wind_base
    '<version>
      <getenv name="WIND_BASE"></getenv>
      <grep regexp=".*[/\\](vxworks-6[0-9.]*).*" group="1"></grep>
      <must_match>vxworks-6.*</must_match>
     </version>'
   >

   <!ENTITY version_from_wind_base_cert
    '<version>
      <getenv name="WIND_BASE"></getenv>
      <grep regexp=".*[/\\](vxworks-cert-6[0-9.]*).*" group="1"></grep>
      <must_match>vxworks-cert-6.*</must_match>
     </version>'
   >

   <!ENTITY runtimes_vx6
    '<runtimes>kernel,kernel-smp,kernel-sjlj,rtp,rtp-smp</runtimes>'
   >

   <!ENTITY runtimes_vx6cert
    '<runtimes>
      kernel,cert,ravenscar-cert,zfp,rtp,ravenscar-cert-rtp
     </runtimes>'
   >

   <!ENTITY gnat_pre_6.4
     '<compiler language="Ada" version="3.16" />
      <compiler language="Ada" version="5.00" />
      <compiler language="Ada" version="5.01" />
      <compiler language="Ada" version="5.02" />
      <compiler language="Ada" version="5.03" />
      <compiler language="Ada" version="5.04" />
      <compiler language="Ada" version="6.0" />
      <compiler language="Ada" version="6.1" />
      <compiler language="Ada" version="6.2" />
      <compiler language="Ada" version="6.3" />
      <compiler language="Ada" version="6.4" />'
   >

  <!ENTITY if_gnat_pre_6.4
   '<compilers>
       <compiler language="Ada" />
    </compilers>
    <compilers>
      &gnat_pre_6.4;
    </compilers>'
  >

  <!ENTITY if_gnat_post_6.4
   '<compilers>
       <compiler language="Ada" />
    </compilers>
    <compilers negate="true" >
      &gnat_pre_6.4;
    </compilers>'
  >

  <!ENTITY config_rtp_cflags
    '<config>
   package Compiler is
      for Leading_Required_Switches ("C") use
        Compiler &apos; Leading_Required_Switches ("C") &amp; ("-mrtp")
        &amp; ("-I" &amp; Wind_Base &amp; "/target/usr/h",
               "-I" &amp; Wind_Base &amp; "/target/usr/h/wrn/coreip");
   end Compiler;

   package Compiler is
      for Leading_Required_Switches ("C++") use
        Compiler &apos; Leading_Required_Switches ("C++") &amp; ("-mrtp")
        &amp; ("-I" &amp; Wind_Base &amp; "/target/usr/h",
               "-I" &amp; Wind_Base &amp; "/target/usr/h/wrn/coreip");
   end Compiler;
     </config>'
  >

  <!ENTITY config_rtp_lib
    '
     <!-- As a special exception, on arm-vx6, rts-rtp is smp-based. -->
     <config>
     rtp_smp_suffix := "";
     case TARGET_ADA is
       when "arm-wrs-vxworks" =>
         rtp_smp_suffix := "_smp";
       when others =>
         rtp_smp_suffix := "";
     end case;

     package Linker is
        for Required_Switches use
          Linker &apos; Required_Switches
          &amp; ("-L" &amp; Wind_Base
                 &amp; "/target/lib" &amp; rtp_smp_suffix &amp; "/usr/lib/"
                 &amp; "&this_cpu_subdir;",
                 "-L" &amp; Wind_Base
                 &amp; "/target/usr/lib" &amp; rtp_smp_suffix &amp; "/"
                 &amp; "&this_cpu_subdir;");
     end Linker;
     </config>'
  >

  <!ENTITY config_rtp_smp_lib
    '<config>
     package Linker is
        for Required_Switches use
          Linker &apos; Required_Switches
          &amp; ("-L" &amp; Wind_Base
                 &amp; "/target/lib_smp/usr/lib/"
                 &amp; "&this_cpu_subdir;");
     end Linker;
     </config>'
  >

  <!ENTITY config_rtp_cert_lib
    '<config>
     package Linker is
        for Required_Switches use
          Linker &apos; Required_Switches
          &amp; ("-L" &amp; Wind_Base
                 &amp; "/target/usr/lib_cert_rtp/"
                 &amp; "&this_cpu_subdir;");
     end Linker;
     </config>'
  >

  <!ENTITY config_no_startfiles_no_defaultlibs
    '<config>
     package Linker is
        for Required_Switches use
          Linker &apos; Required_Switches
          &amp; ("-nostartfiles", "-nodefaultlibs");
     end Linker;
     </config>'
  >

  <!ENTITY config_kernel_cflags
    '<config>
   package Compiler is
      for Leading_Required_Switches ("C") use
        Compiler &apos; Leading_Required_Switches ("C")
        &amp; ("-I" &amp; Wind_Base &amp; "/target/h",
               "-I" &amp; Wind_Base &amp; "/target/h/wrn/coreip");
   end Compiler;

   package Compiler is
      for Leading_Required_Switches ("C++") use
        Compiler &apos; Leading_Required_Switches ("C++")
        &amp; ("-I" &amp; Wind_Base &amp; "/target/h",
               "-I" &amp; Wind_Base &amp; "/target/h/wrn/coreip");
   end Compiler;
     </config>'
  >

  <!ENTITY config_wrs_ar
    '<config>
   for Archive_Builder  use ("ar" &amp; "&this_gnu_wrs_suffix;", "cr");
   for Archive_Builder_Append_Option use ("q");
   for Archive_Indexer  use ("ranlib" &amp; "&this_gnu_wrs_suffix;");
   for Archive_Suffix   use ".a";
     </config>'
  >

  <!ENTITY configurations_vx6
  '
  <!--  Note: vx6 and vx6cert share the same target name, so
        in configurations chunks are added into vx6-specific
        files if_this_target will match both vx6 and vx6cert.
        A way to discriminate the two kind of platforms is to
        use runtime names and compiler names.

        For now, however, we still have one global target-independant
        compiler for GNAT. So most of the following chuncks apply on
        both vx6 and vx6cert. In order to ease the maintenance,
        have a comment to make it explicit when they apply to both.
   -->

   <configuration>
     &if_this_target;
     <!-- vx6 and vx6cert -->

     &config_wind_base;
   </configuration>

   <configuration>
    &if_gnat_pre_6.4;
    &if_this_target;
    <!-- vx6 and vx6cert -->

    &config_wrs_ar;
   </configuration>

   <configuration>
    &if_gnat_post_6.4;
    &if_this_target;
    <!-- vx6 and vx6cert -->

    &config_gnat_ar;
   </configuration>

   <configuration>
    &if_no_ada;
    &if_this_target;
    <!-- vx6 and vx6cert -->

    &config_gnat_ar;
   </configuration>

   <configuration>
     &if_rtp;
     &if_this_target;
     <!-- vx6 and vx6cert -->

     &config_rtp_cflags;
   </configuration>

   <configuration>
    &if_ravenscar_cert_rtp;
    &if_this_target;
    <!-- vx6cert -->

    &config_wrs_rtp_base;
   </configuration>

   <configuration>
     &if_kernel_full;
     &if_this_target;
     <!-- vx6 and vx6cert -->

     &config_kernel_cflags;
   </configuration>

   <configuration>
     &if_zfp;
     &if_this_target;
     <!-- vx6cert -->

     &config_kernel_cflags;
   </configuration>

   <configuration>
     &if_ravenscar_cert;
     &if_this_target;
     <!-- vx6cert -->

     &config_kernel_cflags;
   </configuration>

   <!-- In Cert and 653 printf should not be considered as a builtin -->
   <configuration>
     &if_zfp;
     &if_this_target;
     <!-- vx6cert -->

     &config_no_builtin;
   </configuration>

   <configuration>
     &if_cert_based;
     &if_this_target;
     <!-- vx6cert -->

     &config_no_builtin;
   </configuration>

   <!-- -L options. Should only be needed for non-Ada projects.
        They would be useless for programs that have Ada in them,
        since these are passed by specs file passed to gcc
        by a pragma Linker_Options in system; and would be harmless
        if it were for x86-vx6: on this target,
        to discriminate between vxsim and real target, we only
        have an option on command line, and gprconfig/gprbuild
        do not have a way to look for such an option on the command line.
        All in all, we do not pass them if there is Ada in the project.
    -->

   <configuration>
     &if_no_ada;
     &if_rtp_strict;
     &if_this_target;
     <!-- vx6 and vx6cert -->

     &config_rtp_lib;
   </configuration>

   <configuration>
     &if_no_ada;
     &if_rtp_smp;
     &if_this_target;
     <!-- vx6 and vx6cert -->

     &config_rtp_smp_lib;
   </configuration>

   <configuration>
    &if_no_ada;
    &if_ravenscar_cert_rtp;
    &if_this_target;
    <!-- vx6cert -->

    &config_rtp_cert_lib;
   </configuration>

   <configuration>
     &if_cert_based;
     &if_this_target;
    <!-- vx6cert -->

    &config_no_startfiles_no_defaultlibs;
  </configuration>
  '
  >
vx653.ent:2068:   <!ENTITY version_from_wind_base_vx653
    '<version>
      <getenv name="WIND_BASE"></getenv>
      <grep regexp=".*[/\\](vxworks653-[0-9.]*).*" group="1"></grep>
      <must_match>vxworks653.*</must_match>
     </version>'
   >

   <!ENTITY runtimes_vx653
    '<runtimes>full,cert,ravenscar-cert,zfp</runtimes>'
   >

  <!ENTITY config_vx653_cflags
  '
     <config>
   package Compiler is
      for Leading_Required_Switches ("C") use
        Compiler &apos; Leading_Required_Switches ("C")
        &amp; ("-DVTHREADS",
               "-I" &amp; Wind_Base &amp; "/target/vThreads/h",
               "-I" &amp; Wind_Base &amp; "/target/val/h");
   end Compiler;

   package Compiler is
      for Leading_Required_Switches ("C++") use
        Compiler &apos; Leading_Required_Switches ("C++")
        &amp; ("-DVTHREADS",
               "-I" &amp; Wind_Base &amp; "/target/vThreads/h",
               "-I" &amp; Wind_Base &amp; "/target/val/h");
   end Compiler;
     </config>
  '
  >
  <!ENTITY configurations_vx653
  '
   <configuration>
     &if_this_target;

     &config_wind_base;
   </configuration>

   <configuration>
     &if_this_target;

     &config_out_suffix;
   </configuration>

   <configuration>
     &if_this_target;

     &config_vx653_cflags;
   </configuration>

   <configuration>
     &if_zfp;
     &if_this_target;

     &config_no_builtin;
   </configuration>

   <configuration>
     &if_cert_based;
     &if_this_target;

     &config_no_builtin;
   </configuration>

   <configuration>
    &if_this_target;

    &config_gnat_ar;
   </configuration>

  <!-- For VxWorks use Ada driver as default for linking, since cc*
       and c++* do not recognize the -crtbe switch needed for ZCX -->
  <configuration>
     &if_ada;
     &if_this_target;

     &config_ada_linker;
  </configuration>

   <configuration>
     &if_no_ada;
     &if_cpp;
     &if_this_target;

     &config_cpp_linker;
   </configuration>

   <configuration>
     &if_no_ada;
     &if_no_cpp;
     &if_this_target;

     &config_c_linker;
   </configuration>
  '
  >
vx7.ent:1331:   <!ENTITY version_from_wrs7_gnu_cc
    '<version>
      <external>cc${PREFIX} --version</external>
      <grep regexp=".*\) ([0-9.]*)" group="1"></grep>

      <!--  Two gcc versions provided on vx7r1 (SR05xx):
            * 4.3 for compat69;
            * 4.8.1 for regular vx7.
            We do not support the former.
        -->
      <must_match>4.8.1</must_match>
     </version>'
   >

   <!ENTITY version_from_wrs7r2_gnu_cc
    '<version>
      <external>cc${PREFIX} --version</external>
      <grep regexp=".*\) ([0-9.]*)" group="1"></grep>
     </version>'
   >

   <!ENTITY runtimes_vx7
    '<runtimes>kernel,rtp,kernel-large,rtp-large</runtimes>'
   >

  <!ENTITY config_vsb_dir
    '<config>
   VSB_Dir := external ("VSB_DIR");
     </config>'
  >

  <!ENTITY config_nostdlib
    '<config>
     package Linker is
        for Required_Switches use
          Linker &apos; Required_Switches
          &amp; ("-nostdlib");
     end Linker;
     </config>'
  >

  <!ENTITY configurations_vx7
  '
   <configuration>
     &if_this_target;

     &config_vsb_dir;
   </configuration>

   <configuration>
     &if_rtp;
     &if_this_target;

     &config_wrs_rtp_base;
   </configuration>

   <configuration>
     &if_cert_based;
     &if_this_target;
     <!-- vx7r2cert -->

     &config_nostdlib;
  </configuration>'
  >
vxworks.ent:11668:   <!ENTITY version_from_wrs_gnu_cc_vx5
    '<version>
      <external>cc${PREFIX} -v</external>
      <grep regexp=".*(tornado 2|VxWorks 5).*" group="1"></grep>
      <must_match>(tornado 2|VxWorks 5)</must_match>
     </version>'
   >

   <!ENTITY version_from_wrs_gnu_cpp_vx5
    '<version>
      <external>c++${PREFIX} -v</external>
      <grep regexp=".*(tornado 2|VxWorks 5).*" group="1"></grep>
      <must_match>(tornado 2|VxWorks 5)</must_match>
     </version>'
   >

   <!ENTITY target_from_wrs_gnu_cc
    '<target>
      <external>cc${PREFIX} -dumpmachine</external>
      <grep regexp="[^\r\n]+"></grep>
     </target>'
   >

   <!ENTITY target_from_wrs_gnu_cpp
    '<target>
      <external>c++${PREFIX} -dumpmachine</external>
      <grep regexp="[^\r\n]+"></grep>
    </target>'
   >

   <!ENTITY config_wind_base
    '<config>
   Wind_Base := external ("WIND_BASE");
   Wind_Usr := external ("WIND_USR", Wind_Base &amp; "/target/usr/");
     </config>'
   >

   <!ENTITY config_mrtp
    '<config>
  package Linker is
     for Required_Switches use
  	Linker &apos; Required_Switches &amp; ("-mrtp");
  end Linker;
    </config>'
   >

   <!ENTITY config_mlongcall_c
     '<config>
   package Compiler is
      case TARGET_C is
         when "arm-wrs-vxworks" =>
           for Leading_Required_Switches ("C") use
             Compiler &apos; Leading_Required_Switches ("C")
             &amp; ("-mlong-calls");

         when "powerpc-wrs-vxworks" =>
           for Leading_Required_Switches ("C") use
             Compiler &apos; Leading_Required_Switches ("C")
             &amp; ("-mlongcall");
        when others =>
           null;
      end case;
   end Compiler;
     </config>'
   >

   <!ENTITY config_mlongcall_cpp
     '<config>
   package Compiler is
      case TARGET_CPP is
         when "arm-wrs-vxworks" =>
           for Leading_Required_Switches ("C++") use
             Compiler &apos; Leading_Required_Switches ("C++")
             &amp; ("-mlong-calls");

         when "powerpc-wrs-vxworks" | "powerpc-wrs-vxworks7" =>
           for Leading_Required_Switches ("C++") use
             Compiler &apos; Leading_Required_Switches ("C++")
             &amp; ("-mlongcall");

        when others =>
           null;
      end case;
   end Compiler;
     </config>'
   >

  <!ENTITY config_wrs_rtp_base
    '<config>
   WRS_RTP_Base := external ("WRS_RTP_BASE", "&this_wrs_rtp_base;");
   package Linker is
      for Leading_Switches ("Ada") use
        Linker &apos; Leading_Switches ("Ada")
        &amp; ("-Wl,--defsym,__wrs_rtp_base=" &amp; WRS_RTP_Base);
      for Leading_Switches ("C") use
        Linker &apos; Leading_Switches ("C")
        &amp; ("-Wl,--defsym,__wrs_rtp_base=" &amp; WRS_RTP_Base);
      for Leading_Switches ("C++") use
        Linker &apos; Leading_Switches ("C++")
        &amp; ("-Wl,--defsym,__wrs_rtp_base=" &amp; WRS_RTP_Base);
   end Linker;
     </config>'
  >

  <!ENTITY if_target_gpp
    '<targets>
       <target name="^.*-wrs-vxworks$" />
       <target name="^.*-wrs-vxworks7$" />
       <target name="^.*-wrs-vxworks7r2$" />
     </targets>'>

  <!ENTITY rtp_runtimes
     '<compiler runtime="^rtp$" />
      <compiler runtime="-rtp$" />
      <compiler runtime="^rtp-" />
      <compiler runtime="-rtp-" />'
  >

  <!ENTITY if_rtp
    '<compilers>
      &rtp_runtimes;
     </compilers>'
  >

  <!ENTITY if_not_rtp
    '<compilers negate="true">
      &rtp_runtimes;
     </compilers>'
  >

  <!ENTITY if_ravenscar_cert_rtp
    '<compilers>
       <compiler runtime="^ravenscar-cert-rtp$" />
     </compilers>'
  >

  <!ENTITY if_ravenscar_cert
    '<compilers>
       <compiler runtime="^ravenscar-cert$" />
     </compilers>'
  >

  <!ENTITY if_cert_based
    '<compilers>
       <compiler runtime="cert" />
     </compilers>'
  >

  <!ENTITY if_zfp
    '<compilers>
       <compiler runtime="^zfp$" />
     </compilers>'
  >

  <!-- Our naming scheme is such that the name of full rtp runtimes
       start with a "rtp" token -->

  <!ENTITY if_rtp_full
    '<compilers>
       <compiler runtime="^rtp$" />
       <compiler runtime="^rtp-" />
     </compilers>'
  >

  <!ENTITY if_rtp_strict
    '<compilers>
       <compiler runtime="^rtp$" />
     </compilers>'
  >

  <!ENTITY if_rtp_smp
    '<compilers>
       <compiler runtime="^rtp-smp$" />
     </compilers>'
  >

  <!-- Our naming scheme is such that the name of full dkm runtimes
       start with a "kernel" token -->

  <!ENTITY if_kernel_full
    '<compilers>
       <compiler runtime="^kernel$" />
       <compiler runtime="^kernel-" />
     </compilers>'
  >

  <!ENTITY if_not_kernel_full
    '<compilers negate="true">
       <compiler runtime="^kernel$" />
       <compiler runtime="^kernel-" />
     </compilers>'
  >

  <!ENTITY if_ada_rtp
    '<compilers>
      <compiler name="^GNAT$" runtime="^rtp$" />
      <compiler name="^GNAT$" runtime="-rtp$" />
      <compiler name="^GNAT$" runtime="^rtp-" />
      <compiler name="^GNAT$" runtime="-rtp-" />
     </compilers>'
  >

  <!ENTITY config_ada_rtp
    '<config>
   package Compiler is
      for Leading_Required_Switches ("Ada") use
        Compiler &apos; Leading_Required_Switches ("Ada") &amp; ("-mrtp");
   end Compiler;
     </config>'
  >

  <!ENTITY if_large_rts
    '<compilers>
      <compiler runtime="-large$" />
     </compilers>'
  >

  <!ENTITY config_no_builtin
  '
     <config>
   package Compiler is
      for Leading_Required_Switches ("C") use
        Compiler &apos; Leading_Required_Switches ("C")
        &amp; ("-fno-builtin");
   end Compiler;

   package Compiler is
      for Leading_Required_Switches ("C++") use
        Compiler &apos; Leading_Required_Switches ("C++")
        &amp; ("-fno-builtin");
   end Compiler;
     </config>
  '
  >

  <!ENTITY config_e500v2_cflags
    '<config>
   package Compiler is
      for Leading_Required_Switches ("C") use
        Compiler &apos; Leading_Required_Switches ("C")
        &amp; ("-te500v2", "-fno-implicit-fp");

      for Leading_Required_Switches ("C++") use
        Compiler &apos; Leading_Required_Switches ("C++")
        &amp; ("-te500v2", "-fno-implicit-fp");
   end Compiler;
     </config>'
  >

  <!ENTITY config_x86_64_cmodel_large_flags
    '<config>
   package Compiler is
      for Leading_Required_Switches ("Ada") use
        Compiler &apos; Leading_Required_Switches ("Ada")
        &amp; ("-mcmodel=large");

      for Leading_Required_Switches ("C") use
        Compiler &apos; Leading_Required_Switches ("C")
        &amp; ("-mcmodel=large");

      for Leading_Required_Switches ("C++") use
        Compiler &apos; Leading_Required_Switches ("C++")
        &amp; ("-mcmodel=large");
   end Compiler;
   package Linker is
      for Leading_Switches ("Ada") use
        Linker &apos; Leading_Switches ("Ada")
        &amp; ("-mcmodel=large");
      for Leading_Switches ("C") use
        Linker &apos; Leading_Switches ("C")
        &amp; ("-mcmodel=large");
      for Leading_Switches ("C++") use
        Linker &apos; Leading_Switches ("C++")
        &amp; ("-mcmodel=large");
   end Linker;
     </config>'
  >

  <!ENTITY config_out_suffix
    '<config>
   package Builder is
      for Executable_Suffix use ".out";
   end Builder;
     </config>'
  >

  <!ENTITY config_vxe_suffix
    '<config>
   package Builder is
      for Executable_Suffix use ".vxe";
   end Builder;
     </config>'
  >

  <!ENTITY config_ada_linker
    '<config>
   package Linker is
      for Driver use Compiler &apos; Driver ("Ada");
   end Linker;
     </config>'
  >

  <!ENTITY config_c_linker
    '<config>
   package Linker is
      for Driver use Compiler &apos; Driver ("C");
   end Linker;
     </config>'
  >

  <!ENTITY config_cpp_linker
    '<config>
   package Linker is
      for Driver use Compiler &apos; Driver ("C++");
   end Linker;
     </config>'
  >

  <!ENTITY config_dkm_linker
    '<config>
   package Linker is
      for Driver use "&this_target;-vxlink";
   end Linker;
     </config>'
  >

  <!ENTITY configurations_vxworks_gpp
  '
  <!--  Note: vx6 and vx6cert share the same target name, so
   	in configurations chunks are added into vx6-specific
        files if_this_target will match both vx6 and vx6cert.
        A way to discriminate the two kind of platforms is to
	use runtime names and compiler names.

        For now, however, we still have one global target-independant
        compiler for GNAT. So most of the following chuncks apply on
        both vx6 and vx6cert. In order to ease the maintenance,
        have a comment to make it explicit when they apply to both.
   -->

  <configuration>
    &if_rtp;
    &if_this_target;
    <!-- vx6, vx7 and vx6cert -->

    &config_vxe_suffix;
  </configuration>

  <configuration>
    &if_not_rtp;
    &if_this_target;
    <!-- vx6, vx7 and vx6cert -->

    &config_out_suffix;
  </configuration>

  <configuration>
    &if_ada_rtp;
    &if_this_target;
    <!-- vx6, vx7 and vx6cert -->

    &config_ada_rtp;
  </configuration>

  <configuration>
    &if_rtp;
    &if_this_target;
    <!-- vx6, vx7 and vx6cert -->

    &config_mrtp;
  </configuration>

   <!-- mlongcall is passed by default in the case of GNAT.
        Do the same thing for WRS compilers for consistency.  -->

   <configuration>
     &if_these_gnu_wrs_compilers;
     &if_this_target;
     <!-- vx6 and vx7 -->

     &config_mlongcall_c;
   </configuration>

   <configuration>
     &if_these_cpp_compilers;
     &if_this_target;
     <!-- vx6 and vx7 -->

     &config_mlongcall_cpp;
   </configuration>

   <!-- For VxWorks kernel modules, use vxlink for linking: this tool takes
        care of generating the proper _ctors and _dtors symbols used to
        elaborate DKMs. -->
   <configuration>
     &if_not_rtp;
     &if_gnat_20_and_later;
     &if_this_target;
     <!-- vx6, vx7 and vx6cert -->

     &config_dkm_linker;
   </configuration>

   <!-- For older versions of GNAT Pro, use Ada driver as default for
        linking, since cc* and c++* do not recognize the -crtbe swtich needed
        for ZCX.
        If no Ada is used in the project, default to the natural linker for
        the language. -->
   <configuration>
     &if_ada;
     &if_not_rtp;
     &if_gnat_20_pre;
     &if_this_target;
     <!-- vx6, vx7 and vx6cert -->

     &config_ada_linker;
   </configuration>

   <configuration>
     &if_no_ada;
     &if_not_rtp;
     &if_gnat_20_pre;
     &if_this_target;
     <!-- vx6, vx7 and vx6cert -->

     &config_cpp_linker;
   </configuration>

   <configuration>
     &if_cpp;
     &if_rtp;
     &if_this_target;
     <!-- vx6, vx7 and vx6cert -->

     &config_cpp_linker;
   </configuration>

   <configuration>
     &if_ada;
     &if_no_cpp;
     &if_rtp;
     &if_this_target;
     <!-- vx6, vx7 and vx6cert -->

     &config_ada_linker;
   </configuration>

   <configuration>
     &if_c_only;
     &if_rtp;
     &if_this_target;
     <!-- vx6, vx7 and vx6cert -->

     &config_c_linker;
   </configuration>

   <!-- Partial link enabled when generating static libraries -->

   <configuration>
     &if_ada;
     &if_this_target;
     <!-- vx6, vx7 and vx6cert -->

     &config_ada_partial_link;
   </configuration>

   <configuration>
     &if_no_ada;
     &if_cpp;
     &if_this_target;
     <!-- vx6, vx7 and vx6cert -->

     &config_cpp_partial_link;
   </configuration>

   <configuration>
     &if_c_only;
     &if_this_target;
     <!-- vx6, vx7 and vx6cert -->

     &config_c_partial_link;
   </configuration>

   <configuration>
     &if_large_rts;
     &if_this_target;
     <!-- vx6, vx7 and vx6cert -->

     &config_x86_64_cmodel_large_flags;
   </configuration>
  '>
0_default.xml:1401:<?xml version="1.0" ?>
<gprconfig>
   <!--  This package provides default settings for GNAT toolchains -->

   <configuration>
     <config>
   package Naming is

      for Spec_Suffix ("Ada") use ".ads";
      for Body_Suffix ("Ada") use ".adb";

      for Body_Suffix ("Asm") use ".s";
      for Body_Suffix ("Asm2") use ".asm";
      for Body_Suffix ("Asm_Cpp") use ".S";

      for Body_Suffix ("C") use ".c";
      for Spec_Suffix ("C") use ".h";

      for Spec_Suffix ("C++") use ".hh";
      for Body_Suffix ("C++") use ".cpp";

      for Body_Suffix ("Fortran") use ".f";

      for Casing use "lowercase";
      for Dot_Replacement use "-";

   end Naming;

   for Inherit_Source_Path ("C++") use ("C");
   for Inherit_Source_Path ("Asm_Cpp") use ("Asm");
   for Default_Language use "Ada";

   package Compiler is
      for Language_Kind ("ada") use "unit_based";
   end Compiler;

   package Clean is
      for Source_Artifact_Extensions ("Ada") use (".dg", ".rep");
      for Object_Artifact_Extensions ("Ada") use (".s", ".ci", ".gcno", ".su");

      for Source_Artifact_Extensions ("C")   use (".gli");
      for Object_Artifact_Extensions ("C")   use (".s", "ci", ".gcno", ".su");

      for Source_Artifact_Extensions ("C++") use (".gli");
      for Object_Artifact_Extensions ("C++") use (".s", "ci", ".gcno", ".su");
   end Clean;

     </config>
   </configuration>

</gprconfig>
aarch64-vx7.xml:898:<?xml version="1.0" ?>
<!DOCTYPE gprconfig [
<!ENTITY % env.ent SYSTEM "env.ent"> %env.ent;
<!ENTITY % shortcuts.ent SYSTEM "shortcuts.ent"> %shortcuts.ent;
<!ENTITY % vxworks.ent SYSTEM "vxworks.ent"> %vxworks.ent;
<!ENTITY % vx7.ent SYSTEM "vx7.ent"> %vx7.ent;

<!-- Local target-specific conditions -->

<!ENTITY this_target 'aarch64-wrs-vxworks7'>

<!ENTITY if_these_c_compilers
    '<compilers>
       <compiler name="^GCC_Pro$" />
       <compiler name="^LLVMC-AARCH64$" />
     </compilers>'>

<!ENTITY if_these_cpp_compilers
    '<compilers>
       <compiler name="^G\+\+_Pro$" />
     </compilers>'>

<!ENTITY if_these_gnu_wrs_compilers
    '<compilers>
       <compiler name="^LLVMC-AARCH64$" />
     </compilers>'>

<!ENTITY this_wrs_rtp_base '0x80000000'>
]>
<gprconfig>

  &environment;

  &configurations_vxworks_gpp;

  &configurations_vx7;

  &configurations_gnat_ar;

</gprconfig>
aarch64-vx7r2.xml:900:<?xml version="1.0" ?>
<!DOCTYPE gprconfig [
<!ENTITY % env.ent SYSTEM "env.ent"> %env.ent;
<!ENTITY % shortcuts.ent SYSTEM "shortcuts.ent"> %shortcuts.ent;
<!ENTITY % vxworks.ent SYSTEM "vxworks.ent"> %vxworks.ent;
<!ENTITY % vx7.ent SYSTEM "vx7.ent"> %vx7.ent;

<!-- Local target-specific conditions -->

<!ENTITY this_target 'aarch64-wrs-vxworks7r2'>

<!ENTITY if_these_c_compilers
    '<compilers>
       <compiler name="^GCC_Pro$" />
       <compiler name="^LLVMC-AARCH64$" />
     </compilers>'>

<!ENTITY if_these_cpp_compilers
    '<compilers>
       <compiler name="^G\+\+_Pro$" />
     </compilers>'>

<!ENTITY if_these_gnu_wrs_compilers
    '<compilers>
       <compiler name="^LLVMC-AARCH64$" />
     </compilers>'>

<!ENTITY this_wrs_rtp_base '0x80000000'>
]>
<gprconfig>

  &environment;

  &configurations_vxworks_gpp;

  &configurations_vx7;

  &configurations_gnat_ar;

</gprconfig>
arm-vx6.xml:1003:<?xml version="1.0" ?>
<!DOCTYPE gprconfig [
<!ENTITY % env.ent SYSTEM "env.ent"> %env.ent;
<!ENTITY % shortcuts.ent SYSTEM "shortcuts.ent"> %shortcuts.ent;
<!ENTITY % vxworks.ent SYSTEM "vxworks.ent"> %vxworks.ent;
<!ENTITY % vx6.ent SYSTEM "vx6.ent"> %vx6.ent;

<!-- Local target-specific conditions -->

<!ENTITY this_target 'arm-wrs-vxworks'>
<!ENTITY this_gnu_wrs_suffix 'arm'>

<!ENTITY if_these_c_compilers
    '<compilers>
       <compiler name="^GCC_Pro$" />
       <compiler name="^GCC-WRS6$" />
     </compilers>'>

<!ENTITY if_these_cpp_compilers
    '<compilers>
       <compiler name="^G\+\+-WRS6$" />
     </compilers>'>

<!ENTITY if_these_gnu_wrs_compilers
    '<compilers>
       <compiler name="^GCC-WRS6$" />
       <compiler name="^G\+\+-WRS6$" />
     </compilers>'>

<!ENTITY this_wrs_rtp_base '0x40000000'>
<!-- For vx6cert -->

<!ENTITY this_cpu_subdir 'arm/ARMARCH7/common'>
]>

<gprconfig>

  &environment;

  &configurations_vxworks_gpp;

  &configurations_vx6;

</gprconfig>
arm-vx7.xml:890:<?xml version="1.0" ?>
<!DOCTYPE gprconfig [
<!ENTITY % env.ent SYSTEM "env.ent"> %env.ent;
<!ENTITY % shortcuts.ent SYSTEM "shortcuts.ent"> %shortcuts.ent;
<!ENTITY % vxworks.ent SYSTEM "vxworks.ent"> %vxworks.ent;
<!ENTITY % vx7.ent SYSTEM "vx7.ent"> %vx7.ent;

<!-- Local target-specific conditions -->

<!ENTITY this_target 'arm-wrs-vxworks7'>

<!ENTITY if_these_c_compilers
    '<compilers>
       <compiler name="^GCC_Pro$" />
       <compiler name="^GCC-WRS7ARM$" />
     </compilers>'>

<!ENTITY if_these_cpp_compilers
    '<compilers>
       <compiler name="^G\+\+_Pro$" />
     </compilers>'>

<!ENTITY if_these_gnu_wrs_compilers
    '<compilers>
       <compiler name="^GCC-WRS7ARM$" />
     </compilers>'>

<!ENTITY this_wrs_rtp_base '0x80000000'>
]>
<gprconfig>

  &environment;

  &configurations_vxworks_gpp;

  &configurations_vx7;

  &configurations_gnat_ar;

</gprconfig>
arm-vx7r2.xml:888:<?xml version="1.0" ?>
<!DOCTYPE gprconfig [
<!ENTITY % env.ent SYSTEM "env.ent"> %env.ent;
<!ENTITY % shortcuts.ent SYSTEM "shortcuts.ent"> %shortcuts.ent;
<!ENTITY % vxworks.ent SYSTEM "vxworks.ent"> %vxworks.ent;
<!ENTITY % vx7.ent SYSTEM "vx7.ent"> %vx7.ent;

<!-- Local target-specific conditions -->

<!ENTITY this_target 'arm-wrs-vxworks7r2'>

<!ENTITY if_these_c_compilers
    '<compilers>
       <compiler name="^GCC_Pro$" />
       <compiler name="^LLVMC-ARM$" />
     </compilers>'>

<!ENTITY if_these_cpp_compilers
    '<compilers>
       <compiler name="^G\+\+_Pro$" />
     </compilers>'>

<!ENTITY if_these_gnu_wrs_compilers
    '<compilers>
       <compiler name="^LLVMC-ARM$" />
     </compilers>'>

<!ENTITY this_wrs_rtp_base '0x80000000'>
]>
<gprconfig>

  &environment;

  &configurations_vxworks_gpp;

  &configurations_vx7;

  &configurations_gnat_ar;

</gprconfig>
asis.xml:810:<?xml version="1.0" ?>

<gprconfig>

  <!--  ASIS -->

  <configuration>
   <compilers>
    <compiler name="^ASIS$" />
   </compilers>
   <config>
   package Compiler is
      for Driver                   ("Ada") use "${PATH(ada)}asis-gcc";
      for Language_Kind            ("Ada") use "unit_based";
      for Dependency_Kind          ("Ada") use "ALI_File";
      for Leading_Required_Switches ("Ada") use ("-c", "-x", "ada", "-gnatct");
      for Config_File_Switches     ("Ada") use ("-gnatec=");
      for Object_File_Suffix       ("Ada") use ".adt";
      for Include_Path_File     ("Ada") use "ADA_PRJ_INCLUDE_FILE";
   end Compiler;

   for Toolchain_Version ("Ada") use "GNAT ${VERSION(ada)}";
   for Runtime_Dir       ("Ada") use "${RUNTIME_DIR(ada)}";
   </config>
  </configuration>

</gprconfig>
asm.xml:2024:<?xml version="1.0" ?>
<gprconfig>
   <!--  This package provides the default standard options for a gcc
         Asm compiler -->

   <configuration>
     <compilers>
       <compiler name="^GCC-ASM$" language="Asm_Cpp" />
     </compilers>
     <config>
   package Compiler is
      for Driver            ("Asm_Cpp") use "${PATH(asm_cpp)}${PREFIX(asm_cpp)}gcc";
      for Leading_Required_Switches ("Asm_Cpp") use
         Compiler'Leading_Required_Switches ("Asm_Cpp") &amp;
         ("-c", "-x", "assembler-with-cpp");
      for Include_Switches        ("Asm_Cpp") use ("-I");
      for Max_Command_Line_Length use "8192";
      for Response_File_Format    ("Asm_Cpp") use "GCC_GNU";
      for Dependency_Switches ("Asm_Cpp") use ("-MMD", "-MF", "");
   end Compiler;
     </config>
   </configuration>

   <configuration>
     <compilers>
       <compiler name="^GCC-ASM$" language="Asm" />
     </compilers>
     <config>
   package Compiler is
      for Driver            ("Asm") use "${PATH(asm)}${PREFIX(asm)}gcc";
      for Leading_Required_Switches ("Asm") use
        Compiler'Leading_Required_Switches ("Asm") &amp;
        ("-c", "-x", "assembler");
      for Include_Switches        ("Asm") use ("-I");
      for Max_Command_Line_Length use "8192";
      for Response_File_Format    ("Asm") use "GCC_GNU";
   end Compiler;
     </config>
   </configuration>

   <configuration>
     <compilers>
       <compiler name="^GCC-ASM$" language="Asm2" />
     </compilers>
     <config>
   package Compiler is
      for Driver            ("Asm2") use "${PATH(asm2)}${PREFIX(asm2)}gcc";
      for Leading_Required_Switches ("Asm2") use
        Compiler'Leading_Required_Switches ("Asm2") &amp;
        ("-c", "-x", "assembler");
      for Include_Switches        ("Asm2") use ("-I");
      for Max_Command_Line_Length use "8192";
      for Response_File_Format    ("Asm2") use "GCC_GNU";
      for Dependency_Switches ("Asm2") use ("-MMD", "-MF", "");
   end Compiler;
     </config>
   </configuration>
</gprconfig>
baselined.xml:1707:<?xml version="1.0" ?>

<gprconfig>

  <configuration>
    <targets>
      <target name="^i686-elinos-linux$" />
    </targets>
    <config>
   for Archive_Builder  use ("i686-elinos-linux-ar", "cr");
   for Archive_Builder_Append_Option use ("q");
   for Archive_Indexer  use ("i686-elinos-linux-ranlib");
   for Archive_Suffix   use ".a";
    </config>
  </configuration>

  <configuration>
    <targets>
      <target name="^powerpc-elinos-linux$" />
    </targets>
    <config>
   for Archive_Builder  use ("powerpc-elinos-linux-ar", "cr");
   for Archive_Builder_Append_Option use ("q");
   for Archive_Indexer  use ("powerpc-elinos-linux-ranlib");
   for Archive_Suffix   use ".a";
    </config>
  </configuration>

   <configuration>
     <targets>
       <target name="^powerpc-wrs-linux$" />
     </targets>
     <config>
   for Archive_Builder  use ("powerpc-wrs-linux-ar", "cr");
   for Archive_Builder_Append_Option use ("q");
   for Archive_Indexer  use ("powerpc-wrs-linux-ranlib");
   for Archive_Suffix   use ".a";
     </config>
   </configuration>

   <configuration>
     <targets>
       <target name="^e500v2-wrs-linux$" />
     </targets>
     <config>
   for Archive_Builder  use ("e500v2-wrs-linux-ar", "cr");
   for Archive_Builder_Append_Option use ("q");
   for Archive_Indexer  use ("e500v2-wrs-linux-ranlib");
   for Archive_Suffix   use ".a";
     </config>
   </configuration>

  <configuration>
    <compilers>
       <compiler language="Ada" />
    </compilers>
    <targets>
      <target name="^.*-wrs-linux.*$" />
    </targets>
    <config>
   package Linker is
      for Driver use Compiler'Driver ("Ada");
   end Linker;
    </config>
  </configuration>

</gprconfig>
bin_img.xml:765:<?xml version="1.0" ?>
<gprconfig>
   <!--  This package provides the default standard options for binary image embedding -->

   <configuration>
     <compilers>
       <compiler name="^LD$" language="Bin_Img" />
     </compilers>
     <config>
   package Naming is
      for Implementation_Suffix ("Bin_Img") use "";
   end Naming;

   package Compiler is
      for Driver            ("Bin_Img") use "${PATH(bin_img)}${PREFIX(bin_img)}ld";
      for Leading_Required_Switches ("Bin_Img") use
         Compiler'Leading_Required_Switches ("Bin_Img") &amp;
         ("-r", "-b", "binary");
      for Object_File_Suffix ("Bin_Img") use ".o";
      for Object_File_Switches ("Bin_Img") use ("-o", "");
   end Compiler;
     </config>
   </configuration>

</gprconfig>
c.xml:12397:<?xml version="1.0" ?>
<gprconfig>
   <!--  This package provides the default standard options for a gcc
         C compiler -->

   <configuration>
     <compilers>
       <compiler name="^GCC$" language="C" />
       <compiler name="^GCC_Pro$" language="C" />
       <compiler name="^GCC-28$" language="C" />
       <compiler name="^GCC-CYGMING$" language="C" />
       <compiler name="^GCC-SYSGO-X86$" language="C" />
       <compiler name="^GCC-SYSGO-PPC$" language="C" />
     </compilers>
     <config>
   package Compiler is
      for Driver              ("C") use "${PATH(c)}${PREFIX(c)}gcc";
   end Compiler;
     </config>
   </configuration>

   <configuration>
     <compilers>
        <compiler name="^GCC-MINGW32$" language="C" />
     </compilers>
     <config>
   package Compiler is
      for Driver              ("C") use "${PATH(c)}${PREFIX(c)}gcc";
   end Compiler;
     </config>
   </configuration>

   <configuration>
     <compilers>
       <compiler name="^GCC-WRS5$" language="C" />
       <compiler name="^GCC-WRS6$" language="C" />
       <compiler name="^GCC-WRS6CERT$" language="C" />
       <compiler name="^GCC-WRS6CERTE500V2$" language="C" />
       <compiler name="^GCC-WRS6E500V2$" language="C" />
       <compiler name="^GCC-WRS653-PPC$" language="C" />
       <compiler name="^GCC-WRS653-E500V2$" language="C" />
       <compiler name="^GCC-WRS7ARM$" language="C" />
       <compiler name="^GCC-WRS7E500V2$" language="C" />
       <compiler name="^GCC-WRS7PPC$" language="C" />
       <compiler name="^GCC-WRS7X86$" language="C" />
       <compiler name="^GCC-WRS7X86_64$" language="C" />
     </compilers>
     <config>
   package Compiler is
      for Driver              ("C") use "${PATH(c)}cc${PREFIX(c)}";
   end Compiler;
     </config>
   </configuration>

   <configuration>
     <compilers>
       <compiler name="DIABC" language="C" />
     </compilers>
     <config>
   package Compiler is
      for Driver              ("C") use "${PATH(c)}dcc";
   end Compiler;
     </config>
   </configuration>

   <configuration>
     <compilers>
       <compiler name="LLVM" language="C" />
     </compilers>
     <config>
   package Compiler is
      for Driver              ("C") use "${PATH(c)}clang";
   end Compiler;
     </config>
   </configuration>

  <!--     GCC -I parameter passing
   Starting with 4.5, we use spec file to avoid line length limitations
   -->
   <configuration>
     <compilers>
       <compiler name="GCC" language="C" />
     </compilers>
   <compilers negate="true">
     <compiler version="^2\.\d+" />
     <compiler version="^3\.\d+" />
     <compiler version="^4\.[01234]" />
   </compilers>
     <config>
   package Compiler is
      for Leading_Required_Switches   ("C") use
         ("-c", "-x", "c") &amp; Compiler'Leading_Required_Switches ("C");
      for Include_Switches_Via_Spec   ("C") use ("cc1", "-I");
      for Max_Command_Line_Length use "8192";
      for Response_File_Format    ("C") use "GCC_GNU";
   end Compiler;
     </config>
   </configuration>

   <configuration>
     <compilers>
       <compiler name="GCC" language="C" />
     </compilers>
   <compilers>
     <compiler version="^2\.\d+" />
     <compiler version="^3\.\d+" />
     <compiler version="^4\.[01234]" />
   </compilers>
     <config>
   package Compiler is
      for Leading_Required_Switches   ("C") use
         ("-c", "-x", "c") &amp; Compiler'Leading_Required_Switches ("C");
      for Include_Switches   ("C") use ("-I");
      for Max_Command_Line_Length use "8192";
      for Response_File_Format    ("C") use "GCC_GNU";
   end Compiler;
     </config>
   </configuration>

   <configuration>
     <compilers>
       <compiler name="LLVM" language="C" />
     </compilers>
     <config>
   package Compiler is
      for Leading_Required_Switches   ("C") use
         ("-c", "-x", "c") &amp; Compiler'Leading_Required_Switches ("C");
      for Include_Switches   ("C") use ("-I");
      for Max_Command_Line_Length use "8192";
      for Response_File_Format    ("C") use "GCC_GNU";
   end Compiler;
     </config>
   </configuration>

  <!--     GCC 2.8.1 & VxWorks 5
   Switch -MMD is not supported on GCC 2.8.1. So, we use an undocumented
   switch. -MF is not supported by the VxWorks 5 gcc
   -->
   <configuration>
     <compilers>
       <compiler name="^GCC-28$" language="C" />
       <compiler name="^GCC-WRS5$" language="C" />
     </compilers>
     <config>
   package Compiler is
      for Dependency_Switches ("C") use ("-Wp,-MMD,");
   end Compiler;
     </config>
   </configuration>

   <configuration>
     <compilers>
       <compiler name="^GCC$" language="C" />
       <compiler name="^GCC_Pro$" language="C" />
       <compiler name="^GCC-CYGMING$" language="C" />
       <compiler name="^GCC-MINGW32$" language="C" />
       <compiler name="^GCC-WRS6$" language="C" />
       <compiler name="^GCC-WRS6E500V2$" language="C" />
       <compiler name="^GCC-WRS6CERT$" language="C" />
       <compiler name="^GCC-WRS6CERTE500V2$" language="C" />
       <compiler name="^GCC-WRS653-PPC$" language="C" />
       <compiler name="^GCC-WRS653-E500V2$" language="C" />
       <compiler name="^GCC-WRS7X86$" language="C" />
       <compiler name="^GCC-WRS7X86_64$" language="C" />
       <compiler name="^GCC-WRS7PPC$" language="C" />
       <compiler name="^GCC-WRS7E500V2$" language="C" />
     </compilers>
     <config>
   package Compiler is
      for Dependency_Switches ("C") use ("-MMD", "-MF", "");
   end Compiler;
     </config>
   </configuration>

   <configuration>
     <compilers>
       <compiler name="^DIABC-PPC$" language="C" />
     </compilers>
     <config>
   package Compiler is
      for Leading_Required_Switches   ("C") use
         Compiler'Leading_Required_Switches ("C") &amp; ("-tPPC750EH:cross", "-c");
      for Dependency_Switches ("C") use
         ("-Xmake-dependency=6", "-Xmake-dependency-savefile=");
      for Include_Path        ("C") use "CPATH";
   end Compiler;
     </config>
   </configuration>

   <configuration>
     <compilers>
       <compiler name="^DIABC-PPC64$" language="C" />
     </compilers>
     <config>
   package Compiler is
      for Leading_Required_Switches   ("C") use
        Compiler'Leading_Required_Switches ("C")
        &amp; ("-tPPCLP64FH:vxworks7",
               "-c",
               "-ffixed-r13",
               "-Xclib-optim-off",
               "-Xlocal-data-area-static-only",
               "-Xc-new",
               "-Xcode-absolute-far",
               "-D_WRS_HARDWARE_FP",
               "-DCPU=_VX_PPCE6500",
               "-D_WRS_VX_SMP",
               "-D_WRS_CONFIG_SMP");
      for Dependency_Switches ("C") use
         ("-Xmake-dependency=6", "-Xmake-dependency-savefile=");
      for Include_Path        ("C") use "CPATH";
   end Compiler;
     </config>
   </configuration>

   <!--  Additional switches needed on some platforms -->

   <configuration>
     <compilers>
       <compiler name="^GCC$" language="C" />
       <compiler name="^GCC_Pro$" language="C" />
       <compiler name="^GCC-28$" language="C" />
     </compilers>
     <targets negate="true">
       <target name="^.*LynxOS.*$" />
       <target name="^.*mingw.*$" />
       <target name="^.*cygwin.*$" />
       <target name="^.*dec-osf.*$" />
       <target name="^.*wrs-vxworks.*$" />
     </targets>
     <config>
   package Compiler is
      for PIC_Option ("C") use ("-fPIC");
   end Compiler;
     </config>
   </configuration>

   <!-- for cygming we make sure that the option -mno-cygwin is used -->
   <configuration>
     <compilers>
       <compiler name="^GCC-CYGMING$" language="C" />
     </compilers>
     <config>
   package Compiler is
      for Leading_Required_Switches ("C") use
        Compiler'Leading_Required_Switches ("C") &amp; ("-mno-cygwin");
   end Compiler;
     </config>
   </configuration>

   <!-- VxWorks 7.x C support using the WRS compilers  -->

   <configuration>
     <compilers>
       <compiler name="^GCC-WRS7ARM$" runtime="^kernel$" />
       <compiler name="^GCC-WRS7PPC$" runtime="^kernel$" />
       <compiler name="^GCC-WRS7E500V2$" runtime="^kernel$" />
       <compiler name="^GCC-WRS7X86$" runtime="^kernel$" />
       <compiler name="^GCC-WRS7X86_64$" runtime="^kernel$" />
       <compiler name="^DIABC-PPC64$" runtime="^kernel$" />
     </compilers>
     <config>
   package Compiler is
      for Leading_Required_Switches ("C") use
        Compiler'Leading_Required_Switches ("C")
        &amp; ("-I" &amp; VSB_Dir &amp; "/h",
               "-I" &amp; VSB_Dir &amp; "/share/h",
               "-I" &amp; VSB_Dir &amp; "/krnl/h/system",
               "-I" &amp; VSB_Dir &amp; "/krnl/h/public",
               "-D_WRS_KERNEL");
   end Compiler;
     </config>
   </configuration>

   <configuration>
     <compilers>
       <compiler name="^GCC_Pro$" runtime="^rtp$" />
     </compilers>
     <config>
   package Compiler is
      for Leading_Required_Switches ("C") use
        Compiler'Leading_Required_Switches ("C") &amp; ("-mrtp");
   end Compiler;
     </config>
   </configuration>

   <configuration>
     <compilers>
       <compiler name="^GCC-WRS7ARM$" runtime="^rtp$" />
       <compiler name="^GCC-WRS7PPC$" runtime="^rtp$" />
       <compiler name="^GCC-WRS7E500V2$" runtime="^rtp$" />
       <compiler name="^GCC-WRS7X86$" runtime="^rtp$" />
       <compiler name="^GCC-WRS7X86_64$" runtime="^rtp$" />
     </compilers>
     <config>
   package Compiler is
      for Leading_Required_Switches ("C") use
        Compiler'Leading_Required_Switches ("C") &amp; ("-mrtp")
        &amp; ("-I" &amp; VSB_Dir &amp; "/h",
               "-I" &amp; VSB_Dir &amp; "/share/h",
               "-I" &amp; VSB_Dir &amp; "/usr/h/public",
               "-I" &amp; VSB_Dir &amp; "/usr/h");
   end Compiler;
     </config>
   </configuration>

   <configuration>
     <compilers>
       <compiler name="^GCC-WRS7ARM$" />
       <compiler name="^GCC-WRS7E500V2$" />
       <compiler name="^GCC-WRS7PPC$" />
       <compiler name="^GCC-WRS7X86$" />
       <compiler name="^GCC-WRS7X86_64$" />
     </compilers>
     <config>
   package Compiler is
      for Leading_Required_Switches ("C") use
        Compiler'Leading_Required_Switches ("C")
        &amp; ("-DTOOL_FAMILY=gnu",
               "-DTOOL=gnu",
               "-D_VSB_CONFIG_FILE=&lt;config/vsbConfig.h&gt;");
   end Compiler;
     </config>
   </configuration>

   <configuration>
     <compilers>
       <compiler name="^DIABC-PPC64$" />
     </compilers>
     <config>
   package Compiler is
      for Leading_Required_Switches ("C") use
        Compiler'Leading_Required_Switches ("C")
        &amp; ("-DTOOL_FAMILY=diab",
               "-DTOOL=diab",
               "-D_VSB_CONFIG_FILE=&lt;config/vsbConfig.h&gt;");
   end Compiler;
     </config>
   </configuration>

   <configuration>
     <compilers>
       <compiler name="^GCC-WRS7X86_64$" />
     </compilers>
     <config>
   package Compiler is
      for Leading_Required_Switches ("C") use
        Compiler'Leading_Required_Switches ("C")
        &amp; ("-m64", "-mcmodel=large",  "-mno-red-zone");
   end Compiler;
     </config>
   </configuration>

   <configuration>
     <compilers>
       <compiler name="^GCC-WRS7ARM$" />
     </compilers>
     <config>
   package Compiler is
      for Leading_Required_Switches ("C") use
        Compiler'Leading_Required_Switches ("C")
        &amp; ("-DCPU=_VX_ARMARCH7",
               "-t7",
               "-mfpu=vfp",
               "-mfloat-abi=softfp");
   end Compiler;
     </config>
   </configuration>

   <configuration>
     <compilers>
       <compiler name="^GCC-WRS7E500V2$" />
     </compilers>
     <config>
   package Compiler is
      for Leading_Required_Switches ("C") use
        Compiler'Leading_Required_Switches ("C")
        &amp; ("-DCPU=_VX_PPCE500V2",
               "-te500v2",
               "-mhard-float",
               "-mstrict-align");
   end Compiler;
     </config>
   </configuration>

   <configuration>
     <compilers>
       <compiler name="^GCC-WRS7PPC$" />
     </compilers>
     <config>
   package Compiler is
      for Leading_Required_Switches ("C") use
        Compiler'Leading_Required_Switches ("C")
        &amp; ("-DCPU=_VX_PPCE500MC",
               "-mno-powerpc-gfxopt",
               "-mno-isel");
   end Compiler;
     </config>
   </configuration>

</gprconfig>
clean.xml:332:<?xml version="1.0" ?>

<gprconfig>
   <configuration>
      <config>
   package Clean is

      --  Remove the files generated by gnatinspect (in the context of GPS)
      for Artifacts_In_Object_Dir use Clean'Artifacts_In_Object_Dir
         &amp; ("gnatinspect.*");
   end Clean;
      </config>
   </configuration>
</gprconfig>
compilers-arm-vx7.xml:527:<?xml version="1.0" ?>
<!DOCTYPE gprconfig [
<!ENTITY % env.ent SYSTEM "env.ent"> %env.ent;
<!ENTITY % shortcuts.ent SYSTEM "shortcuts.ent"> %shortcuts.ent;
<!ENTITY % vxworks.ent SYSTEM "vxworks.ent"> %vxworks.ent;
<!ENTITY % vx7.ent SYSTEM "vx7.ent"> %vx7.ent;
]>
<gprconfig>

  <compiler_description>
    <name>GCC-WRS7ARM</name>
    <executable prefix="1">cc(arm)</executable>
    &version_from_wrs7_gnu_cc;
    &languages_c;
    &runtimes_vx7;
    <target>arm-wrs-vxworks7</target>
  </compiler_description>

</gprconfig>
compilers-asis.xml:517:<?xml version="1.0" ?>

<gprconfig>

  <!--  ASIS tree generator  -->

  <compiler_description>
    <name>ASIS</name>
    <executable>asis-gcc</executable>
    <version>
     <external>asis-gcc -v</external>
     <grep  regexp=".*for GNAT Pro.+?(\d+(\.\d+)?)" group="1"></grep>
    </version>
    <languages>Ada</languages>
    <runtimes default="default">
       <directory group="default" >\.\./lib/gcc/(.*)/(.*)/adalib/</directory>
    </runtimes>
    <target>asis</target>
  </compiler_description>

</gprconfig>
compilers-baselined.xml:1835:<?xml version="1.0" ?>
<gprconfig>

   <!-- G++ for WRS Linux -->
   <compiler_description>
     <name>G++-WRSLINUX</name>
     <executable prefix="1">(powerpc-wrs-linux-gnu)-cpp</executable>
     <version>
       <external>${PREFIX}-cpp -v</external>
      <grep regexp="^gcc \S+ (\S+)" group="1"></grep>
     </version>
     <languages>C++</languages>
     <runtimes>full</runtimes>
    <target>
      <external>${PREFIX}-cpp -dumpmachine</external>
      <grep regexp="(.*)-gnu" group="1"></grep>
    </target>
   </compiler_description>

   <compiler_description>
     <name>G++-WRSLINUXE500V2</name>
     <executable prefix="1">(powerpc-wrs-linux-gnu)-cpp</executable>
     <version>
       <external>${PREFIX}-cpp -v</external>
      <grep regexp="^gcc \S+ (\S+)" group="1"></grep>
     </version>
     <languages>C++</languages>
     <runtimes>full</runtimes>
     <target>e500v2-wrs-linux</target>
   </compiler_description>

   <!-- C for WRS Linux -->
   <compiler_description>
     <name>GCC-WRSLINUX</name>
     <executable prefix="1">(powerpc-wrs-linux-gnu)-gcc</executable>
     <version>
       <external>${PREFIX}-cpp -v</external>
      <grep regexp="^gcc \S+ (\S+)" group="1"></grep>
     </version>
     <languages>C</languages>
     <runtimes>full</runtimes>
    <target>
      <external>${PREFIX} -dumpmachine</external>
      <grep regexp="(.*)-gnu" group="1"></grep>
    </target>
   </compiler_description>

   <compiler_description>
     <name>GCC-WRSLINUXE500V2</name>
     <executable prefix="1">(powerpc-wrs-linux-gnu)-gcc</executable>
     <version>
       <external>${PREFIX}-cpp -v</external>
      <grep regexp="^gcc \S+ (\S+)" group="1"></grep>
     </version>
     <languages>C</languages>
     <runtimes>full</runtimes>
     <target>e500v2-wrs-linux</target>
   </compiler_description>

</gprconfig>
compilers-e500v2-vx6.xml:1292:<?xml version="1.0" ?>
<!DOCTYPE gprconfig [
<!ENTITY % env.ent SYSTEM "env.ent"> %env.ent;
<!ENTITY % shortcuts.ent SYSTEM "shortcuts.ent"> %shortcuts.ent;
<!ENTITY % vxworks.ent SYSTEM "vxworks.ent"> %vxworks.ent;
<!ENTITY % vx6.ent SYSTEM "vx6.ent"> %vx6.ent;
]>
<gprconfig>

  <compiler_description>
    <name>E500V2-VX6-GCC-WRS</name>
    <executable prefix="1">cc(ppc)</executable>

    &version_from_wind_base;
    &languages_c;
    &runtimes_vx6;
    <target>e500v2-wrs-vxworks</target>
  </compiler_description>

  <compiler_description>
    <name>E500V2-VX6-G++-WRS</name>
    <executable prefix="1">c\+\+(ppc)</executable>

    &version_from_wind_base;
    &languages_cpp;
    &runtimes_vx6;
    <target>e500v2-wrs-vxworks</target>
  </compiler_description>

  <compiler_description>
    <name>GCC-WRS6CERTE500V2</name>
    <executable prefix="1">cc(ppc)</executable>

    &version_from_wind_base_cert;
    &languages_c;
    &runtimes_vx6cert;
    <target>e500v2-wrs-vxworks</target>
  </compiler_description>

  <compiler_description>
    <name>G++-WRS6CERTE500V2</name>
    <executable prefix="1">c\+\+(ppc)</executable>

    &version_from_wind_base_cert;
    &languages_cpp;
    &runtimes_vx6cert;
    <target>e500v2-wrs-vxworks</target>
  </compiler_description>

</gprconfig>
compilers-e500v2-vx653.xml:1309:<?xml version="1.0" ?>
<!DOCTYPE gprconfig [
<!ENTITY % env.ent SYSTEM "env.ent"> %env.ent;
<!ENTITY % shortcuts.ent SYSTEM "shortcuts.ent"> %shortcuts.ent;
<!ENTITY % vxworks.ent SYSTEM "vxworks.ent"> %vxworks.ent;
<!ENTITY % vx653.ent SYSTEM "vx653.ent"> %vx653.ent;
]>
<gprconfig>

  <!-- WRS gcc -v or -dumpmachine have different results depending on
       the version: on 2.3.0.1 and before, it would return
       powerpc-wrs-vxworksae; on 2.4 and later it would return
       powerpc-wrs-vxworks. That (plus the fact the e500v2 and ppc
       compilers use the same executables: ccppc and c++ppc) makes
       us specify one compiler description per CPU. In each of these
       descriptions, the target is hard-coded instead of being deduced
       from cc${PREFIX} -v.  -->

  <compiler_description>
    <name>GCC-WRS653-E500V2</name>
    <executable prefix="1">cc(ppc)</executable>

    &version_from_wind_base_vx653;
    &languages_cpp;
    &runtimes_vx653;
    <target>e500v2-wrs-vxworksae</target>
  </compiler_description>

  <compiler_description>
    <name>G++-WRS653-E500V2</name>
    <executable prefix="1">c\+\+(ppc)</executable>

    &version_from_wind_base_vx653;
    &languages_cpp;
    &runtimes_vx653;
    <target>e500v2-wrs-vxworksae</target>
  </compiler_description>

</gprconfig>
compilers-e500v2-vx7.xml:533:<?xml version="1.0" ?>
<!DOCTYPE gprconfig [
<!ENTITY % env.ent SYSTEM "env.ent"> %env.ent;
<!ENTITY % shortcuts.ent SYSTEM "shortcuts.ent"> %shortcuts.ent;
<!ENTITY % vxworks.ent SYSTEM "vxworks.ent"> %vxworks.ent;
<!ENTITY % vx7.ent SYSTEM "vx7.ent"> %vx7.ent;
]>
<gprconfig>

  <compiler_description>
    <name>GCC-WRS7E500V2</name>
    <executable prefix="1">cc(ppc)</executable>
    &version_from_wrs7_gnu_cc;
    &languages_c;
    &runtimes_vx7;
    <target>e500v2-wrs-vxworks7</target>
  </compiler_description>

</gprconfig>
compilers-e500v2-vx7r2.xml:539:<?xml version="1.0" ?>
<!DOCTYPE gprconfig [
<!ENTITY % env.ent SYSTEM "env.ent"> %env.ent;
<!ENTITY % shortcuts.ent SYSTEM "shortcuts.ent"> %shortcuts.ent;
<!ENTITY % vxworks.ent SYSTEM "vxworks.ent"> %vxworks.ent;
<!ENTITY % vx7.ent SYSTEM "vx7.ent"> %vx7.ent;
]>
<gprconfig>

  <compiler_description>
    <name>GCC-WRS7R2E500V2</name>
    <executable prefix="1">cc(ppc)</executable>
    &version_from_wrs7r2_gnu_cc;
    &languages_c;
    &runtimes_vx7;
    <target>e500v2-wrs-vxworks7r2</target>
  </compiler_description>

</gprconfig>
compilers-ppc-vx653.xml:1303:<?xml version="1.0" ?>
<!DOCTYPE gprconfig [
<!ENTITY % env.ent SYSTEM "env.ent"> %env.ent;
<!ENTITY % shortcuts.ent SYSTEM "shortcuts.ent"> %shortcuts.ent;
<!ENTITY % vxworks.ent SYSTEM "vxworks.ent"> %vxworks.ent;
<!ENTITY % vx653.ent SYSTEM "vx653.ent"> %vx653.ent;
]>
<gprconfig>

  <!-- WRS gcc -v or -dumpmachine have different results depending on
       the version: on 2.3.0.1 and before, it would return
       powerpc-wrs-vxworksae; on 2.4 and later it would return
       powerpc-wrs-vxworks. That (plus the fact the e500v2 and ppc
       compilers use the same executables: ccppc and c++ppc) makes
       us specify one compiler description per CPU. In each of these
       descriptions, the target is hard-coded instead of being deduced
       from cc${PREFIX} -v.  -->

  <compiler_description>
    <name>GCC-WRS653-PPC</name>
    <executable prefix="1">cc(ppc)</executable>

    &version_from_wind_base_vx653;
    &languages_c;
    &runtimes_vx653;
    <target>powerpc-wrs-vxworksae</target>
  </compiler_description>

  <compiler_description>
    <name>G++-WRS653-PPC</name>
    <executable prefix="1">c\+\+(ppc)</executable>

    &version_from_wind_base_vx653;
    &languages_cpp;
    &runtimes_vx653;
    <target>powerpc-wrs-vxworksae</target>
  </compiler_description>

</gprconfig>
compilers-ppc-vx7.xml:531:<?xml version="1.0" ?>
<!DOCTYPE gprconfig [
<!ENTITY % env.ent SYSTEM "env.ent"> %env.ent;
<!ENTITY % shortcuts.ent SYSTEM "shortcuts.ent"> %shortcuts.ent;
<!ENTITY % vxworks.ent SYSTEM "vxworks.ent"> %vxworks.ent;
<!ENTITY % vx7.ent SYSTEM "vx7.ent"> %vx7.ent;
]>
<gprconfig>

  <compiler_description>
    <name>GCC-WRS7PPC</name>
    <executable prefix="1">cc(ppc)</executable>
    &version_from_wrs7_gnu_cc;
    &languages_c;
    &runtimes_vx7;
    <target>powerpc-wrs-vxworks7</target>
  </compiler_description>

</gprconfig>
compilers-ppc-vx7r2.xml:537:<?xml version="1.0" ?>
<!DOCTYPE gprconfig [
<!ENTITY % env.ent SYSTEM "env.ent"> %env.ent;
<!ENTITY % shortcuts.ent SYSTEM "shortcuts.ent"> %shortcuts.ent;
<!ENTITY % vxworks.ent SYSTEM "vxworks.ent"> %vxworks.ent;
<!ENTITY % vx7.ent SYSTEM "vx7.ent"> %vx7.ent;
]>
<gprconfig>

  <compiler_description>
    <name>GCC-WRS7R2PPC</name>
    <executable prefix="1">cc(ppc)</executable>
    &version_from_wrs7r2_gnu_cc;
    &languages_c;
    &runtimes_vx7;
    <target>powerpc-wrs-vxworks7r2</target>
  </compiler_description>

</gprconfig>
compilers-ppc64-vx7.xml:755:<?xml version="1.0" ?>
<!DOCTYPE gprconfig [
<!ENTITY % env.ent SYSTEM "env.ent"> %env.ent;
<!ENTITY % shortcuts.ent SYSTEM "shortcuts.ent"> %shortcuts.ent;
<!ENTITY % vxworks.ent SYSTEM "vxworks.ent"> %vxworks.ent;
<!ENTITY % vx7.ent SYSTEM "vx7.ent"> %vx7.ent;
]>
<gprconfig>

  <!-- Diab PPC64 C Compiler -->
  <!-- check that the version is >= 5.9.6.0 -->
  <compiler_description>
    <name>DIABC-PPC64</name>
    <executable>dcc</executable>
    <version>
      <external>dcc -V</external>
      <grep regexp=".*dcc(.exe)? Rel ([0-9.]*)" group="2"></grep>
      <must_match>5[.]9[.][6-9].*</must_match>
    </version>
    <languages>C</languages>
    &runtimes_vx7;
    <target>powerpc64-wrs-vxworks7</target>
  </compiler_description>

</gprconfig>
compilers-ppc64-vx7r2.xml:541:<?xml version="1.0" ?>
<!DOCTYPE gprconfig [
<!ENTITY % env.ent SYSTEM "env.ent"> %env.ent;
<!ENTITY % shortcuts.ent SYSTEM "shortcuts.ent"> %shortcuts.ent;
<!ENTITY % vxworks.ent SYSTEM "vxworks.ent"> %vxworks.ent;
<!ENTITY % vx7.ent SYSTEM "vx7.ent"> %vx7.ent;
]>
<gprconfig>

  <compiler_description>
    <name>GCC-WRS7R2PPC64</name>
    <executable prefix="1">cc(ppc)</executable>
    &version_from_wrs7r2_gnu_cc;
    &languages_c;
    &runtimes_vx7;
    <target>powerpc64-wrs-vxworks7r2</target>
  </compiler_description>

</gprconfig>
compilers-vxworks.xml:1783:<?xml version="1.0" ?>
<!DOCTYPE gprconfig [
<!ENTITY % env.ent SYSTEM "env.ent"> %env.ent;
<!ENTITY % shortcuts.ent SYSTEM "shortcuts.ent"> %shortcuts.ent;
<!ENTITY % vxworks.ent SYSTEM "vxworks.ent"> %vxworks.ent;
<!ENTITY % vx6.ent SYSTEM "vx6.ent"> %vx6.ent;
]>
<gprconfig>

  <compiler_description>
    <name>GCC-WRS6</name>
    <executable prefix="1">cc(arm|pentium|ppc)</executable>

    &version_from_wind_base;
    &languages_c;
    &runtimes_vx6;
    &target_from_wrs_gnu_cc;
  </compiler_description>

  <compiler_description>
    <name>G++-WRS6</name>
    <executable prefix="1">c\+\+(arm|pentium|ppc)</executable>

    &version_from_wind_base;
    &languages_cpp;
    &runtimes_vx6;
    &target_from_wrs_gnu_cpp;
  </compiler_description>

  <!-- VxWorks 6 Cert -->
  <compiler_description>
    <name>GCC-WRS6CERT</name>
    <executable prefix="1">cc(arm|pentium|ppc)</executable>
    &version_from_wind_base_cert;
    &languages_c;
    &runtimes_vx6cert;
    &target_from_wrs_gnu_cc;
  </compiler_description>

  <compiler_description>
    <name>G++-WRS6CERT</name>
    <executable prefix="1">c\+\+(arm|pentium|ppc)</executable>
    &version_from_wind_base_cert;
    &languages_cpp;
    &runtimes_vx6cert;
    &target_from_wrs_gnu_cpp;
  </compiler_description>

  <!-- VxWorks 5 -->
  <compiler_description>
    <name>GCC-WRS5</name>
    <executable prefix="1">cc(arm|pentium|sh|mips|ppc|sparc)</executable>

    &version_from_wrs_gnu_cc_vx5;
    &languages_c;
    &target_from_wrs_gnu_cc;
  </compiler_description>

  <compiler_description>
    <name>G++-WRS5</name>
    <executable prefix="1">cc(arm|pentium|sh|mips|ppc|sparc)</executable>

    &version_from_wrs_gnu_cpp_vx5;
    &languages_cpp;
    &target_from_wrs_gnu_cpp;
  </compiler_description>

</gprconfig>
compilers-x86-vx7.xml:532:<?xml version="1.0" ?>
<!DOCTYPE gprconfig [
<!ENTITY % env.ent SYSTEM "env.ent"> %env.ent;
<!ENTITY % shortcuts.ent SYSTEM "shortcuts.ent"> %shortcuts.ent;
<!ENTITY % vxworks.ent SYSTEM "vxworks.ent"> %vxworks.ent;
<!ENTITY % vx7.ent SYSTEM "vx7.ent"> %vx7.ent;
]>
<gprconfig>

  <compiler_description>
    <name>GCC-WRS7X86</name>
    <executable prefix="1">cc(pentium)</executable>
    &version_from_wrs7_gnu_cc;
    &languages_c;
    &runtimes_vx7;
    <target>i586-wrs-vxworks7</target>
  </compiler_description>

</gprconfig>
compilers-x86_64-vx7.xml:537:<?xml version="1.0" ?>
<!DOCTYPE gprconfig [
<!ENTITY % env.ent SYSTEM "env.ent"> %env.ent;
<!ENTITY % shortcuts.ent SYSTEM "shortcuts.ent"> %shortcuts.ent;
<!ENTITY % vxworks.ent SYSTEM "vxworks.ent"> %vxworks.ent;
<!ENTITY % vx7.ent SYSTEM "vx7.ent"> %vx7.ent;
]>
<gprconfig>

  <compiler_description>
    <name>GCC-WRS7X86_64</name>
    <executable prefix="1">cc(pentium)</executable>
    &version_from_wrs7_gnu_cc;
    &languages_c;
    &runtimes_vx7;
    <target>x86_64-wrs-vxworks7</target>
  </compiler_description>

</gprconfig>
compilers.xml:17343:<?xml version="1.0" ?>
<gprconfig>
  <!--  Languages that require no compiler, but can be selected through
        -config -->
  <compiler_description>
    <name>SIMULINK</name>
    <languages>Simulink</languages>
  </compiler_description>

  <compiler_description>
    <name>MATLAB</name>
    <languages>Matlab</languages>
  </compiler_description>

  <compiler_description>
    <name>PRJFILE</name>
    <languages>Project File</languages>
  </compiler_description>

  <!--    GCC 3.x & 4.x (not for GNAT Pro)-->
  <compiler_description>
    <name>GCC</name>
    <executable prefix="1">(.*-wrs-.*|.*-sysgo.*|.*-elf-.*|.*-eabi-.*|.*-eabispe-.*|avr-.*|.*-elinos-linux.*|.*-generic-linux-gnu-|.*mingw32.*|.*-xcoff-.*|arm-linux-androideabi-|arm-linux-gnueabi-|arm-linux-gnueabihf-|e500v2-gnu-linux-|powerpc-.*-linux.*-|.*-darwin.*-|aarch64-linux-gnu-)?gcc</executable>
    <version>
      <external>${PREFIX}gcc -v</external>
      <nogrep regexp="for GNAT Pro"></nogrep>
      <grep regexp="^gcc \S+ (\S+)" group="1"></grep>
    </version>
    <languages>C</languages>
    <target>
      <external>${PREFIX}gcc -dumpmachine</external>
      <grep regexp="[^\r\n]+"></grep>
    </target>
  </compiler_description>

  <!--    GCC for GNAT Pro 3.x & 4.x -->
  <compiler_description>
    <name>GCC_Pro</name>
    <executable prefix="1">(.*-wrs-.*|.*-sysgo.*|.*-elf-.*|.*-eabi-.*|.*-eabispe-.*|avr-.*|.*-elinos-linux.*|.*-generic-linux-gnu-|.*mingw32.*|.*-xcoff-.*|arm-linux-androideabi-|arm-linux-gnueabi-|arm-linux-gnueabihf-|e500v2-gnu-linux-|powerpc-.*-linux.*-|.*-darwin.*-|aarch64-linux-gnu-|.*-qnx.*|.*-rtems.*)?gcc</executable>
    <version>
      <external>${PREFIX}gcc -v</external>

      <!--  'gcc version 4.7.4 20131104 for GNAT Pro ...' -->
      <grep regexp="^gcc \S+ (\S+) \d+ (\(prerelease\) )?\(?for GNAT Pro" group="1"></grep>
    </version>
    <languages>C</languages>
    <target>
      <external>${PREFIX}gcc -dumpmachine</external>
      <grep regexp="[^\r\n]+"></grep>
    </target>
  </compiler_description>

  <!-- PikeOS -->

  <compiler_description>
    <name>GCC-SYSGO-ARM</name>
    <executable prefix="1">(arm_v7hf-)gcc</executable>
    <version>
      <getenv name="PIKEOS_VERSION" />
    </version>
    <languages>C</languages>
    <target>arm-sysgo-pikeos</target>
  </compiler_description>

  <compiler_description>
    <name>GCC-SYSGO-X86</name>
    <executable prefix="1">(x86_i586-)gcc</executable>
    <version>
      <getenv name="PIKEOS_VERSION" />
    </version>
    <languages>C</languages>
    <target>i586-sysgo-pikeos</target>
  </compiler_description>

  <compiler_description>
    <name>GCC-SYSGO-PPC</name>
    <executable prefix="1">(ppc_oea-)gcc</executable>
    <version>
      <getenv name="PIKEOS_VERSION" />
    </version>
    <languages>C</languages>
    <target>powerpc-sysgo-pikeos</target>
  </compiler_description>

  <!--     GCC 2.8.1
    There is no switch, in such versions, to find out the list of languages,
    so we just assume there is only C.
    C++ could be found by looking for the "g++" executable
  -->
  <compiler_description>
    <name>GCC-28</name>
    <executable>gcc</executable>
    <version>
      <external>gcc -v</external>
      <grep regexp="^gcc \S+ (\S+)" group="1"></grep>
      <must_match>2\.8\.</must_match>
    </version>
    <languages>C</languages>
    <target>
      <external>gcc -dumpmachine</external>
      <grep regexp="[^\r\n]+"></grep>
    </target>
  </compiler_description>

  <!--    GNAAMP -->
  <compiler_description>
    <name>GNAAMP</name>
    <executable>gnaampmake</executable>
    <version>
     <external>gnaampls -v</external>
     <grep  regexp="^GNATLS.+?(\d+(\.\d+)?)" group="1"></grep>
    </version>
    <languages>Ada</languages>
    <target>aamp</target>
  </compiler_description>

  <!--  G++ compilers (not for GNAT Pro)  -->
  <compiler_description>
    <name>G++</name>
    <executable>g\+\+</executable>
    <version>
      <external>g++ -v</external>
      <nogrep regexp="for GNAT Pro"></nogrep>
      <grep regexp="^gcc \S+ (\S+)" group="1"></grep>
    </version>
    <languages>C++</languages>
    <target>
      <external>g++ -dumpmachine</external>
      <grep regexp="[^\r\n]+"></grep>
    </target>
  </compiler_description>

  <!--  G++ compilers for GNAT Pro  -->
  <compiler_description>
    <name>G++_Pro</name>
    <executable prefix="1">(.*-wrs-.*|.*-linux-gnu.*-)?g\+\+</executable>
    <version>
      <external>${PREFIX}g++ -v</external>

      <!--  'gcc version 4.7.4 20131104 for GNAT Pro ...' -->
      <grep regexp="^gcc \S+ (\S+) \d+ \(?for GNAT Pro" group="1"></grep>
    </version>
    <languages>C++</languages>
    <target>
      <external>${PREFIX}g++ -dumpmachine</external>
      <grep regexp="[^\r\n]+"></grep>
    </target>
  </compiler_description>

  <!--  Assembler -->
  <compiler_description>
    <name>GCC-ASM</name>
    <executable prefix="1">(.*-wrs-.*|.*-sysgo.*|.*-elf-.*|.*-eabi-.*|.*-eabispe-.*|avr-.*|.*-elinos-linux.*|.*-generic-linux-gnu-|.*mingw32.*|.*-xcoff-.*|arm-linux-androideabi-|arm-linux-gnueabi-|arm-linux-gnueabihf-|e500v2-gnu-linux-|powerpc-.*-linux.*-|.*-darwin.*-|aarch64-linux-gnu-|.*-qnx.*|.*-rtems.*)?gcc</executable>
    <version>
      <external>${PREFIX}gcc -v</external>
      <grep regexp="^gcc \S+ (\S+)" group="1"></grep>
    </version>
    <languages>Asm,Asm_Cpp,Asm2</languages>
    <target>
      <external>${PREFIX}gcc -dumpmachine</external>
      <grep regexp="[^\r\n]+"></grep>
    </target>
  </compiler_description>

  <!--  Binary image -->
  <compiler_description>
    <name>LD</name>
    <executable prefix="1">(.*-wrs-.*|.*-sysgo.*|.*-elf-.*|.*-eabi-.*|.*-eabispe-.*|avr-.*|.*-elinos-linux.*|.*-generic-linux-gnu-|.*mingw32.*|.*-xcoff-.*|arm-linux-androideabi-|arm-linux-gnueabi-|arm-linux-gnueabihf-|e500v2-gnu-linux-|powerpc-.*-linux.*-|.*-darwin.*-|aarch64-linux-gnu-|.*-qnx.*|.*-rtems.*)?ld</executable>
    <version>
      <external>${PREFIX}ld -v</external>
      <grep regexp="^GNU ld.* (\S+)" group="1"></grep>
    </version>
    <languages>Bin_Img</languages>
    <target>
      <external>${PREFIX}gcc -dumpmachine</external>
      <grep regexp="[^\r\n]+"></grep>
    </target>
  </compiler_description>

   <!--   GNAT
    To find the list of supported runtimes, we check the contents of
    the directory. To be compatible with older versions of GNAT (3.16
    for instance), we also accept lib/gcc-lib as the directory that
    contains the runtime files.
   -->
  <compiler_description>
    <name>GNAT</name>
    <executable prefix="1">(.*-wrs-.*|.*-sysgo.*|.*-elf-.*|.*-eabi-.*|.*-eabispe-.*|avr-.*|.*-elinos-linux.*|.*-generic-linux-gnu-|.*mingw32.*|.*-xcoff-.*|arm-linux-androideabi-|arm-linux-gnueabi-|arm-linux-gnueabihf-|e500v2-gnu-linux-|powerpc-.*-linux.*-|.*-darwin.*-|aarch64-linux-gnu-|.*-qnx.*|.*-rtems.*)?gnatls</executable>
    <version>
      <external>${PREFIX}gnatls -v --version</external>
      <grep regexp="^GNATLS.+?(\d+(\.\d+)?)" group="1"></grep>
    </version>
    <languages>Ada</languages>
    <variable name="gcc_version">
      <external>${PREFIX}gcc -v</external>
      <grep regexp="^[-\w]*gcc \S+ (\S+)" group="1"></grep>
    </variable>
    <runtimes default="default,kernel,native">
       <directory group="default" >\.\./lib/gcc(-lib)?/$TARGET/$gcc_version/adalib/</directory>
       <directory group="default" contents="^rts-">\.\./lib/gcc(-lib)?/$TARGET/$gcc_version/ada_object_path</directory>
       <directory group="2" >\.\./lib/gcc(-lib)?/$TARGET/$gcc_version/rts-(.*)/adalib/</directory>
       <directory group="1" >\.\./$TARGET/lib/gnat/(.*)/adalib/</directory>
    </runtimes>
    <target>
      <external>${PREFIX}gcc -dumpmachine</external>
      <grep regexp="[^\r\n]+"></grep>
    </target>
  </compiler_description>

  <!--  CodePeer -->

  <compiler_description>
    <name>GNAT_CODEPEER</name>
    <executable prefix="1">(.*gnsa-|.*codepeer-)gnatls</executable>
    <version>
      <external>${PREFIX}gnatls -v</external>
      <grep regexp="^GNATLS.+?(\d+(\.\d+)?)" group="1"></grep>
    </version>
    <languages>Ada,C,C++</languages>
    <variable name="gcc_version">
      <external>${PREFIX}gcc -v</external>
      <grep regexp="^[-\w]*gcc \S+ (\S+)" group="1"></grep>
    </variable>
    <runtimes default="default,native">
       <directory group="default" >\.\./lib/gcc/.*/$gcc_version/adalib/</directory>
       <directory group="1" >\.\./lib/gnat/(.*)/adalib/</directory>
       <directory group="1" >\.\./lib/gcc/.*/$gcc_version/rts-(.*)/adalib/</directory>
    </runtimes>
    <target>codepeer</target>
  </compiler_description>

  <!--  Generic GNAT LLVM Target -->

  <compiler_description>
    <name>GNAT_LLVM</name>
    <executable prefix="1">(llvm-)gnatls</executable>
    <version>
      <external>${PREFIX}gnatls -v</external>
      <grep regexp="^GNATLS.+?(\d+(\.\d+)?)" group="1"></grep>
    </version>
    <languages>Ada</languages>
    <variable name="gcc_version">
      <external>${PREFIX}gcc -v</external>
      <grep regexp="^[-\w]*gcc \S+ (\S+)" group="1"></grep>
    </variable>
    <runtimes default="default,native">
       <directory group="default" >\.\./lib/rts-native/adalib/</directory>
       <directory group="1" >\.\./lib/rts-(.*)/adalib/</directory>
    </runtimes>
    <target>llvm</target>
  </compiler_description>

  <!--  Generic C compiler for LLVM  -->
  <compiler_description>
    <name>C_LLVM</name>
    <executable>clang</executable>
    <version>
      <external>clang --version</external>

      <!--  '...clang version 6.0.0...'  -->
      <grep regexp="clang version (\S+)" group="1"></grep>
    </version>
    <languages>C</languages>
    <target>llvm</target>
  </compiler_description>

  <!--  Generic C++ compiler for LLVM  -->
  <compiler_description>
    <name>C++_LLVM</name>
    <executable>clang\+\+</executable>
    <version>
      <external>clang++ --version</external>

      <!--  '...clang version 6.0.0...'  -->
      <grep regexp="clang version (\S+)" group="1"></grep>
    </version>
    <languages>C++</languages>
    <target>llvm</target>
  </compiler_description>

  <!--  C Target -->

  <compiler_description>
    <name>GNAT_C</name>
    <executable prefix="1">(c-)gnatls</executable>
    <version>
      <external>${PREFIX}gnatls -v</external>
      <grep regexp="^GNATLS.+?(\d+(\.\d+)?)" group="1"></grep>
    </version>
    <languages>Ada</languages>
    <variable name="gcc_version">
      <external>${PREFIX}gcc -v</external>
      <grep regexp="^[-\w]*gcc \S+ (\S+)" group="1"></grep>
    </variable>
    <runtimes default="default,ccg">
       <directory group="default" >\.\./libexec/gnat_ccg/lib/gcc/.*/$gcc_version/adalib/</directory>
       <directory group="1" >\.\./libexec/gnat_ccg/lib/gcc/.*/$gcc_version/rts-(.*)/adalib/</directory>
       <directory group="1" >\.\./lib/gnat/(.*)/adalib/</directory>
    </runtimes>
    <target>c</target>
  </compiler_description>

  <!--  CCG Target (C generation via LLVM) -->

  <compiler_description>
    <name>GNAT_CCG</name>
    <executable>llvm-gnatls</executable>
    <version>
      <external>llvm-gnatls -v</external>
      <grep regexp="^GNATLS.+?(\d+(\.\d+)?)" group="1"></grep>
    </version>
    <languages>Ada</languages>
    <variable name="gcc_version">
      <external>llvm-gcc -v</external>
      <grep regexp="^[-\w]*gcc \S+ (\S+)" group="1"></grep>
    </variable>
    <runtimes default="default,ccg">
       <directory group="default" >\.\./lib/rts-ccg/adalib/</directory>
       <directory group="1" >\.\./lib/rts-(.*)/adalib/</directory>
    </runtimes>
    <target>ccg</target>
  </compiler_description>

  <!--  GNAT CUDA Target -->

  <compiler_description>
    <name>GNAT_CUDA</name>
    <executable prefix="1">llvm-gnatls</executable>
    <version>
      <external>llvm-gnatls -v</external>
      <grep regexp="^GNATLS.+?(\d+(\.\d+)?)" group="1"></grep>
    </version>
    <languages>Ada</languages>
    <variable name="gcc_version">
      <external>cuda-gcc -v</external>
      <grep regexp="^[-\w]*gcc \S+ (\S+)" group="1"></grep>
    </variable>
    <runtimes default="default,device-cuda">
       <directory group="default" >\.\./lib/rts-device-cuda/adalib/</directory>
       <directory group="1" >\.\./lib/rts-(.*)/adalib/</directory>
    </runtimes>
    <target>cuda</target>
  </compiler_description>


  <!--  GNAT_DOTNET -->

  <compiler_description>
    <name>GNAT_DOTNET</name>
    <executable prefix="1">(.*dotnet-)gnatls</executable>
    <version>
      <external>${PREFIX}gnatls -v</external>
      <grep regexp="^GNATLS.+?(\d+(\.\d+)?)" group="1"></grep>
    </version>
    <languages>Ada</languages>
    <runtimes default="default,kernel">
       <directory group="default" >\.\./lib/dotgnat/adalib/</directory>
       <directory group="1" >\.\./lib/dotgnat/rts-(.*)/adalib/</directory>
    </runtimes>
    <target>dotnet</target>
  </compiler_description>

  <!--  JGNAT -->

  <compiler_description>
    <name>JGNAT</name>
    <executable prefix="1">(.*jvm-)gnatls</executable>
    <version>
      <external>${PREFIX}gnatls -v</external>
      <grep regexp="^GNATLS.+?(\d+(\.\d+)?)" group="1"></grep>
    </version>
    <languages>Ada</languages>
    <runtimes default="default">
       <directory group="default" >\.\./lib/jgnat/adalib/</directory>
       <directory group="1" >\.\./lib/jgnat/rts-(.*)/adalib/</directory>
    </runtimes>
    <target>jvm</target>
  </compiler_description>

  <!--    G77  -->
  <compiler_description>
    <name>G77</name>
    <executable>g77</executable>
    <version>
      <external>g77 --version</external>
      <grep regexp="\(GCC.*\) (\S+)" group="1"></grep>
    </version>
    <languages>Fortran</languages>
    <target>
      <external>g77 -dumpmachine</external>
      <grep regexp="[^\r\n]+"></grep>
    </target>
  </compiler_description>

  <!--    GFortran  -->
  <compiler_description>
    <name>GFORTRAN</name>
    <executable>gfortran</executable>
    <version>
      <external>gfortran -v</external>
      <grep regexp="^gcc \S+ (\S+)" group="1"></grep>
    </version>
    <languages>Fortran</languages>
    <target>
      <external>gfortran -dumpmachine</external>
      <grep regexp="[^\r\n]+"></grep>
    </target>
  </compiler_description>

  <!--    mingw-cygwin compiler  -->
  <compiler_description>
    <name>GCC-CYGMING</name>
    <executable>gcc</executable>
    <version>
      <external>gcc --version</external>
      <grep regexp="\(GCC\) (\S+).*\(cygming special\)" group="1"></grep>
    </version>
    <languages>C,C++,Fortran</languages>
    <target>
      <external>gcc -mno-cygwin -dumpmachine</external>
      <grep regexp="[^\r\n]+"></grep>
    </target>
  </compiler_description>

  <compiler_description>
    <name>GCC-MINGW32</name>
    <executable prefix="1">gcc(-sjlj|)</executable>
    <version>
      <external>gcc${PREFIX} --version</external>
      <grep regexp="\(GCC\) (\S+).*\(mingw32.*\)" group="1"></grep>
    </version>
    <languages>C,C++,Fortran</languages>
    <target>
      <external>gcc${PREFIX} -dumpmachine</external>
      <grep regexp="[^\r\n]+"></grep>
    </target>
  </compiler_description>

  <!-- Diab C Compiler -->
  <compiler_description>
    <name>DIABC-PPC</name>
    <executable>dcc</executable>
    <version>
      <external>dcc -V</external>
      <grep regexp=".*dcc(.exe)? Rel ([0-9.]*)" group="2"></grep>
    </version>
    <languages>C</languages>
    <target>powerpc-elf</target>
  </compiler_description>

  <!-- LynxWorks C compiler for LynxOS-178 -->
  <compiler_description>
    <name>LYNXWORKS-C</name>
    <executable>gcc</executable>
    <version>
      <external>gcc -v</external>
      <grep regexp="^gcc version (\S+)" group="1"></grep>
    </version>
    <languages>C</languages>
    <target>
      <external>gcc -dumpmachine</external>
      <grep regexp="[^\r\n]+"></grep>
      <must_match>.*xcoff-lynxos.*</must_match>
    </target>
  </compiler_description>

  <!-- LynxWorks C++ compiler for LynxOS-178 -->
  <compiler_description>
    <name>LYNXWORKS-C++</name>
    <executable>c\+\+</executable>
    <version>
      <external>c++ -v</external>
      <grep regexp="^gcc version (\S+)" group="1"></grep>
    </version>
    <languages>C++</languages>
    <target>
      <external>c++ -dumpmachine</external>
      <grep regexp="[^\r\n]+"></grep>
      <must_match>.*xcoff-lynxos.*</must_match>
    </target>
  </compiler_description>

  <!-- LLVM Compiler -->
  <compiler_description>
    <name>LLVM</name>
    <executable>clang</executable>
    <version>
      <external>clang -v</external>
      <grep regexp=".*(LLVM|clang) version ([0-9.]*)" group="2"></grep>
    </version>
    <languages>C,C++</languages>
    <target>
      <external>clang -dumpmachine</external>
      <grep regexp="[^\r\n]+"></grep>
    </target>
  </compiler_description>

  <!--  Windres compiler -->
  <compiler_description>
    <name>WINDRES</name>
    <executable prefix="1">(i686-.*-mingw32-|x86_64-.*-mingw32-)?windres</executable>
    <version>
      <external>${PREFIX}windres --version</external>
      <grep regexp="^GNU windres \(GNU Binutils\) (\S+)" group="1"></grep>
    </version>
    <languages>WinRes</languages>
    <target>
      <external>${PREFIX}gcc -dumpmachine</external>
      <grep regexp="[^\r\n]+"></grep>
    </target>
  </compiler_description>

</gprconfig>
cpp.xml:6359:<?xml version="1.0" ?>
<gprconfig>
   <!--  This package provides the default standard options for a gcc
         C++ compiler -->

   <configuration>
     <compilers>
        <compiler name="^G\+\+$" language="C++" />
        <compiler name="^G\+\+_Pro$" language="C++" />
        <compiler name="^GCC-CYGMING$" language="C++" />
       <compiler name="^GCC-MINGW32$" language="C++" />
     </compilers>
     <config>
   package Compiler is
      for Driver              ("C++") use "${PATH(c++)}${PREFIX(c++)}g++";
   end Compiler;
     </config>
   </configuration>

   <configuration>
     <compilers>
        <compiler name="^G\+\+-WRS653-PPC$" language="C++" />
        <compiler name="^G\+\+-WRS653-E500V2$" language="C++" />
        <compiler name="^G\+\+-WRS5$" language="C++" />
        <compiler name="^G\+\+-WRS6$" language="C++" />
        <compiler name="^G\+\+-WRS6E500V2$" language="C++" />
        <compiler name="^G\+\+-WRS6CERT$" language="C++" />
        <compiler name="^G\+\+-WRS6CERTE500V2$" language="C++" />
    </compilers>
     <config>
   package Compiler is
      for Driver              ("C++") use "${PATH(c++)}c++${PREFIX(c++)}";
   end Compiler;
     </config>
   </configuration>

   <configuration>
     <compilers>
       <compiler name="^DIABC-PPC64$" language="C++" />
     </compilers>
     <config>
   package Compiler is
      for Driver              ("C++") use "${PATH(c++)}dcc";
   end Compiler;
     </config>
   </configuration>

   <configuration>
     <compilers>
       <compiler name="LLVM" language="C++" />
     </compilers>
     <config>
   package Compiler is
      for Driver              ("C++") use "${PATH(c++)}clang++";
   end Compiler;
     </config>
   </configuration>

   <configuration>
     <compilers>
        <compiler name="^G\+\+$" language="C++" />
        <compiler name="^G\+\+_Pro$" language="C++" />
        <compiler name="^G\+\+-WRS653-PPC$" language="C++" />
        <compiler name="^G\+\+-WRS653-E500V2$" language="C++" />
        <compiler name="^G\+\+-WRS6$" language="C++" />
        <compiler name="^G\+\+-WRS6E500V2$" language="C++" />
        <compiler name="^G\+\+-WRS6CERT$" language="C++" />
        <compiler name="^G\+\+-WRS6CERTE500V2$" language="C++" />
        <compiler name="^GCC-CYGMING$" language="C++" />
        <compiler name="^GCC-MINGW32$" language="C++" />
     </compilers>
     <config>
   package Compiler is
      for Leading_Required_Switches   ("C++") use
        ("-c", "-x", "c++") &amp;
        Compiler'Leading_Required_Switches ("C++");
      for Dependency_Switches ("C++") use ("-MMD", "-MF", "");
      for Include_Switches_Via_Spec ("C++") use ("cc1plus", "-I");
      for Max_Command_Line_Length use "8192";
      for Response_File_Format    ("C++") use "GCC_GNU";
   end Compiler;
     </config>
   </configuration>

   <configuration>
     <compilers>
        <compiler name="LLVM" language="C++" />
     </compilers>
     <config>
   package Compiler is
      for Leading_Required_Switches   ("C++") use
        ("-c", "-x", "c++") &amp;
        Compiler'Leading_Required_Switches ("C++");
      for Dependency_Switches ("C++") use ("-MMD", "-MF", "");
      for Max_Command_Line_Length use "8192";
      for Response_File_Format    ("C++") use "GCC_GNU";
   end Compiler;
     </config>
   </configuration>

   <configuration>
     <compilers>
       <compiler name="^DIABC-PPC64$" language="C++" />
     </compilers>
     <config>
   package Compiler is
      for Leading_Required_Switches   ("C++") use
        Compiler'Leading_Required_Switches ("C++")
        &amp; ("-tPPCLP64FH:vxworks7",
               "-c",
               "-ffixed-r13",
               "-Xclib-optim-off",
               "-Xlocal-data-area-static-only",
               "-Xc-new",
               "-Xcode-absolute-far",
               "-D_WRS_HARDWARE_FP",
               "-DCPU=_VX_PPCE6500",
               "-D_WRS_VX_SMP",
               "-D_WRS_CONFIG_SMP");
      for Dependency_Switches ("C") use
         ("-Xmake-dependency=6", "-Xmake-dependency-savefile=");
   end Compiler;
     </config>
   </configuration>

   <!-- G++-WRS5 does not support -MF switch -->
   <configuration>
     <compilers>
        <compiler name="^G\+\+-WRS5$" language="C++" />
     </compilers>
     <config>
   package Compiler is
      for Leading_Required_Switches   ("C++") use
        Compiler'Leading_Required_Switches ("C++") &amp;
        ("-c", "-x", "c++");
      for Dependency_Switches ("C++") use ("-Wp,-MMD,");
      for Include_Path        ("C++") use "CPATH";
   end Compiler;
     </config>
   </configuration>

   <!--  Additional switches on some platforms -->

   <configuration>
     <compilers>
       <compiler name="^G\+\+$" language="C++" />
       <compiler name="^G\+\+_Pro$" language="C++" />
     </compilers>
     <targets negate="true">
       <target name="^.*LynxOS.*$" />
       <target name="^.*mingw.*$" />
       <target name="^.*cygwin.*$" />
       <target name="^.*tru64.*$" />
     </targets>
     <config>
   package Compiler is
      for PIC_Option      ("C++") use ("-fPIC");
   end Compiler;
     </config>
   </configuration>

   <!-- in cygminw mode, make sure that the option -mno-cygwin is used -->

   <configuration>
     <compilers>
       <compiler name="^GCC-CYGMING$" language="C++" />
     </compilers>
     <config>
   package Compiler is
      for Leading_Required_Switches ("C++") use
         Compiler'Leading_Required_Switches ("C++") &amp; ("-mno-cygwin");
   end Compiler;
     </config>
   </configuration>

   <!-- this compiler is not compatible with GNAT's default zcx runtime -->
   <configuration>
     <compilers><compiler name="^GNAT$" runtime="default" /></compilers>
     <compilers>
       <compiler name="^GCC-CYGMING$" language="C++" />
       <compiler name="^GCC-CYGMING$" language="Fortran" />
       <compiler name="^GCC-MINGW32$" language="C++" />
       <compiler name="^GCC-MINGW32$" language="Fortran" />
     </compilers>
     <config></config>
   </configuration>

   <configuration>
     <compilers>
       <compiler name="^G\+\+_Pro$" runtime="^rtp$" />
     </compilers>
     <config>
   package Compiler is
      for Leading_Required_Switches ("C++") use
        Compiler'Leading_Required_Switches ("C++") &amp; ("-mrtp");
   end Compiler;
     </config>
   </configuration>

</gprconfig>
cross.xml:8305:<?xml version="1.0" ?>
<gprconfig>
   <!--  This package provides adjustments for cross compilers -->

   <!-- AAMP executables have extension .axe -->
   <configuration>
     <targets>
       <target name="aamp" />
     </targets>
     <config>
   package Builder is
      for Executable_Suffix use ".axe";
   end Builder;
     </config>
   </configuration>

   <!-- Windows executables have extension .exe -->
   <configuration>
     <targets>
       <target name="dotnet" />
       <target name="mingw" />
     </targets>
     <config>
   package Builder is
      for Executable_Suffix use ".exe";
   end Builder;
     </config>
   </configuration>

   <!-- on some targets, executables do not have any extension -->
   <configuration>
     <targets>
       <target name="^x86_64-elf$" />
       <target name="^i686-elf$" />
       <target name="^visium-elf$" />
       <target name="^riscv(32|64)(-none|-unknown)?-elf$" />
       <target name="^m68020-elf$" />
       <target name="^powerpc-elf$" />
       <target name="^powerpc-elf-lynxos5$" />
       <target name="^.*-elf-lynxos178e$" />
       <target name="^powerpc-xcoff-lynxos178$" />
       <target name="^powerpc-eabispe$" />
       <target name="^avr$" />
       <target name="^leon-elf$" />
       <target name="^leon3-elf$" />
       <target name="^aarch64-elf$" />
       <target name="^arm(-none)?-eabi$" />
       <target name="^.*-elinos-linux$" />
       <target name="^.*-generic-linux-gnu$" />
       <target name="^.*-pikeos.*$" />
       <target name="^.*-qnx[0-9]*$" />
       <target name="^.*-rtems.*$" />
       <target name="^arm-linux-androideabi" />
       <target name="^arm-linux-gnueabi" />
       <target name="^arm-linux-gnueabihf" />
       <target name="^aarch64-linux-gnu" />
       <target name="^e500v2-gnu-linux" />
     </targets>
     <config>
   package Builder is
      for Executable_Suffix use "";
   end Builder;
     </config>
   </configuration>

   <!-- Import PIKEOS_TARGET_FILES on PikeOS targets.  -->
   <configuration>
     <targets>
       <target name="^.*-sysgo-pikeos.*$" />
     </targets>
     <config>
   Pikeos_Target_Files := external ("PIKEOS_TARGET_FILES");
     </config>
   </configuration>

   <!-- Forbid mixing cert, kernel and rtp.  -->
   <!-- Watch out: "ravenscar-cert-rtp" matches both "rtp" and "cert" -->
   <configuration>
     <compilers><compiler runtime="rtp" /></compilers>
     <compilers><compiler runtime="kernel" /></compilers>
     <config></config>
   </configuration>

   <configuration>
     <compilers><compiler runtime="cert" /></compilers>
     <compilers><compiler runtime="kernel" /></compilers>
     <config></config>
   </configuration>

   <configuration>
     <compilers><compiler runtime="cert" /></compilers>
     <compilers><compiler runtime="^rtp$" /></compilers>
     <config></config>
   </configuration>

   <configuration>
     <compilers><compiler runtime="rtp" /></compilers>
     <compilers><compiler runtime="^ravenscar-cert$" /></compilers>
     <config></config>
   </configuration>

   <!-- mlongcall is passed by default in the case of GNAT.
        Do the same thing for WRS compilers for consistency.  -->

   <configuration>
     <compilers>
       <compiler name="^GCC-WRS5$" />
     </compilers>
     <targets>
       <target name="^powerpc-wrs-vxworks.*$" />
       <target name="^e500v2-wrs-vxworks.*$" />
     </targets>
     <config>
   package Compiler is
      for Leading_Required_Switches ("C") use
        Compiler'Leading_Required_Switches ("C")
        &amp; ("-mlongcall");
   end Compiler;
     </config>
   </configuration>

   <configuration>
     <compilers>
       <compiler name="^G\+\+-WRS5$" />
     </compilers>
     <targets>
       <target name="^powerpc-wrs-vxworks.*$" />
       <target name="^e500v2-wrs-vxworks.*$" />
     </targets>
     <config>
   package Compiler is
      for Leading_Required_Switches ("C++") use
        Compiler'Leading_Required_Switches ("C++")
        &amp; ("-mlongcall");
   end Compiler;
     </config>
   </configuration>

   <configuration>
     <compilers>
       <compiler name="^GNAT$"/>
       <compiler name="^GCC$"/>
       <compiler name="^GCC-SYSGO-X86$"/>
       <compiler name="^GCC-SYSGO-PPC$"/>
       <compiler name="^G\+\+$"/>
     </compilers>
     <targets>
       <target name="^.*-sysgo-pikeos.*$" />
     </targets>
     <config>
   package Compiler is
      for Leading_Required_Switches ("C") use
        Compiler'Leading_Required_Switches ("C")
        &amp; ("-fno-builtin");
   end Compiler;

   package Linker is
      for Required_Switches use
        Linker'Required_Switches
        &amp; ("-L" &amp; Pikeos_Target_Files &amp; "/scripts",
               "-L" &amp; Pikeos_Target_Files &amp; "/lib");
   end Linker;
     </config>
   </configuration>

   <!-- require specification of run-time for VxWorks 5 using GNAT for C -->
   <configuration>
     <compilers>
       <compiler name="^GCC$" runtime="^soft-float$" />
       <compiler name="^GCC-WRS5$" runtime="^soft-float$" />
     </compilers>
     <targets>
       <target name="^.*-wrs-vxworks$" />
     </targets>
     <config>
   package Compiler is
      for Leading_Required_Switches ("C") use
        Compiler'Leading_Required_Switches ("C")
        &amp; ("-I" &amp; Wind_Base &amp; "/target/h",
               "-msoft-float");
   end Compiler;
     </config>
   </configuration>

   <!-- require specification of run-time for VxWorks 5 using GNAT for C -->
   <configuration>
     <compilers>
       <compiler name="^GCC$" runtime="^default$" />
       <compiler name="^GCC-WRS5$" />
       <compiler name="^GCC-WRS5$" runtime="^default$" />
      </compilers>
     <targets>
       <target name="^.*-wrs-vxworks$" />
     </targets>
     <config>
   package Compiler is
      for Leading_Required_Switches ("C") use
        Compiler'Leading_Required_Switches ("C")
        &amp; ("-I" &amp; Wind_Base &amp; "/target/h");
   end Compiler;
     </config>
   </configuration>

   <!--  Set prefix of gnatbind -->
   <configuration>
     <compilers>
       <compiler name="^GNAT$" />
       <compiler name="^GNAT_DOTNET$" />
       <compiler name="^JGNAT$" />
       <compiler name="^GNAT_C$" />
       <compiler name="^GNAT_CODEPEER$" />
       <compiler name="^GNAT_LLVM$" />
     </compilers>
     <config>
   package Binder is
      for Required_Switches ("Ada") use
          Binder'Required_Switches ("Ada") &amp;
          ("gnatbind_prefix=${PREFIX(ada)}");
   end Binder;
     </config>
   </configuration>

   <!--  Set prefix of gnatbind for LLVM (CCG, CUDA) targets -->
   <configuration>
     <compilers>
       <compiler name="^GNAT_CCG$" />
       <compiler name="^GNAT_CUDA$" />
     </compilers>
     <config>
   package Binder is
      for Required_Switches ("Ada") use
          Binder'Required_Switches ("Ada") &amp;
          ("gnatbind_prefix=llvm-");
   end Binder;
     </config>
   </configuration>

  <!--  Set mcmodel large for x86_64-vx7r2 for kernel-large rts -->
  <configuration>
     <compilers>
         <compiler runtime="kernel-large" />
     </compilers>
     <targets>
       <target name="^x86_64-wrs-vxworks7r2.*$" />
     </targets>
     <config>
        package Compiler is
           for Required_Switches ("Ada")  use
               Compiler'Required_Switches  ("Ada") &amp;
               ("-mcmodel=large");
           for Required_Switches ("C")  use
               Compiler'Required_Switches  ("C") &amp;
               ("-mcmodel=large");
           for Required_Switches ("C++")  use
               Compiler'Required_Switches  ("C++") &amp;
               ("-mcmodel=large");
           for Required_Switches ("Asm")  use
               Compiler'Required_Switches  ("Asm") &amp;
               ("-mcmodel=large");
           for Required_Switches ("Asm2")  use
               Compiler'Required_Switches  ("Asm2") &amp;
               ("-mcmodel=large");
           for Required_Switches ("Asm_Cpp")  use
               Compiler'Required_Switches  ("Asm_Cpp") &amp;
               ("-mcmodel=large");
        end Compiler;
        package Linker is
           for Required_Switches use
               Linker'Required_Switches &amp;
               ("-mcmodel=large");
        end Linker;
     </config>
  </configuration>

</gprconfig>
e500v2-vx6.xml:2045:<?xml version="1.0" ?>
<!DOCTYPE gprconfig [
<!ENTITY % env.ent SYSTEM "env.ent"> %env.ent;
<!ENTITY % shortcuts.ent SYSTEM "shortcuts.ent"> %shortcuts.ent;
<!ENTITY % vxworks.ent SYSTEM "vxworks.ent"> %vxworks.ent;
<!ENTITY % vx6.ent SYSTEM "vx6.ent"> %vx6.ent;

<!-- Local target-specific conditions -->

<!ENTITY this_target 'e500v2-wrs-vxworks'>
<!ENTITY this_gnu_wrs_suffix 'ppc'>

<!ENTITY if_these_c_compilers
    '<compilers>
       <compiler name="^GCC_Pro$" />
       <!--  ??? Eventually GCC_Pro will be replaced by a e500v2-vx6-specific
       definition:
       <compiler name="^E500V2-VX6-GCC-ADACORE$" />
       -->
       <compiler name="^E500V2-VX6-GCC-WRS$" />
     </compilers>'>

<!ENTITY if_these_cpp_compilers
    '<compilers>
       <compiler name="^E500V2-VX6-G\+\+-WRS$" />
     </compilers>'>

<!ENTITY if_these_wrs_compilers
    '<compilers>
       <compiler name="^E500V2-VX6-G\+\+-WRS$" />
       <compiler name="^E500V2-VX6-GCC-WRS$" />
       <compiler name="^GCC-WRS6CERTE500V2$" />
       <compiler name="^G\+\+-WRS6CERTE500V2$" />
     </compilers>'>

<!ENTITY if_these_gnu_wrs_compilers
    '<compilers>
       <compiler name="^E500V2-VX6-G\+\+-WRS$" />
       <compiler name="^E500V2-VX6-GCC-WRS$" />
       <compiler name="^GCC-WRS6CERTE500V2$" />
       <compiler name="^G\+\+-WRS6CERTE500V2$" />
     </compilers>'>

<!ENTITY this_wrs_rtp_base '0x40000000'>
<!-- For vx6cert -->

<!ENTITY this_cpu_subdir 'ppc/PPC32/e500v2common'>
]>
<gprconfig>

  &environment;

  <configuration>
     &if_this_target;

     <config>
   for Archive_Builder  use ("e500v2-wrs-vxworks-ar", "cr");
   for Archive_Builder_Append_Option use ("q");
   for Archive_Indexer  use ("e500v2-wrs-vxworks-ranlib");
   for Archive_Suffix   use ".a";
     </config>
  </configuration>

  &configurations_vxworks_gpp;
  &configurations_vx6;

  <!-- e500v2-specific part -->

  <configuration>
     &if_these_wrs_compilers;
     &if_this_target;
     <!-- vx6 and vx6cert -->

     &config_e500v2_cflags;
  </configuration>

</gprconfig>
e500v2-vx653.xml:1235:<?xml version="1.0" ?>
<!DOCTYPE gprconfig [
<!ENTITY % env.ent SYSTEM "env.ent"> %env.ent;
<!ENTITY % shortcuts.ent SYSTEM "shortcuts.ent"> %shortcuts.ent;
<!ENTITY % vxworks.ent SYSTEM "vxworks.ent"> %vxworks.ent;
<!ENTITY % vx653.ent SYSTEM "vx653.ent"> %vx653.ent;

<!-- Local target-specific conditions -->

<!ENTITY this_target 'e500v2-wrs-vxworksae'>
<!ENTITY this_gnu_wrs_suffix 'ppc'>

<!ENTITY if_these_c_compilers
    '<compilers>
       <compiler name="^GCC_Pro$" />
       <!--  ??? Eventually GCC_Pro will be replaced by a e500v2-vx6-specific
       definition:
       <compiler name="^E500V2-VX653-GCC-ADACORE$" />
       -->
       <compiler name="^GCC-WRS653-E500V2$" />
     </compilers>'>

<!ENTITY if_these_cpp_compilers
    '<compilers>
       <compiler name="^G\+\+-WRS653-E500V2$" />
     </compilers>'>

<!ENTITY if_these_wrs_compilers
    '<compilers>
       <compiler name="^G\+\+-WRS653-E500V2$" />
       <compiler name="^GCC-WRS653-E500V2$" />
     </compilers>'>

<!ENTITY if_these_gnu_wrs_compilers
    '<compilers>
       <compiler name="^G\+\+-WRS653-E500V2$" />
       <compiler name="^GCC-WRS653-E500V2$" />
     </compilers>'>
]>
<gprconfig>

  &environment;

  &configurations_vx653;

</gprconfig>
e500v2-vx7.xml:899:<?xml version="1.0" ?>
<!DOCTYPE gprconfig [
<!ENTITY % env.ent SYSTEM "env.ent"> %env.ent;
<!ENTITY % shortcuts.ent SYSTEM "shortcuts.ent"> %shortcuts.ent;
<!ENTITY % vxworks.ent SYSTEM "vxworks.ent"> %vxworks.ent;
<!ENTITY % vx7.ent SYSTEM "vx7.ent"> %vx7.ent;

<!-- Local target-specific conditions -->

<!ENTITY this_target 'e500v2-wrs-vxworks7'>

<!ENTITY if_these_c_compilers
    '<compilers>
       <compiler name="^GCC_Pro$" />
       <compiler name="^GCC-WRS7E500V2$" />
     </compilers>'>

<!ENTITY if_these_cpp_compilers
    '<compilers>
       <compiler name="^G\+\+_Pro$" />
     </compilers>'>

<!ENTITY if_these_gnu_wrs_compilers
    '<compilers>
       <compiler name="^GCC-WRS7E500V2$" />
     </compilers>'>

<!ENTITY this_wrs_rtp_base '0x80000000'>
]>
<gprconfig>

  &environment;

  &configurations_vxworks_gpp;

  &configurations_vx7;

  &configurations_gnat_ar;

</gprconfig>
e500v2-vx7r2.xml:953:<?xml version="1.0" ?>
<!DOCTYPE gprconfig [
<!ENTITY % env.ent SYSTEM "env.ent"> %env.ent;
<!ENTITY % shortcuts.ent SYSTEM "shortcuts.ent"> %shortcuts.ent;
<!ENTITY % vxworks.ent SYSTEM "vxworks.ent"> %vxworks.ent;
<!ENTITY % vx7.ent SYSTEM "vx7.ent"> %vx7.ent;

<!-- Local target-specific conditions -->

<!ENTITY this_target 'e500v2-wrs-vxworks7r2'>

<!ENTITY if_these_c_compilers
    '<compilers>
       <compiler name="^GCC_Pro$" />
       <compiler name="^GCC-WRS7R2E500V2$" />
     </compilers>'>

<!ENTITY if_these_cpp_compilers
    '<compilers>
       <compiler name="^G\+\+_Pro$" />
     </compilers>'>

<!ENTITY if_these_gnu_wrs_compilers
    '<compilers>
       <compiler name="^G\+\+-WRS7R2E500V2$" />
       <compiler name="^GCC-WRS7R2E500V2$" />
     </compilers>'>

<!ENTITY this_wrs_rtp_base '0x80000000'>
]>
<gprconfig>

  &environment;

  &configurations_vxworks_gpp;

  &configurations_vx7;

  &configurations_gnat_ar;

</gprconfig>
fallback_targets.xml:270:<?xml version="1.0" ?>

<gprconfig>
  <fallback_targets>
    <target>x86-windows</target>
    <target>x86_64-windows</target>
  </fallback_targets>

  <fallback_targets>
    <target>x86-linux</target>
    <target>x86_64-linux</target>
  </fallback_targets>
</gprconfig>
fortran.xml:2222:<?xml version="1.0" ?>
<gprconfig>
   <!--  This package provides the default standard options for a g77
         Fortran compiler -->

   <configuration>
     <compilers>
       <compiler name="^G77$" language="Fortran" />
       <compiler name="^GCC-CYGMING$" language="Fortran" />
     </compilers>
     <config>
   package Compiler is
      for Driver            ("Fortran") use "${PATH(fortran)}g77";
      for Leading_Required_Switches ("Fortran") use
         Compiler'Leading_Required_Switches ("Fortran") &amp;
         ("-c", "-fno-underscoring");
      for Include_Path      ("Fortran") use "CPATH";
   end Compiler;
     </config>
   </configuration>

   <!-- in cygminw mode, make sure that the option -mno-cygwin is used -->

   <configuration>
     <compilers>
       <compiler name="^GCC-CYGMING$" language="Fortran" />
     </compilers>
     <config>
   package Compiler is
      for Leading_Required_Switches ("Fortran") use
      Compiler'Leading_Required_Switches ("Fortran") &amp; ("-mno-cygwin");
   end Compiler;
     </config>
   </configuration>

   <!-- Configuration for GFortran: the GCC fortran 95 compiler -->

   <configuration>
     <compilers>
       <compiler name="^GFORTRAN$" language="Fortran" />
       <compiler name="^GCC-MINGW32$" language="Fortran" />
     </compilers>
     <config>
   package Compiler is
      for Driver            ("Fortran") use "${PATH(fortran)}${PREFIX(fortran)}gfortran";
      for Leading_Required_Switches ("Fortran") use
         Compiler'Leading_Required_Switches ("Fortran") &amp;
         ("-c", "-fno-underscoring");
      for Include_Path      ("Fortran") use "CPATH";
   end Compiler;
     </config>
   </configuration>

   <!--  Additional switches needed on some platforms -->

   <configuration>
     <compilers>
       <compiler name="^G77$" language="Fortran" />
     </compilers>
     <targets negate="true">
       <target name="^.*LynxOS.*$" />
       <target name="^.*pentium-mingw.*$" />
       <target name="^.*cygwin.*$" />
       <target name="^.*dec-osf.*$" />
     </targets>
     <config>
   package Compiler is
      for PIC_Option      ("Fortran") use ("-fPIC");
   end Compiler;
     </config>
   </configuration>
</gprconfig>
gnat.xml:14808:<?xml version="1.0" ?>
<!DOCTYPE gprconfig [
  <!ENTITY filter_gnat '<compilers><compiler name="^GNAT$" /><compiler name="^GNAT_DOTNET$" /><compiler name="^JGNAT$" /><compiler name="^GNAT_CODEPEER$" /><compiler name="^GNAT_C$" /><compiler name="^GNAT_CCG$" /><compiler name="^GNAT_CUDA$" /><compiler name="^GNAT_LLVM$" /></compilers>'>
] >

<gprconfig>

  <!--  GNAAMP -->
  <configuration>
   <compilers>
    <compiler name="^GNAAMP$" />
   </compilers>
   <config>
   package Compiler is
      for Driver                   ("Ada") use "gnaamp";
      for Language_Kind            ("Ada") use "unit_based";
      for Dependency_Kind          ("Ada") use "ALI_File";
      for Required_Switches        ("Ada") use
          Compiler'Required_Switches ("Ada")
             &amp; ("-gnatA");
      for Object_File_Suffix       ("Ada") use ".obj";
      for Mapping_File_Switches    ("Ada") use ("-gnatem=");
      for Mapping_Spec_Suffix      ("Ada") use "%s";
      for Mapping_Body_Suffix      ("Ada") use "%b";
      for Config_File_Switches     ("Ada") use ("-gnatec=");
      for Include_Path_File     ("Ada") use "ADA_PRJ_INCLUDE_FILE";
      for Config_Body_File_Name    ("Ada") use
           "pragma Source_File_Name_Project (%u, Body_File_Name => ""%f"");";
      for Config_Spec_File_Name    ("Ada") use
           "pragma Source_File_Name_Project (%u, Spec_File_Name => ""%f"");";
      for Config_Body_File_Name_Pattern ("Ada") use
           "pragma Source_File_Name_Project " &amp;
           "  (Body_File_Name  => ""*%b""," &amp;
           "   Casing          => %c," &amp;
           "   Dot_Replacement => ""%d"");";
      for Config_Spec_File_Name_Pattern ("Ada") use
           "pragma Source_File_Name_Project " &amp;
           "  (Spec_File_Name  => ""*%s""," &amp;
           "   Casing          => %c," &amp;
           "   Dot_Replacement => ""%d"");";
      for Config_File_Unique    ("Ada") use "False";
   end Compiler;

   package Binder is
      for Objects_Path_File     ("Ada") use "ADA_PRJ_OBJECTS_FILE";
      for Required_Switches     ("Ada") use
          Binder'Required_Switches ("Ada")  &amp;
          ("ada_binder=gnaampbind");
      for Driver         ("Ada") use
          "${GPRCONFIG_PREFIX}/libexec/gprbuild/gprbind";
   end Binder;

   for Toolchain_Version ("Ada") use "GNAT ${VERSION(ada)}";
   for Runtime_Dir       ("Ada") use "${RUNTIME_DIR(ada)}";
   </config>
  </configuration>

  <!-- GNAT -->
  <configuration>
   &filter_gnat;
   <config>
   package Compiler is
      for Driver                   ("Ada") use "${PATH(ada)}${PREFIX(ada)}gcc";
      for Language_Kind            ("Ada") use "unit_based";
      for Dependency_Kind          ("Ada") use "ALI_File";
      for Leading_Required_Switches        ("Ada") use
	  ("-c", "-x", "ada", "-gnatA")
             &amp; Compiler'Leading_Required_Switches ("Ada");
      for Mapping_File_Switches    ("Ada") use ("-gnatem=");
      for Mapping_Spec_Suffix      ("Ada") use "%s";
      for Mapping_Body_Suffix      ("Ada") use "%b";
      for Config_File_Switches     ("Ada") use ("-gnatec=");
      for Include_Path_File     ("Ada") use "ADA_PRJ_INCLUDE_FILE";
   end Compiler;

   package Binder is
      for Objects_Path_File     ("Ada") use "ADA_PRJ_OBJECTS_FILE";
      for Driver         ("Ada") use
          "${GPRCONFIG_PREFIX}libexec/gprbuild/gprbind";
   end Binder;

   for Toolchain_Version ("Ada") use "GNAT ${VERSION(ada)}";
   for Runtime_Dir       ("Ada") use "${RUNTIME_DIR(ada)}";
   </config>
  </configuration>

  <!-- CCG -->
  <configuration>
   <compilers>
    <compiler name="^GNAT_CCG$"/>
   </compilers>
   <config>
   package Compiler is
      for Driver                   ("Ada") use "${PATH(ada)}llvm-gcc";
   end Compiler;
   </config>
  </configuration>

  <!-- CUDA -->
  <configuration>
   <compilers>
    <compiler name="^GNAT_CUDA$"/>
   </compilers>
   <config>
   package Compiler is
      for Driver                   ("Ada") use "${PATH(ada)}cuda-gcc";
   end Compiler;
   </config>
  </configuration>

  <!-- DOTNET -->
  <configuration>
   <compilers>
    <compiler name="^GNAT_DOTNET$"/>
   </compilers>
   <config>
   package Compiler is
      for Object_File_Suffix       ("Ada") use ".il";
      for Driver                   ("Ada") use "${PATH(ada)}${PREFIX(ada)}gnatcompile";
   end Compiler;
   </config>
  </configuration>

  <!-- JGNAT -->
  <configuration>
   <compilers>
    <compiler name="^JGNAT$"/>
   </compilers>
   <config>
   package Compiler is
      for Object_File_Suffix       ("Ada") use ".class";
   end Compiler;
   </config>
  </configuration>

  <!-- C Target -->
  <configuration>
   <compilers>
     <compiler name="^GNAT_C$"/>
   </compilers>
   <config>
   package Compiler is
      for Object_File_Suffix        ("Ada") use ".c";
      for Leading_Required_Switches ("Ada") use
        Compiler'Leading_Required_Switches ("Ada") &amp; ("-gnatceg");
   end Compiler;
   package Clean is
      for Object_Artifact_Extensions ("Ada") use (".h");
   end Clean;
   </config>
  </configuration>

  <!-- CCG Target -->
  <configuration>
   <compilers>
     <compiler name="^GNAT_CCG$"/>
   </compilers>
   <config>
   package Compiler is
      for Object_File_Suffix        ("Ada") use ".c";
      for Leading_Required_Switches ("Ada") use
        Compiler'Leading_Required_Switches ("Ada") &amp; ("-emit-c");
   end Compiler;
   </config>
  </configuration>

  <!-- Add -G to binder switches for C/CCG targets starting with version 20 -->
  <configuration>
   <compilers>
     <compiler name="^GNAT_C$"/>
     <compiler name="^GNAT_CCG$"/>
   </compilers>
   <compilers negate="true">
     <compiler version="18" />
     <compiler version="19" />
   </compilers>
   <config>
   package Binder is
      for Required_Switches ("Ada") use
        Binder'Required_Switches ("Ada") &amp; ("-G");
   end Binder;
   </config>
  </configuration>

  <!-- Add -m32 on linux and windows 64bits hosts for C target -->
  <configuration>
   <compilers>
     <compiler name="^GNAT_C$"/>
   </compilers>
   <hosts>
     <host name="^x86_64-.*linux.*$" />
     <host name="^x86_64-.*mingw.*$" />
   </hosts>
   <config>
   package Compiler is
      for Leading_Required_Switches ("Ada") use
        Compiler'Leading_Required_Switches ("Ada") &amp; ("-m32");
   end Compiler;
   </config>
  </configuration>

  <configuration>
   &filter_gnat;
   <compilers negate="true">
     <compiler version="3.16" />
     <compiler version="5.00" />
     <compiler version="5.01" />
     <compiler version="5.02" />
   </compilers>
   <config>
   package Compiler is
      for Multi_Unit_Switches ("Ada") use ("-gnateI");
      for Multi_Unit_Object_Separator ("Ada") use "~";
      for Config_Body_File_Name ("Ada") use
           "pragma Source_File_Name_Project (%u, Body_File_Name => ""%f"");";
      for Config_Spec_File_Name ("Ada") use
           "pragma Source_File_Name_Project (%u, Spec_File_Name => ""%f"");";
      for Config_Body_File_Name_Index ("Ada") use
           "pragma Source_File_Name_Project (%u, Body_File_Name => ""%f"", Index => %i);";
      for Config_Spec_File_Name_Index ("Ada") use
           "pragma Source_File_Name_Project (%u, Spec_File_Name => ""%f"", Index => %i);";
      for Config_Body_File_Name_Pattern ("Ada") use
           "pragma Source_File_Name_Project " &amp;
           "  (Body_File_Name  => ""*%b""," &amp;
           "   Casing          => %c," &amp;
           "   Dot_Replacement => ""%d"");";
      for Config_Spec_File_Name_Pattern ("Ada") use
           "pragma Source_File_Name_Project " &amp;
           "  (Spec_File_Name  => ""*%s""," &amp;
           "   Casing          => %c," &amp;
           "   Dot_Replacement => ""%d"");";
      for Config_File_Unique    ("Ada") use "False";
   end Compiler;
   </config>
  </configuration>

  <configuration>
   &filter_gnat;
   <compilers>
     <compiler version="3.16" />
     <compiler version="5.00" />
   </compilers>
   <config>
   package Compiler is
      for Config_Body_File_Name    ("Ada") use
           "pragma Source_File_Name (%u, Body_File_Name => ""%f"");";
      for Config_Spec_File_Name    ("Ada") use
           "pragma Source_File_Name (%u, Spec_File_Name => ""%f"");";
      for Config_Body_File_Name_Pattern ("Ada") use
           "pragma Source_File_Name " &amp;
           "  (Body_File_Name  => ""*%b""," &amp;
           "   Casing          => %c," &amp;
           "   Dot_Replacement => ""%d"");";
      for Config_Spec_File_Name_Pattern ("Ada") use
           "pragma Source_File_Name " &amp;
           "  (Spec_File_Name  => ""*%s""," &amp;
           "   Casing          => %c," &amp;
           "   Dot_Replacement => ""%d"");";
      for Config_File_Unique    ("Ada") use "True";
   end Compiler;
   </config>
  </configuration>

  <configuration>
   &filter_gnat;
   <compilers>
     <compiler version="5.01" />
     <compiler version="5.02" />
   </compilers>
   <config>
   package Compiler is
      for Config_Body_File_Name    ("Ada") use
           "pragma Source_File_Name_Project (%u, Body_File_Name => ""%f"");";
      for Config_Spec_File_Name    ("Ada") use
           "pragma Source_File_Name_Project (%u, Spec_File_Name => ""%f"");";
      for Config_Body_File_Name_Pattern ("Ada") use
           "pragma Source_File_Name_Project " &amp;
           "  (Body_File_Name  => ""*%b""," &amp;
           "   Casing          => %c," &amp;
           "   Dot_Replacement => ""%d"");";
      for Config_Spec_File_Name_Pattern ("Ada") use
           "pragma Source_File_Name_Project " &amp;
           "  (Spec_File_Name  => ""*%s""," &amp;
           "   Casing          => %c," &amp;
           "   Dot_Replacement => ""%d"");";
      for Config_File_Unique    ("Ada") use "False";
   end Compiler;
   </config>
  </configuration>

  <!--  Whether -fPIC is needed -->
  <configuration>
   &filter_gnat;
   <targets negate="true">
      <target name="^.*lynxos.*$" />
      <target name="^.*mingw.*$" />
      <target name="^.*dec-osf.*$" />
      <target name="^.*vms.*$" />
      <target name="^.*dotnet.*$" />
      <target name="^.*jvm.*$" />
   </targets>
   <config>
   package Compiler is
      for PIC_Option      ("Ada") use ("-fPIC");
   end Compiler;
   </config>
  </configuration>

  <!--  Whether encapsulated library is supported -->
  <configuration>
   &filter_gnat;
   <targets>
      <target name="^.*mingw.*$" />
      <target name="^.*linux.*$" />
      <target name="^.*sunos.*$" />
      <target name="^sparc-.*solaris.*$"/>
      <target name="^i.86-.*-solaris.*$"/>
      <target name="^i.86-.*darwin.*$" />
      <target name="^powerpc-.*darwin.*$" />
      <target name="^x86_64-.*darwin.*$" />
      <target name="^.*android.*$" />
      <target name="^.*-qnx[0-9]*$" />
   </targets>
   <config>
      for Library_Encapsulated_Supported use "true";
   </config>
  </configuration>

  <!-- add switch __RTS= to the compiler and binder for GNAT, if not default -->
  <configuration>
   <compilers>
     <compiler name="^GNAT$" />
     <compiler name="^GNAT_CODEPEER$" />
     <compiler name="^GNAT_LLVM$" />
     <compiler name="^GNAT_CUDA$" />
   </compilers>
   <compilers negate="true">
     <compiler runtime="default" />
   </compilers>
   <config>
   package Compiler is
      for Leading_Required_Switches ("Ada") use
        Compiler'Leading_Required_Switches ("Ada") &amp; ("--RTS=${RUNTIME_DIR(ada)}");
   end Compiler;

   package Binder is
      for Required_Switches ("Ada") use
        Binder'Required_Switches ("Ada") &amp; ("--RTS=${RUNTIME_DIR(ada)}");
   end Binder;
   </config>
  </configuration>

  <!-- Always add switch __RTS= to the compiler and binder for GNAT CCG -->
  <configuration>
   <compilers>
     <compiler name="^GNAT_CCG$" />
   </compilers>
   <config>
   package Compiler is
      for Leading_Required_Switches ("Ada") use
        Compiler'Leading_Required_Switches ("Ada") &amp; ("--RTS=${RUNTIME_DIR(ada)}");
   end Compiler;

   package Binder is
      for Required_Switches ("Ada") use
        Binder'Required_Switches ("Ada") &amp; ("--RTS=${RUNTIME_DIR(ada)}");
   end Binder;
   </config>
  </configuration>

  <configuration>
   <compilers>
     <compiler name="^GNAT_DOTNET$" runtime="compact" />
     <compiler name="^GNAT_DOTNET$" runtime="silverlight" />
   </compilers>
   <config>
   package Compiler is
      for Leading_Required_Switches ("Ada") use
        Compiler'Leading_Required_Switches ("Ada") &amp; ("--RTS=${RUNTIME(ada)}/..");
   end Compiler;

   package Binder is
      for Required_Switches ("Ada") use
        Binder'Required_Switches ("Ada") &amp; ("--RTS=${RUNTIME(ada)}/..");
   end Binder;
   </config>
  </configuration>

  <!-- add compiler option -msoft-float when the runtime is soft-float -->
  <configuration>
   <compilers>
     <compiler name="^GNAT$" runtime="soft-float" />
   </compilers>
   <config>
   package Compiler is
      for Leading_Required_Switches ("Ada") use
        Compiler'Leading_Required_Switches ("Ada") &amp; ("-msoft-float");
   end Compiler;
   </config>
  </configuration>

  <!-- When using the (Ada) ios-simulator runtime, always compile all files
       with -mios-simulator-version-min (including non-Ada files).  -->

   <configuration>
     <compilers>
       <compiler language="Ada" runtime="ios-simulator" />
     </compilers>
     <config>
   package Compiler is
      for Leading_Required_Switches ("Ada") use
        Compiler'Leading_Required_Switches ("Ada")
        &amp; ("-mios-simulator-version-min=8.0");
      for Leading_Required_Switches ("C") use
        Compiler'Leading_Required_Switches ("C")
        &amp; ("-mios-simulator-version-min=8.0");
      for Leading_Required_Switches ("C++") use
        Compiler'Leading_Required_Switches ("C++")
        &amp; ("-mios-simulator-version-min=8.0");
      for Leading_Required_Switches ("Asm") use
        Compiler'Leading_Required_Switches ("Asm")
        &amp; ("-mios-simulator-version-min=8.0");
      for Leading_Required_Switches ("Asm2") use
        Compiler'Leading_Required_Switches ("Asm2")
        &amp; ("-mios-simulator-version-min=8.0");
      for Leading_Required_Switches ("Asm_Cpp") use
        Compiler'Leading_Required_Switches ("Asm_Cpp")
        &amp; ("-mios-simulator-version-min=8.0");
   end Compiler;
     </config>
   </configuration>

   <!-- GNAT including 7.2.2 and older does not support dependence on
        configuration pragma files -->

   <configuration>
   &filter_gnat;
   <compilers>
     <compiler language="Ada" version="^7\.[012]\.*" />
     <compiler language="Ada" version="^[3456]\.*" />
   </compilers>
   <config>
     package Compiler is
        for Config_File_Dependency_Support ("Ada") use "False";
     end Compiler;
   </config>
  </configuration>

</gprconfig>
linker.xml:51060:<?xml version="1.0" ?>
<!DOCTYPE gprconfig [
   <!ENTITY gnat_pre_6.4
     '<compiler language="Ada" version="3.16" />
      <compiler language="Ada" version="5.00" />
      <compiler language="Ada" version="5.01" />
      <compiler language="Ada" version="5.02" />
      <compiler language="Ada" version="5.03" />
      <compiler language="Ada" version="5.04" />
      <compiler language="Ada" version="6.0" />
      <compiler language="Ada" version="6.1" />
      <compiler language="Ada" version="6.2" />
      <compiler language="Ada" version="6.3" />
      <compiler language="Ada" version="6.4" />'
   >
]>

<gprconfig>

  <!--  This configuration shows how to link a multi language
        application with GNAT and either GCC or toolchains
        derived from gcc -->

  <!--  Export File / Object Lister  -->

  <configuration>
    <targets>
      <target name="^i686-pc-mingw32$" />
    </targets>
    <hosts negate="true">
      <host name="^i686-.*-mingw32$" />
      <host name="^x86_64-.*-mingw32$" />
    </hosts>
    <config>
   for Object_Lister use ("i686-pc-mingw32-nm", "-g", "--no-demangle");
   for Object_Lister_Matcher use " [TDRB] _(.*)";

   package Linker is
      for Export_File_Format use "DEF";
      for Export_File_Switch use "-Wl,";
   end Linker;
    </config>
  </configuration>

  <configuration>
    <targets>
      <target name="^x86_64-pc-mingw32$" />
    </targets>
    <hosts negate="true">
      <host name="^i686-.*-mingw32$" />
      <host name="^x86_64-.*-mingw32$" />
    </hosts>
    <config>
   for Object_Lister use ("x86_64-pc-mingw32-nm", "-g", "--no-demangle");
   for Object_Lister_Matcher use " [TDRB] (.*)";

   package Linker is
      for Export_File_Format use "GNU";
      for Export_File_Switch use "-Wl,--version-script=";
   end Linker;
    </config>
  </configuration>

  <configuration>
    <targets>
      <target name="^x86_64-w64-mingw32$" />
    </targets>
    <hosts negate="true">
      <host name="^i686-.*-mingw32$" />
      <host name="^x86_64-.*-mingw32$" />
    </hosts>
    <config>
   for Object_Lister use ("x86_64-w64-mingw32-nm", "-g", "--no-demangle");
   for Object_Lister_Matcher use " [TDRB] (.*)";

   package Linker is
      for Export_File_Format use "GNU";
      for Export_File_Switch use "-Wl,--version-script=";
   end Linker;
    </config>
  </configuration>

  <configuration>
    <targets>
      <target name="^i686-pc-mingw32$" />
    </targets>
    <hosts>
      <host name="^i686-.*-mingw32$" />
      <host name="^x86_64-.*-mingw32$" />
    </hosts>
    <config>
   for Object_Lister use ("nm", "-g", "--no-demangle");
   for Object_Lister_Matcher use " [TDRB] _(.*)";

   package Linker is
      for Export_File_Format use "DEF";
      for Export_File_Switch use "-Wl,";
   end Linker;
    </config>
  </configuration>

  <configuration>
    <targets>
      <target name="^x86_64-.*-mingw32$" />
    </targets>
    <hosts>
      <host name="^i686-.*-mingw32$" />
      <host name="^x86_64-.*-mingw32$" />
    </hosts>
    <config>
   for Object_Lister use ("nm", "-g", "--no-demangle");
   for Object_Lister_Matcher use " [TDRB] (.*)";

   package Linker is
      for Export_File_Format use "GNU";
      for Export_File_Switch use "-Wl,--version-script=";
   end Linker;
    </config>
  </configuration>

  <configuration>
    <targets>
      <target name="^i686.*-linux.*$" />
      <target name="^x86_64.*-linux.*" />
    </targets>
    <hosts>
      <host name="^x86_64.*-linux.*" />
      <host name="^i686.*-linux.*$" />
    </hosts>
    <config>
   for Object_Lister use ("nm", "-g");
   for Object_Lister_Matcher use " [TDRB] (.*)";

   package Linker is
      for Export_File_Format use "GNU";
      for Export_File_Switch use "-Wl,--version-script=";
   end Linker;
    </config>
  </configuration>

  <configuration>
    <compilers negate="true">
       <compiler language="Ada" runtime="ios-simulator" />
    </compilers>
    <targets>
       <target name="^i.86-.*darwin.*$" />
       <target name="^x86_64-.*darwin.*$" />
    </targets>
    <config>
   for Object_Lister use ("nm", "-g");
   for Object_Lister_Matcher use " [TDS] (.*)";

   package Linker is
      for Export_File_Format use "FLAT";
      for Export_File_Switch use "-Wl,-exported_symbols_list,";
   end Linker;
    </config>
  </configuration>

  <configuration>
    <targets>
      <target name="^aarch64-linux-gnu$" />
    </targets>
    <config>
   for Object_Lister use ("aarch64-linux-gnu-nm", "-g");
   for Object_Lister_Matcher use " [TDRBSG] (.*)";

   package Linker is
      for Export_File_Format use "GNU";
      for Export_File_Switch use "-Wl,--version-script=";
   end Linker;
    </config>
  </configuration>

  <configuration>
    <targets>
      <target name="^arm-linux-gnueabi$" />
    </targets>
    <config>
   for Object_Lister use ("arm-linux-gnueabi-nm", "-g");
   for Object_Lister_Matcher use " [TDSR] (.*)";

   package Linker is
      for Export_File_Format use "GNU";
      for Export_File_Switch use "-Wl,--version-script=";
   end Linker;
    </config>
  </configuration>

  <configuration>
    <targets>
      <target name="^arm-linux-gnueabihf$" />
    </targets>
    <config>
   for Object_Lister use ("arm-linux-gnueabihf-nm", "-g");
   for Object_Lister_Matcher use " [TDRBSG] (.*)";

   package Linker is
      for Export_File_Format use "GNU";
      for Export_File_Switch use "-Wl,--version-script=";
   end Linker;
    </config>
  </configuration>

  <configuration>
    <targets>
      <target name="^powerpc-.*linux.*$" />
    </targets>
    <hosts negate="true">
      <!-- Cross compiler case -->
      <host name="^(ppc|powerpc)-.*linux.*$" />
    </hosts>
    <config>
   for Object_Lister use ("powerpc-generic-linux-gnu-nm", "-g");
   for Object_Lister_Matcher use " [TDRBSG] (.*)";

   package Linker is
      for Export_File_Format use "GNU";
      for Export_File_Switch use "-Wl,--version-script=";
   end Linker;
    </config>
  </configuration>

  <configuration>
    <targets>
      <target name="^powerpc-.*linux.*$" />
    </targets>
    <hosts>
      <!-- Native compiler case -->
      <host name="^(ppc|powerpc)-.*linux.*$" />
    </hosts>
    <config>
   for Object_Lister use ("nm", "-g");
   for Object_Lister_Matcher use " [TDRBSG] (.*)";

   package Linker is
      for Export_File_Format use "GNU";
      for Export_File_Switch use "-Wl,--version-script=";
   end Linker;
    </config>
  </configuration>

  <configuration>
    <targets>
      <target name="^powerpc64-generic-linux-gnu$" />
    </targets>
    <config>
   for Object_Lister use ("powerpc64-generic-linux-gnu-nm", "-g");
   for Object_Lister_Matcher use " [TDRBSG] (.*)";

   package Linker is
      for Export_File_Format use "GNU";
      for Export_File_Switch use "-Wl,--version-script=";
   end Linker;
    </config>
  </configuration>

  <configuration>
    <targets>
      <target name="^e500v2-gnu-linux$" />
    </targets>
    <config>
   for Object_Lister use ("e500v2-gnu-linux-nm", "-g");
   for Object_Lister_Matcher use " [TDRBSG] (.*)";

   package Linker is
      for Export_File_Format use "GNU";
      for Export_File_Switch use "-Wl,--version-script=";
   end Linker;
    </config>
  </configuration>

  <configuration>
    <targets>
      <target name="^aarch64-nto-qnx$" />
    </targets>
    <config>
   for Object_Lister use ("aarch64-nto-qnx-nm", "-g");
   for Object_Lister_Matcher use " [TDRBS] (.*)";

   package Linker is
      for Export_File_Format use "GNU";
      for Export_File_Switch use "-Wl,--version-script=";
   end Linker;
    </config>
  </configuration>

  <!--  Archiver.  -->
  <configuration>
    <targets>
      <target name="^x86_64-elf$" />
    </targets>
    <config>
   for Archive_Builder  use ("x86_64-elf-ar", "cr");
   for Archive_Builder_Append_Option use ("q");
   for Archive_Indexer  use ("x86_64-elf-ranlib");
   for Archive_Suffix   use ".a";
    </config>
  </configuration>

  <configuration>
    <targets>
      <target name="^i686-elf$" />
    </targets>
    <config>
   for Archive_Builder  use ("i686-elf-ar", "cr");
   for Archive_Builder_Append_Option use ("q");
   for Archive_Indexer  use ("i686-elf-ranlib");
   for Archive_Suffix   use ".a";
    </config>
  </configuration>

  <configuration>
    <targets>
      <target name="^visium-elf$" />
    </targets>
    <config>
   for Archive_Builder  use ("visium-elf-ar", "cr");
   for Archive_Builder_Append_Option use ("q");
   for Archive_Indexer  use ("visium-elf-ranlib");
   for Archive_Suffix   use ".a";
    </config>
  </configuration>

  <!-- This is the Ada version of this rule using ${PREFIX(Ada)} -->
  <configuration>
    <compilers>
      <compiler language="Ada" />
    </compilers>
    <targets>
      <target name="^riscv(32|64)(-none|-unknown)?-elf$" />
      <target name="^arm(-none)?-eabi$" />
    </targets>
    <config>
   for Archive_Builder  use ("${PREFIX(Ada)}ar", "cr");
   for Archive_Builder_Append_Option use ("q");
   for Archive_Indexer  use ("${PREFIX(Ada)}ranlib");
   for Archive_Suffix   use ".a";
    </config>
  </configuration>

  <!-- This is the C version of this rule using ${PREFIX(C)} -->
  <configuration>
    <compilers>
      <compiler language="c" />
    </compilers>
    <targets>
      <target name="^riscv(32|64)(-none|-unknown)?-elf$" />
      <target name="^arm(-none)?-eabi$" />
    </targets>
    <config>
   for Archive_Builder  use ("${PREFIX(c)}ar", "cr");
   for Archive_Builder_Append_Option use ("q");
   for Archive_Indexer  use ("${PREFIX(c)}ranlib");
   for Archive_Suffix   use ".a";
    </config>
  </configuration>

  <!-- This is the C++ version of this rule using ${PREFIX(c++)} -->
  <configuration>
    <compilers>
      <compiler language="c++" />
    </compilers>
    <targets>
      <target name="^riscv(32|64)(-none|-unknown)?-elf$" />
      <target name="^arm(-none)?-eabi$" />
    </targets>
    <config>
   for Archive_Builder  use ("${PREFIX(c++)}ar", "cr");
   for Archive_Builder_Append_Option use ("q");
   for Archive_Indexer  use ("${PREFIX(c++)}ranlib");
   for Archive_Suffix   use ".a";
    </config>
  </configuration>

  <configuration>
    <targets>
      <target name="^m68020-elf$" />
    </targets>
    <config>
   for Archive_Builder  use ("m68020-elf-ar", "cr");
   for Archive_Builder_Append_Option use ("q");
   for Archive_Indexer  use ("m68020-elf-ranlib");
   for Archive_Suffix   use ".a";
    </config>
  </configuration>

  <configuration>
    <targets>
      <target name="^powerpc-elf$" />
    </targets>
    <config>
   for Archive_Builder  use ("powerpc-elf-ar", "cr");
   for Archive_Builder_Append_Option use ("q");
   for Archive_Indexer  use ("powerpc-elf-ranlib");
   for Archive_Suffix   use ".a";
    </config>
  </configuration>

  <configuration>
    <targets>
      <target name="^powerpc-elf-lynxos$" />
    </targets>
    <config>
   for Archive_Builder  use ("ar", "crs");
   for Archive_Builder_Append_Option use ("q");
   for Archive_Suffix   use ".a";
    </config>
  </configuration>

  <configuration>
    <targets>
      <target name="^powerpc-xcoff-lynxos178$" />
    </targets>
    <config>
   for Archive_Builder  use ("powerpc-xcoff-lynxos178-ar", "cr");
   for Archive_Builder_Append_Option use ("q");
   for Archive_Indexer  use ("powerpc-xcoff-lynxos178-ranlib");
   for Archive_Suffix   use ".a";
    </config>
  </configuration>

  <configuration>
    <targets>
      <target name="^powerpc-eabispe$" />
    </targets>
    <config>
   for Archive_Builder  use ("powerpc-eabispe-ar", "cr");
   for Archive_Builder_Append_Option use ("q");
   for Archive_Indexer  use ("powerpc-eabispe-ranlib");
   for Archive_Suffix   use ".a";
    </config>
  </configuration>

  <configuration>
    <targets>
      <target name="^i686-pc-mingw32$" />
    </targets>
    <hosts negate="true">
      <host name="^i686-.*-mingw32$" />
      <host name="^x86_64-.*-mingw32$" />
    </hosts>
    <config>
   for Archive_Builder  use ("i686-pc-mingw32-ar", "cr");
   for Archive_Builder_Append_Option use ("q");
   for Archive_Indexer  use ("i686-pc-mingw32-ranlib");
   for Archive_Suffix   use ".a";
    </config>
  </configuration>

  <configuration>
    <targets>
      <target name="^i686-pc-mingw32$" />
    </targets>
    <hosts>
      <host name="^i686-.*-mingw32$" />
      <host name="^x86_64-.*-mingw32$" />
    </hosts>
    <config>
   for Archive_Builder  use ("ar", "cr");
   for Archive_Builder_Append_Option use ("q");
   for Archive_Indexer  use ("ranlib");
   for Archive_Suffix   use ".a";
    </config>
  </configuration>

  <configuration>
    <targets>
      <target name="^x86_64-pc-mingw32$" />
    </targets>
    <hosts negate="true">
      <host name="^i686-.*-mingw32$" />
      <host name="^x86_64-.*-mingw32$" />
    </hosts>
    <config>
   for Archive_Builder  use ("x86_64-pc-mingw32-ar", "cr");
   for Archive_Builder_Append_Option use ("q");
   for Archive_Indexer  use ("x86_64-pc-mingw32-ranlib");
   for Archive_Suffix   use ".a";
    </config>
  </configuration>

  <configuration>
    <targets>
      <target name="^x86_64-w64-mingw32$" />
    </targets>
    <hosts negate="true">
      <host name="^i686-.*-mingw32$" />
      <host name="^x86_64-.*-mingw32$" />
    </hosts>
    <config>
   for Archive_Builder  use ("x86_64-w64-mingw32-ar", "cr");
   for Archive_Builder_Append_Option use ("q");
   for Archive_Indexer  use ("x86_64-w64-mingw32-ranlib");
   for Archive_Suffix   use ".a";
    </config>
  </configuration>

  <configuration>
    <targets>
      <target name="^x86_64-.*-mingw32$" />
    </targets>
    <hosts>
      <host name="^i686-.*-mingw32$" />
      <host name="^x86_64-.*-mingw32$" />
    </hosts>
    <config>
   for Archive_Builder  use ("ar", "cr");
   for Archive_Builder_Append_Option use ("q");
   for Archive_Indexer  use ("ranlib");
   for Archive_Suffix   use ".a";
    </config>
  </configuration>

  <configuration>
    <targets>
      <target name="^powerpc-generic-linux-gnu$" />
    </targets>
    <hosts negate="true">
      <!-- Cross compiler case -->
      <host name="^(ppc|powerpc)-.*linux.*$" />
    </hosts>
    <config>
   for Archive_Builder  use ("powerpc-generic-linux-gnu-ar", "cr");
   for Archive_Builder_Append_Option use ("q");
   for Archive_Indexer  use ("powerpc-generic-linux-gnu-ranlib");
   for Archive_Suffix   use ".a";
    </config>
  </configuration>

  <configuration>
    <targets>
      <target name="^powerpc-generic-linux-gnu$" />
    </targets>
    <hosts>
      <!-- Native compiler case -->
      <host name="^(ppc|powerpc)-.*linux.*$" />
    </hosts>
    <config>
   for Archive_Builder  use ("ar", "cr");
   for Archive_Builder_Append_Option use ("q");
   for Archive_Indexer  use ("ranlib");
   for Archive_Suffix   use ".a";
    </config>
  </configuration>

  <configuration>
    <targets>
      <target name="^powerpc64-generic-linux-gnu$" />
    </targets>
    <config>
   for Archive_Builder  use ("powerpc64-generic-linux-gnu-ar", "cr");
   for Archive_Builder_Append_Option use ("q");
   for Archive_Indexer  use ("powerpc64-generic-linux-gnu-ranlib");
   for Archive_Suffix   use ".a";
    </config>
  </configuration>

  <configuration>
    <targets>
      <target name="^arm-linux-androideabi$" />
    </targets>
    <config>
   for Archive_Builder  use ("arm-linux-androideabi-ar", "cr");
   for Archive_Builder_Append_Option use ("q");
   for Archive_Indexer  use ("arm-linux-androideabi-ranlib");
   for Archive_Suffix   use ".a";
    </config>
  </configuration>

  <configuration>
    <targets>
      <target name="^arm-linux-gnueabi$" />
    </targets>
    <config>
   for Archive_Builder  use ("arm-linux-gnueabi-ar", "cr");
   for Archive_Builder_Append_Option use ("q");
   for Archive_Indexer  use ("arm-linux-gnueabi-ranlib");
   for Archive_Suffix   use ".a";
    </config>
  </configuration>

  <configuration>
    <targets>
      <target name="^arm-linux-gnueabihf$" />
    </targets>
    <config>
   for Archive_Builder  use ("arm-linux-gnueabihf-ar", "cr");
   for Archive_Builder_Append_Option use ("q");
   for Archive_Indexer  use ("arm-linux-gnueabihf-ranlib");
   for Archive_Suffix   use ".a";
    </config>
  </configuration>

  <configuration>
    <targets>
      <target name="^aarch64-linux-gnu$" />
    </targets>
    <config>
   for Archive_Builder  use ("aarch64-linux-gnu-ar", "cr");
   for Archive_Builder_Append_Option use ("q");
   for Archive_Indexer  use ("aarch64-linux-gnu-ranlib");
   for Archive_Suffix   use ".a";
    </config>
  </configuration>

  <configuration>
    <targets>
      <target name="^aarch64-nto-qnx$" />
    </targets>
    <config>
   for Archive_Builder  use ("aarch64-nto-qnx-ar", "cr");
   for Archive_Builder_Append_Option use ("q");
   for Archive_Indexer  use ("aarch64-nto-qnx-ranlib");
   for Archive_Suffix   use ".a";
    </config>
  </configuration>

  <configuration>
    <targets>
      <target name="^aarch64-rtems.*$"/>
    </targets>
    <config>
   for Archive_Builder  use ("aarch64-rtems6-gcc-ar", "cr");
   for Archive_Builder_Append_Option use ("q");
   for Archive_Indexer  use ("aarch64-rtems6-gcc-ranlib");
   for Archive_Suffix   use ".a";
    </config>
  </configuration>

  <configuration>
    <targets>
      <target name="^e500v2-gnu-linux$" />
    </targets>
    <config>
   for Archive_Builder  use ("e500v2-gnu-linux-ar", "cr");
   for Archive_Builder_Append_Option use ("q");
   for Archive_Indexer  use ("e500v2-gnu-linux-ranlib");
   for Archive_Suffix   use ".a";
    </config>
  </configuration>

  <configuration>
    <targets>
      <target name="^erc32-elf$" />
    </targets>
    <config>
   for Archive_Builder  use ("erc32-elf-ar", "cr");
   for Archive_Builder_Append_Option use ("q");
   for Archive_Indexer  use ("erc32-elf-ranlib");
   for Archive_Suffix   use ".a";
    </config>
  </configuration>

  <configuration>
    <targets>
      <target name="^leon-elf$" />
    </targets>
    <config>
   for Archive_Builder  use ("leon-elf-ar", "cr");
   for Archive_Builder_Append_Option use ("q");
   for Archive_Indexer  use ("leon-elf-ranlib");
   for Archive_Suffix   use ".a";
    </config>
  </configuration>

  <configuration>
    <targets>
      <target name="^leon3-elf$" />
    </targets>
    <config>
   for Archive_Builder  use ("leon3-elf-ar", "cr");
   for Archive_Builder_Append_Option use ("q");
   for Archive_Indexer  use ("leon3-elf-ranlib");
   for Archive_Suffix   use ".a";
    </config>
  </configuration>

  <configuration>
    <targets>
      <target name="^aarch64-elf$" />
    </targets>
    <config>
   for Archive_Builder  use ("aarch64-elf-ar", "cr");
   for Archive_Builder_Append_Option use ("q");
   for Archive_Indexer  use ("aarch64-elf-ranlib");
   for Archive_Suffix   use ".a";
    </config>
  </configuration>

  <configuration>
    <targets>
      <target name="^avr$" />
    </targets>
    <config>
   for Archive_Builder  use ("avr-ar", "cr");
   for Archive_Builder_Append_Option use ("q");
   for Archive_Indexer  use ("avr-ranlib");
   for Archive_Suffix   use ".a";
    </config>
  </configuration>

  <configuration>
    <targets>
      <target name="^aarch64-sysgo-pikeos5$" />
    </targets>
    <config>
   for Archive_Builder  use ("aarch64-sysgo-pikeos5-ar", "cr");
   for Archive_Builder_Append_Option use ("q");
   for Archive_Indexer  use ("aarch64-sysgo-pikeos5-ranlib");
   for Archive_Suffix   use ".a";
    </config>
  </configuration>

  <configuration>
    <targets>
      <target name="^arm-sysgo-pikeos$" />
    </targets>
    <config>
   for Archive_Builder  use ("arm-sysgo-pikeos-ar", "cr");
   for Archive_Builder_Append_Option use ("q");
   for Archive_Indexer  use ("arm-sysgo-pikeos-ranlib");
   for Archive_Suffix   use ".a";
    </config>
  </configuration>

  <configuration>
    <targets>
      <target name="^arm-sysgo-pikeos4$" />
    </targets>
    <config>
   for Archive_Builder  use ("arm-sysgo-pikeos4-ar", "cr");
   for Archive_Builder_Append_Option use ("q");
   for Archive_Indexer  use ("arm-sysgo-pikeos4-ranlib");
   for Archive_Suffix   use ".a";
    </config>
  </configuration>

  <configuration>
    <targets>
      <target name="^arm-sysgo-pikeos5$" />
    </targets>
    <config>
   for Archive_Builder  use ("arm-sysgo-pikeos5-ar", "cr");
   for Archive_Builder_Append_Option use ("q");
   for Archive_Indexer  use ("arm-sysgo-pikeos5-ranlib");
   for Archive_Suffix   use ".a";
    </config>
  </configuration>

  <configuration>
    <targets>
      <target name="^i586-sysgo-pikeos$" />
    </targets>
    <config>
   for Archive_Builder  use ("i586-sysgo-pikeos-ar", "cr");
   for Archive_Builder_Append_Option use ("q");
   for Archive_Indexer  use ("i586-sysgo-pikeos-ranlib");
   for Archive_Suffix   use ".a";
    </config>
  </configuration>

  <configuration>
    <targets>
      <target name="^powerpc-sysgo-pikeos$" />
    </targets>
    <config>
   for Archive_Builder  use ("powerpc-sysgo-pikeos-ar", "cr");
   for Archive_Builder_Append_Option use ("q");
   for Archive_Indexer  use ("powerpc-sysgo-pikeos-ranlib");
   for Archive_Suffix   use ".a";
    </config>
  </configuration>

  <configuration>
    <targets>
      <target name="^powerpc-sysgo-pikeos5$" />
    </targets>
    <config>
   for Archive_Builder  use ("powerpc-sysgo-pikeos5-ar", "cr");
   for Archive_Builder_Append_Option use ("q");
   for Archive_Indexer  use ("powerpc-sysgo-pikeos5-ranlib");
   for Archive_Suffix   use ".a";
    </config>
  </configuration>

  <!-- Do not run ranlib on AIX -->
  <configuration>
    <targets>
      <target name="^.*aix.*$" />
    </targets>
    <config>
   for Archive_Builder  use ("ar", "cr");
   for Archive_Builder_Append_Option use ("q");
   for Archive_Suffix   use ".a";

   package Linker is
      for Max_Command_Line_Length use "15000";
      for Response_File_Format    use "object_list";
      for Response_File_Switches  use ("-Wl,-f,");
      for Map_File_Option         use "-Wl,-Map,";
   end Linker;
    </config>
  </configuration>

  <!-- Do not run ranlib on IA64 HPUX -->
  <configuration>
    <targets>
      <target name=".*ia64.*hpux.*" />
    </targets>
    <config>
   for Archive_Builder  use ("ar", "cr");
   for Archive_Builder_Append_Option use ("q");
   for Archive_Suffix   use ".a";
    </config>
  </configuration>

  <!-- Provide a dummy Archive_Builder and no ranlib when generating C -->
  <configuration>
    <targets>
      <target name="^c$" />
    </targets>
    <config>
   for Archive_Builder  use ("c-gcc");
    </config>
  </configuration>

  <configuration>
    <targets negate="true">
      <target name="^x86_64-elf$"/>
      <target name="^i686-elf$"/>
      <target name="^.*-wrs-vxworks.*$" />
      <target name="^visium-elf$"/>
      <target name="^riscv(32|64)(-none|-unknown)?-elf$" />
      <target name="^m68020-elf$"/>
      <target name="^powerpc-elf$"/>
      <target name="^powerpc-elf-lynxos$" />
      <target name="^powerpc-xcoff-lynxos178$" />
      <target name="^powerpc-eabispe$"/>
      <target name="^avr$"/>
      <target name="^erc32-elf$"/>
      <target name="^leon-elf$"/>
      <target name="^leon3-elf$"/>
      <target name="^arm(-none)?-eabi$"/>
      <target name="^aarch64-elf$"/>
      <target name="^.*aix.*$" />
      <target name="^.*ia64.*hpux.*$" />
      <target name="^.*pc-mingw32$" />
      <target name="^.*-pikeos.*$" />
      <target name="^.*-linux.*" />
      <target name="^.*-gnueabihf$" />
      <target name="^.*-gnueabi$" />
      <target name="^c$" />
      <target name="^.*-qnx[0-9]*$"/>
      <target name="^.*-rtems.*$"/>
    </targets>
    <config>
   for Archive_Builder  use ("ar", "cr");
   for Archive_Builder_Append_Option use ("q");
   for Archive_Indexer  use ("ranlib");
   for Archive_Suffix   use ".a";
    </config>
  </configuration>

  <!-- Do not use the native ar on cross linuxes.
       ??? This will be simplified when switching to the new scheme for
       cross linuxes; then we'll have a simple way to check if a toolchain
       is native or cross.  -->

  <configuration>
    <targets>
      <target name="^i.86-.*linux.*" />
      <target name="^x86_64-.*linux.*" />
    </targets>
    <hosts>
      <host name="^i.86-.*linux.*" />
      <host name="^x86_64-.*linux.*" />
    </hosts>
    <config>
   for Archive_Builder  use ("ar", "cr");
   for Archive_Builder_Append_Option use ("q");
   for Archive_Indexer  use ("ranlib");
   for Archive_Suffix   use ".a";
    </config>
  </configuration>

  <!-- powerpc-elf-lynxos178e, after the previous one
       to overwrite the attributes -->
  <configuration>
    <targets>
      <target name="^powerpc-elf-lynxos178e$" />
    </targets>
    <config>
   for Archive_Builder  use ("powerpc-elf-lynxos178e-ar", "cr");
   for Archive_Builder_Append_Option use ("q");
   for Archive_Indexer  use ("powerpc-elf-lynxos178e-ranlib");
   for Archive_Suffix   use ".a";
    </config>
  </configuration>

  <configuration>
    <targets>
      <target name="^i586-elf-lynxos178e$" />
    </targets>
    <config>
   for Archive_Builder  use ("i586-elf-lynxos178e-ar", "cr");
   for Archive_Builder_Append_Option use ("q");
   for Archive_Indexer  use ("i586-elf-lynxos178e-ranlib");
   for Archive_Suffix   use ".a";
    </config>
  </configuration>

<!--  Systems with no support for shared libraries, but with static libraries -->
  <configuration>
    <targets>
       <target name="^.*aix.*$" />
       <target name="^.*lynxos.*$" />
       <target name="^x86_64-elf$" />
       <target name="^i686-elf$" />
       <target name="^visium-elf$" />
       <target name="^riscv(32|64)(-none|-unknown)?-elf$" />
       <target name="^m68020-elf$" />
       <target name="^powerpc-elf$" />
       <target name="^powerpc-eabispe$" />
       <target name="^erc32-elf$" />
       <target name="^leon-elf$" />
       <target name="^leon3-elf$" />
       <target name="^aarch64-apple-darwin.*$" />
       <target name="^aarch64-elf$" />
       <target name="^arm(-none)?-eabi$" />
       <target name="^arm-apple-darwin.*$" />
       <target name="^(arm|aarch64|powerpc|i586)-wrs-vxworks.*$" />
       <target name="^avr$" />
       <target name="^.*-pikeos.*$" />
       <target name="^c$" />
       <target name="^llvm$" />
       <target name="^cuda$" />
       <target name="^.*-rtems.*$"/>
    </targets>
    <config>
   for Library_Support  use "static_only";
   for Library_Builder  use "${GPRCONFIG_PREFIX}libexec/gprbuild/gprlib";
    </config>
  </configuration>

  <!-- GNAAMP -->
  <configuration>
    <targets>
       <target name="aamp" />
    </targets>
    <config>
   for Library_Support use "none";

   package Linker is
      for Driver use "aa_link";
   end Linker;
    </config>
  </configuration>

  <!-- DOTNET -->
  <configuration>
    <targets>
       <target name="dotnet" />
    </targets>
    <config>
   for Library_Support use "none";

   package Linker is
      for Driver use "dotnet-ld";
   end Linker;
    </config>
  </configuration>

  <!-- JGNAT -->
  <configuration>
    <targets>
       <target name="jvm" />
    </targets>
    <config>
   for Library_Support use "none";
    </config>
  </configuration>

  <!-- Symbolic links supported everywhere except on mingw and VMS -->

  <configuration>
    <hosts negate="true">
      <host name="^.*mingw.*$" />
      <host name="^.*vms.*$" />
    </hosts>
    <config>
   for Symbolic_Link_Supported use "true";
   for Library_Major_Minor_Id_Supported use "true";
    </config>
  </configuration>

  <configuration>
    <hosts>
      <host name="^.*mingw.*$" />
      <host name="^.*vms.*$" />
    </hosts>
    <config>
   for Symbolic_Link_Supported use "false";
   for Library_Major_Minor_Id_Supported use "false";
    </config>
  </configuration>

  <!--  Darwin (MacOS): not applicable to iOS  -->
  <configuration>
    <compilers negate="true">
       <compiler runtime="ios-simulator" />
    </compilers>
    <targets>
       <target name="^i.86-.*darwin.*$" />
       <target name="^powerpc-.*darwin.*$" />
       <target name="^x86_64-.*darwin.*$" />
    </targets>
    <config>
   for Library_Builder use "${GPRCONFIG_PREFIX}libexec/gprbuild/gprlib";
   for Library_Support use "full";
   for Shared_Library_Prefix use "lib";

   for Run_Path_Option  use ("-Wl,-rpath,");
   for Separate_Run_Path_Options use "true";
   for Run_Path_Origin use "@executable_path";
   for Library_Install_Name_Option use "-Wl,-install_name,@rpath";

   for Shared_Library_Suffix use ".dylib";
   for Library_Auto_Init_Supported use "true";
   for Archive_Indexer use project'Archive_Indexer &amp; ("-c");
   for Shared_Library_Minimum_Switches use
         ("-dynamiclib", "-shared-libgcc");
   for Library_Encapsulated_Options use ("-shared", "-static-libgcc");

   package Linker is
      for Map_File_Option         use "-Wl,-map,";
      for Max_Command_Line_Length use "128000";
      for Response_File_Format    use "object_list";
      for Response_File_Switches  use ("-Wl,-filelist,");
   end Linker;
    </config>
  </configuration>

  <configuration>
    <compilers>
        <compiler name="^G\+\+$" language="C++" />
    </compilers>
    <targets>
       <target name="^i.86-.*darwin.*$" />
       <target name="^powerpc-.*darwin.*$" />
       <target name="^x86_64-.*darwin.*$" />
    </targets>
    <config>
    for Library_Rpath_Options ("C++") use ("-print-file-name=libstdc++.dylib");
    </config>
  </configuration>

  <!--  HPUX -->
  <configuration>
    <targets>
       <target name="^.*hpux.*$" />
    </targets>
    <config>
   for Library_Builder  use "${GPRCONFIG_PREFIX}libexec/gprbuild/gprlib";
   for Library_Support  use "full";
   for Shared_Library_Prefix use "lib";
   for Shared_Library_Minimum_Switches use ("-shared", "-fPIC");
   for Library_Version_Switches use ("-Wl,-soname,");

   for Shared_Library_Suffix use ".sl";
   for Library_Auto_Init_Supported use "true";
   for Run_Path_Option  use ("-Wl,+b,");
   for Library_Partial_Linker use ("gcc", "-nostdlib", "-Wl,-r", "-o");

   package Linker is
      for Max_Command_Line_Length use "5000";
      for Response_File_Format    use "object_list";
      for Response_File_Switches  use ("-Wl,-c,");
   end Linker;
    </config>
  </configuration>

  <!-- On IA64 HPUX, the shared library suffix is .so,
       and the ld switch for internal names in +h -->
   <configuration>
    <targets>
       <target name=".*ia64.*hpux.*" />
    </targets>
    <config>
   for Shared_Library_Suffix use ".so";
   for Library_Version_Switches use ("-Wl,+h,");
    </config>
  </configuration>

  <!-- linux, freebsd, Irix, QNX -->
  <configuration>
    <targets>
       <target name="^.*linux.*$" />
       <target name="^.*freebsd.*$" />
       <target name="^.*irix.*$" />
       <target name="^.*qnx[0-9]*$" />
    </targets>
    <config>
   for Library_Builder  use "${GPRCONFIG_PREFIX}libexec/gprbuild/gprlib";
   for Library_Support  use "full";
   for Shared_Library_Prefix use "lib";
   for Shared_Library_Minimum_Switches use ("-shared");
   for Library_Version_Switches use ("-Wl,-soname,");

   for Shared_Library_Suffix use ".so";
   for Library_Auto_Init_Supported use "true";
    </config>
  </configuration>

  <!-- VxWorks7r2 -->
  <configuration>
    <targets>
       <target name="^powerpc64-wrs-vxworks7r2" />
       <target name="^x86_64-wrs-vxworks7r2" />
    </targets>
    <config>
   for Library_Builder  use "${GPRCONFIG_PREFIX}libexec/gprbuild/gprlib";
   for Library_Support  use "full";
   for Shared_Library_Prefix use "lib";
   for Shared_Library_Minimum_Switches use ("-shared", "-mrtp");
   for Library_Version_Switches use ("-Wl,-soname,");

   for Shared_Library_Suffix use ".so";
   for Library_Auto_Init_Supported use "true";
    </config>
  </configuration>

  <!-- linux, freebsd, QNX -->
  <configuration>
    <targets>
       <target name="^.*linux.*$" />
       <target name="^.*qnx[0-9]*$" />
       <target name="^.*freebsd.*$" />
    </targets>
    <config>
   for Run_Path_Option  use ("-Wl,-z,origin,-rpath,");
   for Run_Path_Origin use "$$ORIGIN";
   for Library_Encapsulated_Options use ("-shared", "-static-libgcc");

   package Linker is
      for Map_File_Option         use "-Wl,-Map,";
   end Linker;
    </config>
  </configuration>

  <!-- Cross linux, QNX: add rpath-link to the runtime -->
  <configuration>
    <compilers>
       <compiler language="Ada" />
    </compilers>
     <targets>
       <target name="^.*-linux.*$" />
       <target name="^.*-qnx[0-9]*"/>
     </targets>
    <config>
     GCC_Prefix := "${PREFIX(ada)}";
     case GCC_Prefix is
        when "" =>
           null;
        when others =>
           package Linker is
              for Required_Switches use
                Linker'Required_Switches
                &amp; ("-Wl,-rpath-link,${RUNTIME_DIR(ada)}/adalib");
           end Linker;
     end case;
    </config>
  </configuration>

  <!-- Settings for Library_Partial_Linker -->

  <!-- The partial linking option (-r) conflicts with -pie. Recent GNU/Linux
       distributions tune GCC to automatically pass -pie, so we need to pass
       -no-pie for partial linking. GNAT started supporting -no-pie flag only
       for the 17.1 release: leave -r alone for earlier versions and hope for
       the best. -->
  <configuration>
    <compilers>
       <compiler name="^GNAT$" />
       <compiler name="GCC" />
    </compilers>
    <compilers>
      <compiler version="^3\." />
      <compiler version="^5\." />
      <compiler version="^6\." />
      <compiler version="^7\." />
    </compilers>
    <config>
        GCC_No_Pie := ();
    </config>
  </configuration>
  <configuration>
    <compilers>
       <compiler name="^GNAT$" />
       <compiler name="GCC" />
    </compilers>
    <compilers negate="true">
      <compiler version="^3\." />
      <compiler version="^5\." />
      <compiler version="^6\." />
      <compiler version="^7\." />
    </compilers>
    <config>
        GCC_No_Pie := ("-no-pie");
    </config>
  </configuration>

  <configuration>
    <compilers>
       <compiler name="^GNAT$" />
    </compilers>
    <targets>
       <target name="linux" except="androideabi" />
       <target name="^.*qnx[0-9]*$" />
       <target name="darwin" />
       <target name="mingw" />
    </targets>
    <config>
   for Library_Partial_Linker use
     ("${PATH(ada)}${PREFIX(ada)}gcc", "-nostdlib")
      &amp; GCC_No_Pie
      &amp; ("-Wl,-r", "-o");
    </config>
  </configuration>

  <configuration>
    <compilers negate="true">
       <compiler name="^GNAT$" />
    </compilers>
    <compilers>
       <compiler name="GCC" language="c"/>
    </compilers>
    <targets>
       <target name="linux" except="androideabi" />
       <target name="^.*qnx[0-9]*$" />
       <target name="darwin" />
       <target name="mingw" />
    </targets>
    <config>
   for Library_Partial_Linker use
     ("${PATH(c)}${PREFIX(c)}gcc", "-nostdlib")
      &amp; GCC_No_Pie
      &amp; ("-Wl,-r", "-o");
    </config>
  </configuration>

  <!-- Settings for Library_Rpath_Options -->
  <configuration>
    <compilers>
        <compiler name="^G\+\+$" language="C++" />
    </compilers>
    <targets>
       <target name="^.*linux.*$" />
    </targets>
    <config>
    for Library_Rpath_Options ("C++") use ("-print-file-name=libstdc++.so");
    </config>
  </configuration>

  <!-- irix -->
  <configuration>
    <targets>
       <target name="^.*irix.*$" />
    </targets>
    <config>
   for Run_Path_Option  use ("-Wl,-rpath,");

   package Linker is
      for Max_Command_Line_Length use "5000";
      for Response_File_Format    use "object_list";
      for Response_File_Switches  use ("-Wl,-objectlist,");
   end Linker;
    </config>
  </configuration>

  <!--  Solaris -->
  <configuration>
    <targets>
       <target name="^.*sunos.*$" />
       <target name="^.*solaris.*$"/>
    </targets>
    <config>
   for Library_Builder  use "${GPRCONFIG_PREFIX}libexec/gprbuild/gprlib";
   for Library_Support  use "full";
   for Shared_Library_Prefix use "lib";
   for Shared_Library_Minimum_Switches use ("-shared");

   for Library_Version_Switches use ("-Wl,-h,");

   for Shared_Library_Suffix use ".so";
   for Library_Auto_Init_Supported use "true";
   for Library_Encapsulated_Options use
      ("-shared", "-static-libgcc", "-mimpure-text");
   for Run_Path_Option  use ("-Wl,-z,origin,-R,");
   for Run_Path_Origin use "$$ORIGIN";
   for Library_Partial_Linker use ("gcc", "-nostdlib", "-Wl,-r", "-o");
    </config>
  </configuration>

  <configuration>
    <compilers>
        <compiler name="^G\+\+$" language="C++" />
    </compilers>
    <targets>
       <target name="^.*sunos.*$" />
       <target name="^.*solaris.*$" />
    </targets>
    <config>
    for Library_Rpath_Options ("C++") use ("-print-file-name=libstdc++.so");
    </config>
  </configuration>

  <!--  Windows -->
  <configuration>
    <targets>
      <target name="^.*mingw.*$" />
    </targets>
    <config>
   for Library_Builder  use "${GPRCONFIG_PREFIX}libexec/gprbuild/gprlib";
   for Library_Support  use "full";
   for Shared_Library_Prefix use "lib";
   for Shared_Library_Minimum_Switches use ("-shared", "-shared-libgcc");
   for Library_Version_Switches use ("-Wl,-soname,");
   for Shared_Library_Suffix use ".dll";
   for Library_Encapsulated_Options use ("-shared", "-static-libgcc");
   for Library_Auto_Init_Supported use "true";

   package Linker is
      for Map_File_Option         use "-Wl,-Map,";
   end Linker;
    </config>
  </configuration>

  <!-- Tru64-->
  <configuration>
    <targets>
       <target name="^.*osf.*$" />
    </targets>
    <config>
   for Library_Builder  use "${GPRCONFIG_PREFIX}libexec/gprbuild/gprlib";
   for Library_Support  use "full";
   for Shared_Library_Prefix use "lib";
   for Shared_Library_Minimum_Switches use
      ("-shared", "-Wl,-expect_unresolved,*");
   for Library_Version_Switches use ("-Wl,-soname,");

   for Shared_Library_Suffix use ".so";
   for Library_Auto_Init_Supported use "true";
   for Run_Path_Option  use ("-Wl,-rpath,");

   package Linker is
      for Max_Command_Line_Length use "10000";
      for Response_File_Format    use "object_list";
      for Response_File_Switches  use ("-Wl,-input,");
   end Linker;
    </config>
  </configuration>

  <!--  Cygming -->
  <configuration>
    <compilers><compiler name="^GCC-CYGMING$"/></compilers>
    <config>
   package Linker is
       for Required_Switches use ("-mno-cygwin");
   end Linker;
    </config>
  </configuration>

  <!-- CodePeer -->

  <configuration>
    <targets>
       <target name="codepeer" />
    </targets>
    <config>
   for Library_Support use "full";
   for Library_Builder use "${GPRCONFIG_PREFIX}libexec/gprbuild/gprlib";
    </config>
  </configuration>

  <!--  use C++, Fortran, Ada or C driver to link in this order -->

  <configuration>
    <compilers>
       <compiler language="C++" />
    </compilers>
    <targets negate="true">
      <target name="^.*-wrs-vxworks.*$" />
      <target name="^.*-wrs-linux.*$" />
    </targets>
    <config>
   package Linker is
      for Driver use Compiler'Driver ("C++");
   end Linker;
    </config>
  </configuration>

  <configuration>
    <compilers>
       <compiler language="C++" />
    </compilers>
    <targets>
      <target name="^.*linux.*$" />
      <target name="^.*sunos.*$" />
      <target name="^.*solaris.*$" />
      <target name="^.*mingw.*$" />
    </targets>
    <config>
     package Linker is
        for Required_Switches use Linker'Required_Switches &amp; ("-shared-libgcc");
     end Linker;
    </config>
  </configuration>

  <configuration>
    <compilers negate="true">
       <compiler language="C++" />
    </compilers>
    <compilers>
       <compiler language="Fortran" />
    </compilers>
    <config>
   package Linker is
      for Driver use Compiler'Driver ("Fortran");
   end Linker;
    </config>
  </configuration>

  <configuration>
    <compilers negate="true">
       <compiler language="C++" />
       <compiler language="Fortran" />
    </compilers>
    <compilers>
       <compiler language="Ada" />
    </compilers>
    <targets negate="true">
       <target name="aamp" />
       <target name="dotnet" />
       <target name="jvm" />
       <target name="^.*-sysgo-pikeos.*$" />
       <target name="^.*-wrs-vxworks.*$" />
    </targets>
    <config>
   package Linker is
      for Driver use Compiler'Driver ("Ada");
   end Linker;
    </config>
  </configuration>

  <!-- For PikeOS use C drivers as default for linking,
       to use SYSGO's libgcc -->
  <configuration>
    <compilers>
       <compiler language="C" />
    </compilers>
    <targets>
      <target name="^.*-sysgo-pikeos.*$" />
    </targets>
    <config>
   package Linker is
      for Driver use Compiler'Driver ("C");
   end Linker;
    </config>
  </configuration>

  <configuration>
    <compilers negate="true">
       <compiler language="C" />
    </compilers>
    <compilers>
       <compiler language="Ada" />
    </compilers>
    <targets>
      <target name="^.*-sysgo-pikeos.*$" />
    </targets>
    <config>
   package Linker is
      for Driver use Compiler'Driver ("Ada");
   end Linker;
    </config>
  </configuration>

  <configuration>
    <compilers negate="true">
       <compiler language="C++" />
       <compiler language="Fortran" />
       <compiler language="Ada" />
    </compilers>
    <compilers>
       <compiler language="C" />
    </compilers>
    <targets negate="true">
      <target name="^.*-wrs-vxworks.*$" />
    </targets>
    <config>
   package Linker is
      for Driver use Compiler'Driver ("C");
   end Linker;
    </config>
  </configuration>

  <!-- cross targets that use GNU ld -->
  <configuration>
    <targets>
       <target name="^.*-vxworks.*$" />
       <target name="^.*-lynxos.*$" />
       <target name="^.*-pikeos.*$" />
       <target name="^.*-elf$" />
       <target name="^.*-eabispe$" />
       <target name="^.*-eabi$" />
       <target name="^avr$" />
    </targets>
    <config>
     package Linker is
        for Map_File_Option use "-Wl,-Map,";
     end Linker;
    </config>
  </configuration>

  <configuration>
    <compilers negate="true">
       <compiler language="C++" />
       <compiler language="Fortran" />
       <compiler language="Ada" />
    </compilers>
    <compilers>
       <compiler name="^GCC-WRS7ARM$" runtime="rtp"/>
       <compiler name="^GCC-WRS7E500V2$" runtime="rtp"/>
       <compiler name="^GCC-WRS7PPC$" runtime="rtp"/>
       <compiler name="^GCC-WRS7X86$" runtime="rtp"/>
       <compiler name="^GCC-WRS7X86_64$" runtime="rtp"/>
    </compilers>
    <config>
     package Linker is
        for Required_Switches use
          Linker'Required_Switches
          &amp; ("-mrtp", "-L" &amp; VSB_Dir &amp; "/usr/lib/common");
     end Linker;
    </config>
  </configuration>

  <!-- On x86_64 vxWorks, when Linker'Driver is WRS gcc, -m64,
       -mcmodel=large and -mno-red-zone have to be specified
       explicitely. When Linker'Driver is GNAT, this is the default
       already, so it is harmless to pass it twice.  -->

  <configuration>
    <compilers>
       <compiler name="^GCC-WRS7X86_64$"/>
    </compilers>
    <config>
   package Linker is
        for Required_Switches use
          Linker'Required_Switches
          &amp; ("-m64", "-mcmodel=large", "-mno-red-zone");
   end Linker;
    </config>
  </configuration>

  <!--  Define the right response file mechanism for linking
        when possible use both the GCC @response file (available starting with
        GNAT Pro 6) and the GNU linker mechanism. The latter can be used with
        all cross since they rely on GNU ld and some of the major natives.
        Max_Command_Line could be made different for different hosts but we
        use the smallest value of all the hosts instead for uniformity.
  -->

   <configuration>
    <compilers negate="true">
       <compiler language="C++" />
       <compiler language="Fortran" />
    </compilers>
    <compilers>
       <compiler language="Ada" />
    </compilers>
    <compilers negate="true">
      <compiler version="3.16" />
      <compiler version="5.00" />
      <compiler version="5.01" />
      <compiler version="5.02" />
      <compiler version="5.03" />
      <compiler version="5.04" />
    </compilers>
     <targets>
       <target name="^.*-wrs-vxworks.*$" />
       <target name="^.*-elf-lynx.*$" />
       <target name="^x86_64-elf$" />
       <target name="^i686-elf$" />
       <target name="^visium-elf$" />
       <target name="^riscv(32|64)(-none|-unknown)?-elf$" />
       <target name="^m68020-elf$" />
       <target name="^powerpc-elf$" />
       <target name="^powerpc-eabispe$" />
       <target name="^erc32-elf$" />
       <target name="^leon-elf$" />
       <target name="^leon3-elf$" />
       <target name="^aarch64-elf$" />
       <target name="^arm(-none)?-eabi$" />
       <target name="^arm-elf$" />
       <target name="^avr$" />
       <target name="^.*wrs-vxworks.*$" />
       <target name="^powerpc-xcoff-lynxos178$" />
       <target name="^.*-elinos-linux$" />
       <target name="^.*-generic-linux-gnu$" />
       <target name="^.*-wrs-linux$" />
       <target name="^.*-pikeos.*$" />
       <target name="^.*mingw.*$" />
       <target name="^.*linux.*$" />
       <target name="^.*freebsd.*$" />
       <target name="^.*-qnx[0-9]*"/>
     </targets>
    <config>
   package Linker is
      for Response_File_Format use "GCC_GNU";
      for Max_Command_Line_Length use "8192";
   end Linker;
    </config>
  </configuration>

   <configuration>
    <compilers negate="true">
       <compiler language="C++" />
       <compiler language="Fortran" />
    </compilers>
    <compilers>
       <compiler language="Ada" />
    </compilers>
    <compilers>
      <compiler version="3.16" />
      <compiler version="5.00" />
      <compiler version="5.01" />
      <compiler version="5.02" />
      <compiler version="5.03" />
      <compiler version="5.04" />
    </compilers>
     <targets>
       <target name="^.*wrs-vxworks.*$" />
       <target name="^.*-elf-lynx.*$" />
       <target name="^x86_64-elf$" />
       <target name="^i686-elf$" />
       <target name="^visium-elf$" />
       <target name="^riscv(32|64)(-none|-unknown)?-elf$" />
       <target name="^m68020-elf$" />
       <target name="^powerpc-elf$" />
       <target name="^powerpc-eabispe$" />
       <target name="^erc32-elf$" />
       <target name="^leon-elf$" />
       <target name="^leon3-elf$" />
       <target name="^arm(-none)?-eabi$" />
       <target name="^arm-elf$" />
       <target name="^avr$" />
       <target name="^.*-elinos-linux$" />
       <target name="^.*-generic-linux-gnu$" />
       <target name="^.*-wrs-linux$" />
       <target name="^.*mingw.*$" />
       <target name="^.*linux.*$" />
       <target name="^.*freebsd.*$" />
     </targets>
    <config>
   package Linker is
      for Response_File_Format use "GNU";
      for Max_Command_Line_Length use "8192";
   end Linker;
    </config>
  </configuration>

   <configuration>
    <compilers>
       <compiler language="C++" />
    </compilers>
     <targets>
       <target name="^.*wrs-vxworks.*$" />
       <target name="^.*-elf-lynx.*$" />
       <target name="^x86_64-elf$" />
       <target name="^i686-elf$" />
       <target name="^visium-elf$" />
       <target name="^riscv(32|64)(-none|-unknown)?-elf$" />
       <target name="^m68020-elf$" />
       <target name="^powerpc-elf$" />
       <target name="^powerpc-eabispe$" />
       <target name="^erc32-elf$" />
       <target name="^leon-elf$" />
       <target name="^leon3-elf$" />
       <target name="^aarch64-elf$" />
       <target name="^arm(-none)?-eabi$" />
       <target name="^arm-elf$" />
       <target name="^avr$" />
       <target name="^.*-elinos-linux$" />
       <target name="^.*-generic-linux-gnu$" />
       <target name="^.*-wrs-linux$" />
       <target name="^.*mingw.*$" />
       <target name="^.*linux.*$" />
       <target name="^.*freebsd.*$" />
     </targets>
    <config>
   package Linker is
      for Response_File_Format use "GNU";
      for Max_Command_Line_Length use "8192";
   end Linker;
    </config>
  </configuration>

  <configuration>
    <compilers negate="true">
       <compiler language="C++" />
       <compiler language="Fortran" />
    </compilers>
    <compilers>
       <compiler language="Ada" />
    </compilers>
    <compilers negate="true">
      <compiler version="3.16" />
      <compiler version="5.00" />
      <compiler version="5.01" />
      <compiler version="5.02" />
      <compiler version="5.03" />
      <compiler version="5.04" />
    </compilers>
    <targets>
      <target name="^.*aix.*$" />
      <target name="^.*hpux.*$" />
      <target name="^.*irix.*$" />
      <target name="^.*osf.*$" />
    </targets>
    <config>
   package Linker is
      for Response_File_Format use "GCC_Object_List";
   end Linker;
    </config>
  </configuration>

 <!-- Default language is Ada, C, Fortran, C++ in that order -->

  <configuration>
    <compilers>
       <compiler language="Ada" />
    </compilers>
    <config>
   for Default_Language use "Ada";
    </config>
  </configuration>

  <configuration>
    <compilers negate="true">
       <compiler language="Ada" />
    </compilers>
    <compilers>
       <compiler language="C" />
    </compilers>
    <config>
   for Default_Language use "C";
    </config>
  </configuration>

  <configuration>
    <compilers negate="true">
       <compiler language="C" />
       <compiler language="Ada" />
    </compilers>
    <compilers>
       <compiler language="Fortran" /></compilers>
    <config>
   for Default_Language use "Fortran";
    </config>
  </configuration>

  <configuration>
    <compilers negate="true">
       <compiler language="C" />
       <compiler language="Fortran" />
       <compiler language="Ada" />
    </compilers>
    <compilers>
       <compiler language="C++" />
    </compilers>
    <config>
   for Default_Language use "C++";
    </config>
  </configuration>

  <!-- When using the (Ada) ios-simulator runtime, some additional
       arguments are needed to complete the link.  -->

   <configuration>
     <compilers>
       <compiler runtime="ios-simulator" />
     </compilers>
     <config>
   for Library_Support  use "static_only";
   for Library_Builder  use "${GPRCONFIG_PREFIX}libexec/gprbuild/gprlib";
   for Library_Partial_Linker use ("${PATH(ada)}${PREFIX(ada)}gcc",
                                   "-mios-simulator-version-min=8.0",
                                   "-nostdlib", "-Wl,-r", "-o");
   package Linker is
      for Required_Switches use Linker'Required_Switches
        &amp; ("-mios-simulator-version-min=8.0",
               "-nostartfiles",
               "-Wl,-syslibroot,/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk");
   end Linker;
     </config>
   </configuration>

</gprconfig>
nocompiler.xml:915:<?xml version="1.0" ?>
<!--  For languages with no compiler -->

<gprconfig>
  <configuration>
   <compilers>
    <compiler language="Project File"/>
   </compilers>
   <config>
package Compiler is
   for Driver ("Project File") use "";
end Compiler;

package Naming is
   for Spec_Suffix ("Project File") use ".gpr";
end Naming;
   </config>
  </configuration>

  <configuration>
   <compilers>
    <compiler language="Simulink"/>
   </compilers>
   <config>
package Compiler is
   for Driver ("Simulink") use "";
end Compiler;

package Naming is
   for Spec_Suffix ("Simulink") use ".mdl";
end Naming;
   </config>
  </configuration>

  <configuration>
   <compilers>
    <compiler language="Matlab"/>
   </compilers>
   <config>
package Compiler is
   for Driver ("Matlab") use "";
end Compiler;

package Naming is
   for Spec_Suffix ("Matlab") use ".m";
end Naming;
   </config>
  </configuration>
</gprconfig>
ppc-vx6.xml:1175:<?xml version="1.0" ?>
<!DOCTYPE gprconfig [
<!ENTITY % env.ent SYSTEM "env.ent"> %env.ent;
<!ENTITY % shortcuts.ent SYSTEM "shortcuts.ent"> %shortcuts.ent;
<!ENTITY % vxworks.ent SYSTEM "vxworks.ent"> %vxworks.ent;
<!ENTITY % vx6.ent SYSTEM "vx6.ent"> %vx6.ent;

<!-- Local target-specific conditions -->

<!ENTITY this_target 'powerpc-wrs-vxworks'>
<!ENTITY this_gnu_wrs_suffix 'ppc'>

<!ENTITY if_these_c_compilers
    '<compilers>
       <compiler name="^GCC_Pro$" />
       <compiler name="^GCC-WRS6$" />
       <compiler name="^GCC-WRS6CERT$" />
     </compilers>'>

<!ENTITY if_these_cpp_compilers
    '<compilers>
       <compiler name="^G\+\+-WRS6$" />
       <compiler name="^G\+\+-WRS6CERT$" />
     </compilers>'>

<!ENTITY if_these_gnu_wrs_compilers
    '<compilers>
       <compiler name="^GCC-WRS6$" />
       <compiler name="^G\+\+-WRS6$" />
       <compiler name="^GCC-WRS6CERT$" />
       <compiler name="^G\+\+-WRS6CERT$" />
     </compilers>'>

<!ENTITY this_wrs_rtp_base '0x40000000'>
<!-- For vx6cert -->

<!ENTITY this_cpu_subdir 'ppc/PPC32/common'>
]>
<gprconfig>

  &environment;

  &configurations_vxworks_gpp;

  &configurations_vx6;

</gprconfig>
ppc-vx653.xml:1215:<?xml version="1.0" ?>
<!DOCTYPE gprconfig [
<!ENTITY % env.ent SYSTEM "env.ent"> %env.ent;
<!ENTITY % shortcuts.ent SYSTEM "shortcuts.ent"> %shortcuts.ent;
<!ENTITY % vxworks.ent SYSTEM "vxworks.ent"> %vxworks.ent;
<!ENTITY % vx653.ent SYSTEM "vx653.ent"> %vx653.ent;

<!-- Local target-specific conditions -->

<!ENTITY this_target 'powerpc-wrs-vxworksae'>
<!ENTITY this_gnu_wrs_suffix 'ppc'>

<!ENTITY if_these_c_compilers
    '<compilers>
       <compiler name="^GCC_Pro$" />
       <!--  ??? Eventually GCC_Pro will be replaced by a e500v2-vx6-specific
       definition:
       <compiler name="^PPC-VX653-GCC-ADACORE$" />
       -->
       <compiler name="^GCC-WRS653-PPC$" />
     </compilers>'>

<!ENTITY if_these_cpp_compilers
    '<compilers>
       <compiler name="^G\+\+-WRS653-PPC$" />
     </compilers>'>

<!ENTITY if_these_wrs_compilers
    '<compilers>
       <compiler name="^G\+\+-WRS653-PPC$" />
       <compiler name="^GCC-WRS653-PPC$" />
     </compilers>'>

<!ENTITY if_these_gnu_wrs_compilers
    '<compilers>
       <compiler name="^G\+\+-WRS653-PPC$" />
       <compiler name="^GCC-WRS653-PPC$" />
     </compilers>'>
]>
<gprconfig>

  &environment;

  &configurations_vx653;

</gprconfig>
ppc-vx7.xml:894:<?xml version="1.0" ?>
<!DOCTYPE gprconfig [
<!ENTITY % env.ent SYSTEM "env.ent"> %env.ent;
<!ENTITY % shortcuts.ent SYSTEM "shortcuts.ent"> %shortcuts.ent;
<!ENTITY % vxworks.ent SYSTEM "vxworks.ent"> %vxworks.ent;
<!ENTITY % vx7.ent SYSTEM "vx7.ent"> %vx7.ent;

<!-- Local target-specific conditions -->

<!ENTITY this_target 'powerpc-wrs-vxworks7'>

<!ENTITY if_these_c_compilers
    '<compilers>
       <compiler name="^GCC_Pro$" />
       <compiler name="^GCC-WRS7PPC$" />
     </compilers>'>

<!ENTITY if_these_cpp_compilers
    '<compilers>
       <compiler name="^G\+\+_Pro$" />
     </compilers>'>

<!ENTITY if_these_gnu_wrs_compilers
    '<compilers>
       <compiler name="^GCC-WRS7PPC$" />
     </compilers>'>

<!ENTITY this_wrs_rtp_base '0x80000000'>
]>
<gprconfig>

  &environment;

  &configurations_vxworks_gpp;

  &configurations_vx7;

  &configurations_gnat_ar;

</gprconfig>
ppc-vx7r2.xml:945:<?xml version="1.0" ?>
<!DOCTYPE gprconfig [
<!ENTITY % env.ent SYSTEM "env.ent"> %env.ent;
<!ENTITY % shortcuts.ent SYSTEM "shortcuts.ent"> %shortcuts.ent;
<!ENTITY % vxworks.ent SYSTEM "vxworks.ent"> %vxworks.ent;
<!ENTITY % vx7.ent SYSTEM "vx7.ent"> %vx7.ent;

<!-- Local target-specific conditions -->

<!ENTITY this_target 'powerpc-wrs-vxworks7r2'>

<!ENTITY if_these_c_compilers
    '<compilers>
       <compiler name="^GCC_Pro$" />
       <compiler name="^GCC-WRS7R2PPC$" />
     </compilers>'>

<!ENTITY if_these_cpp_compilers
    '<compilers>
       <compiler name="^G\+\+_Pro$" />
     </compilers>'>

<!ENTITY if_these_gnu_wrs_compilers
    '<compilers>
       <compiler name="^G\+\+-WRS7R2PPC$" />
       <compiler name="^GCC-WRS7R2PPC$" />
     </compilers>'>

<!ENTITY this_wrs_rtp_base '0x80000000'>
]>
<gprconfig>

  &environment;

  &configurations_vxworks_gpp;

  &configurations_vx7;

  &configurations_gnat_ar;

</gprconfig>
ppc64-vx7.xml:1123:<?xml version="1.0" ?>
<!DOCTYPE gprconfig [
<!ENTITY % env.ent SYSTEM "env.ent"> %env.ent;
<!ENTITY % shortcuts.ent SYSTEM "shortcuts.ent"> %shortcuts.ent;
<!ENTITY % vxworks.ent SYSTEM "vxworks.ent"> %vxworks.ent;
<!ENTITY % vx7.ent SYSTEM "vx7.ent"> %vx7.ent;

<!-- Local target-specific conditions -->

<!ENTITY this_target 'powerpc64-wrs-vxworks7'>

<!ENTITY if_these_c_compilers
    '<compilers>
       <compiler name="^GCC_Pro$" />
       <compiler name="^DIABC-PPC64$" />
     </compilers>'>

<!ENTITY if_these_cpp_compilers
    '<compilers>
       <compiler name="^G\+\+_Pro$" />
     </compilers>'>

<!ENTITY if_these_gnu_wrs_compilers
    '<compilers>
       <!--  No GNU WRS compilers are defined in compilers-ppc64-vx7.xml,
             so this will never match. So this is here for consistency
             only, and to allow a refactoring of the macro later on.
       -->
       <compiler name="^GCC-WRS7PPC64$" />
     </compilers>'>

<!ENTITY this_wrs_rtp_base '0x40000000'>
]>
<gprconfig>

  &environment;

  &configurations_vxworks_gpp;

  &configurations_vx7;

  &configurations_gnat_ar;

</gprconfig>
ppc64-vx7r2.xml:1178:<?xml version="1.0" ?>
<!DOCTYPE gprconfig [
<!ENTITY % env.ent SYSTEM "env.ent"> %env.ent;
<!ENTITY % shortcuts.ent SYSTEM "shortcuts.ent"> %shortcuts.ent;
<!ENTITY % vxworks.ent SYSTEM "vxworks.ent"> %vxworks.ent;
<!ENTITY % vx7.ent SYSTEM "vx7.ent"> %vx7.ent;

<!-- Local target-specific conditions -->

<!ENTITY this_target 'powerpc64-wrs-vxworks7r2'>

<!ENTITY if_these_c_compilers
    '<compilers>
       <compiler name="^GCC_Pro$" />
       <compiler name="^GCC-WRS7R2PPC64$" />
     </compilers>'>

<!ENTITY if_these_cpp_compilers
    '<compilers>
       <compiler name="^G\+\+_Pro$" />
     </compilers>'>

<!ENTITY if_these_gnu_wrs_compilers
    '<compilers>
       <!--  No GNU WRS compilers are defined in compilers-ppc64-vx7.xml,
             so this will never match. So this is here for consistency
             only, and to allow a refactoring of the macro later on.
       -->
       <compiler name="^G\+\+-WRS7R2PPC64$" />
       <compiler name="^GCC-WRS7R2PPC64$" />
     </compilers>'>

<!ENTITY this_wrs_rtp_base '0x40000000'>
]>
<gprconfig>

  &environment;

  &configurations_vxworks_gpp;

  &configurations_vx7;

  &configurations_gnat_ar;

</gprconfig>
targetset.xml:16280:<?xml version="1.0" ?>

<gprconfig>

<!-- Add elinos ports *before* native ports to
     be matched before native compiler -->
 <!-- x86-elinos-.* -->
  <targetset canonical="x86-elinos">
    <target>x86-elinos</target>
    <target>x86-elinos-linux</target>
    <target>i686-elinos-linux</target>
  </targetset>

  <!-- ppc-elinos-.* -->
  <targetset canonical="ppc-elinos">
    <target>ppc-elinos</target>
    <target>ppc-elinos-linux</target>
    <target>powerpc-elinos-linux</target>
  </targetset>


<!-- Add wrs-linux ports *before* native ports to
     be matched before native compiler -->
  <targetset canonical="e500v2-wrslinux">
    <target>e500v2-wrslinux</target>
    <target>e500v2-wrs-linux</target>
    <target>e500v2-wrs-linux</target>
  </targetset>

  <targetset canonical="ppc-wrslinux">
    <target>ppc-wrslinux</target>
    <target>ppc-wrs-linux</target>
    <target>powerpc-wrs-linux</target>
  </targetset>

<!-- Add plain linux ports *before* native ports to
     be matched before native compiler -->
  <targetset canonical="aarch64-linux">
    <target>aarch64-linux</target>
    <target>aarch64-linux-gnu</target>
  </targetset>

  <targetset canonical="arm-linux">
    <target>arm-linux</target>
    <target>arm-linux-gnueabi</target>
  </targetset>

  <targetset canonical="armhf-linux">
    <target>armhf-linux</target>
    <target>arm-linux-gnueabihf</target>
  </targetset>

  <targetset canonical="e500v2-linux">
    <target>e500v2-linux</target>
    <target>e500v2-gnu-linux</target>
  </targetset>

  <targetset canonical="ppc-linux">
    <target>ppc-linux</target>
    <target>powerpc-generic-linux-gnu</target>
  </targetset>

  <targetset canonical="ppc64-linux">
    <target>ppc64-linux</target>
    <target>powerpc64-generic-linux-gnu</target>
  </targetset>

<!-- Native ports -->
<!-- ************ -->

  <!-- x86-linux -->
  <targetset canonical="x86-linux">
    <target>x86-linux</target>
    <target>x86_32-linux</target>
    <target>i.86-.*linux.*</target>
  </targetset>

  <!-- x86_64-linux -->
  <targetset canonical="x86_64-linux">
    <target>x86_64-linux</target>
    <target>x86_64-.*linux.*</target>
  </targetset>

  <!-- ia64-.*-linux -->
  <targetset canonical="ia64-linux">
    <target>ia64-linux</target>
    <target>ia64-hp_linux</target>
    <target>ia64-sgi_linux</target>
    <target>ia64-.*linux.*</target>
  </targetset>

  <!-- sparc-solaris -->
  <targetset canonical="sparc-solaris">
    <target>sparc-solaris</target>
    <target>sparc-.*solaris.*</target>
  </targetset>

  <!-- sparc64-solaris -->
  <targetset canonical="sparc64-solaris">
    <target>sparc64-solaris</target>
    <target>sparc64-.*solaris.*</target>
  </targetset>

  <!-- x86-solaris -->
  <targetset canonical="x86-solaris">
    <target>x86-solaris</target>
    <target>i.86-(pc-)?solaris.*</target>
  </targetset>

  <!-- x86-windows (mingw) -->
  <targetset canonical="x86-windows">
    <!--  known targets: pentium-mingw32msv, i686-pc-mingw32 -->
    <target>x86-windows</target>
    <target>x86_32-windows</target>
    <target>mingw32</target>
    <target>i.86-.*mingw32.*</target>
    <target>pentium-.*mingw32.*</target>
  </targetset>

  <!-- x86_64-windows (mingw) -->
  <targetset canonical="x86_64-windows">
    <!--  known targets: x86_64-pc-mingw32 -->
    <target>x86_64-windows</target>
    <target>x86_64-.*mingw32.*</target>
  </targetset>

  <!-- aarch64-darwin (iOS 64bit) -->
  <targetset canonical="aarch64-darwin">
    <target>aarch64-ios</target>
    <target>aarch64-darwin</target>
    <target>aarch64.*-darwin.*</target>
  </targetset>

  <!-- arm-darwin (iOS) -->
  <targetset canonical="arm-darwin">
    <target>arm-ios</target>
    <target>arm-darwin</target>
    <target>arm.*-darwin.*</target>
  </targetset>

  <!-- ppc-darwin -->
  <targetset canonical="ppc-darwin">
    <target>ppc-darwin</target>
    <target>powerpc.*darwin.*</target>
  </targetset>

  <!-- x86-darwin -->
  <targetset canonical="x86-darwin">
    <target>x86-darwin</target>
    <target>x86_32-darwin</target>
    <target>i.86-.*-darwin.*</target>
  </targetset>

  <!-- x86_64-darwin -->
  <targetset canonical="x86_64-darwin">
    <target>x86_64-darwin</target>
    <target>x86_64-.*-darwin.*</target>
  </targetset>

  <!-- pa-hpux -->
  <targetset canonical="pa-hpux">
    <target>pa-hpux</target>
    <target>hppa.*-hpux.*</target>
  </targetset>

  <!-- ia64-hpux -->
  <targetset canonical="ia64-hpux">
    <target>ia64-hpux</target>
    <target>ia64-.*hpux.*</target>
  </targetset>

  <!-- alpha-tru64 -->
  <targetset canonical="alpha-tru64">
    <target>alpha-tru64</target>
    <target>alpha.*osf.*</target>
  </targetset>

  <!-- alpha-openvms -->
  <targetset canonical="alpha-openvms">
    <target>alpha-openvms</target>
    <target>alpha64-dec-openvms.*</target>
  </targetset>

  <!-- mips-irix -->
  <targetset canonical="mips-irix">
    <target>mips-irix</target>
    <target>mips-.*irix.*</target>
  </targetset>

  <!-- ppc-aix -->
  <targetset canonical="ppc-aix">
    <target>ppc-aix</target>
    <target>powerpc.*-aix.*</target>
  </targetset>

  <!-- ppc-linux -->
  <targetset canonical="ppc-linux">
    <target>ppc-linux</target>
    <target>powerpc-.*-linux.*</target>
  </targetset>

  <!-- x86-lynx -->
  <targetset canonical="x86-lynx">
    <target>x86-lynx</target>
    <target>i.86-.*-lynxos</target>
  </targetset>

<!-- Additional Natives -->
<!-- ******************* -->

  <!-- x86-windows cygwin -->
  <targetset canonical="x86-cygwin">
    <target>i.*-cygwin.*</target>
    <target>pent.*-cygwin.*</target>
  </targetset>

  <!-- x86 Freebsd -->
  <targetset canonical="x86-freebsd">
    <target>x86-freebsd</target>
    <target>x86_32-freebsd</target>
    <target>i.86-.*freebsd.*</target>
  </targetset>

  <!-- x86_64 Freebsd -->
  <targetset canonical="x86_64-freebsd">
    <target>x86_64-freebsd</target>
    <target>x86_64-.*freebsd.*</target>
    <target>amd64-.*freebsd.*</target>
  </targetset>

<!-- Cross Ports -->
<!-- *********** -->

  <!-- aamp -->
  <targetset canonical="aamp">
    <target>aamp</target>
    <target>.*aamp.*</target>
  </targetset>

  <!-- ppc-lynx178elf -->
  <targetset canonical="ppc-lynx178elf">
    <target>ppc-lynx178elf</target>
    <target>powerpc-elf-lynxos178e</target>
  </targetset>

  <!-- ppc-lynx5-.* -->
  <targetset canonical="ppc-lynx5">
    <target>ppc-lynx5</target>
    <target>ppc-lynx5.*</target>
    <target>powerpc-elf-lynxos5.*</target>
  </targetset>

  <!-- ppc-lynx-.* -->
  <targetset canonical="ppc-lynx">
    <target>ppc-lynx</target>
    <target>ppc-lynx-solaris</target>
    <target>ppc-lynx-.*</target>
    <target>powerpc-elf-lynxos.*</target>
  </targetset>

  <!-- ppc-xcoff-lynxos178-.* -->
  <targetset canonical="ppc-lynx178">
    <target>ppc-lynx178</target>
    <target>ppc-xcoff-lynxos</target>
    <target>ppc-xcoff-lynxos178.*</target>
    <target>powerpc-xcoff-lynxos178.*</target>
  </targetset>

  <!-- x86-lynx178elf -->
  <targetset canonical="x86-lynx178elf">
    <target>x86-lynx178elf</target>
    <target>i586-elf-lynxos178e</target>
  </targetset>

  <!-- x86-lynx5-.* -->
  <targetset canonical="x86-lynx5">
    <target>x86-lynx5</target>
    <target>x86-lynx5.*</target>
    <target>i386-elf-lynxos5.*</target>
  </targetset>

  <!-- arm-vx7 (vxworks 7) -->
  <targetset canonical="arm-vx7">
    <target>arm-vx7</target>
    <target>arm-wrs-vxworks7</target>
  </targetset>

  <!-- arm-vx7r2 (vxworks 7.2) -->
  <targetset canonical="arm-vx7r2">
    <target>arm-vx7r2</target>
    <!-- vx7r2cert platforms use the same target triplet as
         the corresponding vx7r2 (non-cert) platform.
         Add them to the same targetset as well (see TB12-012). -->
    <target>arm-vx7r2cert</target>
    <target>arm-wrs-vxworks7r2</target>
  </targetset>

  <!-- e500v2-vx7 (vxworks 7) -->
  <targetset canonical="e500v2-vx7">
    <target>e500v2-vx7</target>
    <target>e500v2-wrs-vxworks7</target>
  </targetset>

  <!-- e500v2-vx7 (vxworks 7) -->
  <targetset canonical="e500v2-vx7r2">
    <target>e500v2-vx7r2</target>
    <!-- vx7r2cert platforms use the same target triplet as
         the corresponding vx7r2 (non-cert) platform.
         Add them to the same targetset as well (see TB12-012). -->
    <target>e500v2-vx7r2cert</target>
    <target>e500v2-wrs-vxworks7r2</target>
  </targetset>

  <!-- ppc-vx7 (vxworks 7) -->
  <targetset canonical="ppc-vx7">
    <target>ppc-vx7</target>
    <target>powerpc-wrs-vxworks7</target>
  </targetset>

  <!-- ppc-vx7r2 (vxworks 7.2) -->
  <targetset canonical="ppc-vx7r2">
    <target>ppc-vx7r2</target>
    <!-- vx7r2cert platforms use the same target triplet as
         the corresponding vx7r2 (non-cert) platform.
         Add them to the same targetset as well (see TB12-012). -->
    <target>ppc-vx7r2cert</target>
    <target>powerpc-wrs-vxworks7r2</target>
  </targetset>

  <!-- ppc64-vx7 (vxworks 7) -->
  <targetset canonical="ppc64-vx7">
    <target>ppc64-vx7</target>
    <target>powerpc64-wrs-vxworks7</target>
  </targetset>

  <!-- ppc64-vx7r2 (vxworks 7.2) -->
  <targetset canonical="ppc64-vx7r2">
    <target>ppc64-vx7r2</target>
    <!-- vx7r2cert platforms use the same target triplet as
         the corresponding vx7r2 (non-cert) platform.
         Add them to the same targetset as well (see TB12-012). -->
    <target>ppc64-vx7r2cert</target>
    <target>powerpc64-wrs-vxworks7r2</target>
  </targetset>

  <!-- x86-vx7-.* (vxworks 7) -->
  <targetset canonical="x86-vx7">
    <target>x86-vx7</target>
    <target>x86-wrs-vxworks7</target>
    <target>i.86-wrs-vxworks7</target>
  </targetset>

  <!-- x86-vx7r2-.* (vxworks 7.2) -->
  <targetset canonical="x86-vx7r2">
    <target>x86-vx7r2</target>
    <!-- vx7r2cert platforms use the same target triplet as
         the corresponding vx7r2 (non-cert) platform.
         Add them to the same targetset as well (see TB12-012). -->
    <target>x86-vx7r2cert</target>
    <target>x86-wrs-vxworks7r2</target>
    <target>i.86-wrs-vxworks7r2</target>
  </targetset>

  <!-- x86_64-vx7 (vxworks 7) -->
  <targetset canonical="x86_64-vx7">
    <target>x86_64-wrs-vxworks7</target>
    <target>x86_64-vx7</target>
  </targetset>

  <!-- x86_64-vx7r2 (vxworks 7.2) -->
  <targetset canonical="x86_64-vx7r2">
    <target>x86_64-vx7r2</target>
    <!-- vx7r2cert platforms use the same target triplet as
         the corresponding vx7r2 (non-cert) platform.
         Add them to the same targetset as well (see TB12-012). -->
    <target>x86_64-vx7r2cert</target>
    <target>x86_64-wrs-vxworks7r2</target>
  </targetset>

  <!-- arm-vx6 (vxworks 6) -->
  <targetset canonical="arm-vx6">
    <target>arm-vx6</target>
    <target>arm-wrs-vxworks</target>
  </targetset>

  <!-- x86-vx6-.* (vxworks 6) -->
  <targetset canonical="x86-vx6">
    <target>x86-vx6</target>
    <target>x86-wrs-vxworks</target>
    <target>x86-vx6-windows</target>
    <target>x86-vx6-linux</target>
    <target>i.86-wrs-vxworks</target>
  </targetset>

  <targetset canonical="ppc-vx6">
    <target>powerpc-wrs-vxworks</target>
    <!-- ppc-vxw-.*  (vxworks 5) -->
    <target>ppc-vxw</target>
    <target>ppc-vxw-solaris</target>
    <target>ppc-vxw-windows</target>
    <!-- ppc-vx178b-.*  (vxworks cert) -->
    <target>ppc-vx178b</target>
    <target>ppc-vx178b-solaris</target>
    <target>ppc-vx178b-windows</target>
    <!-- ppc-vx6-.* - used as canonical target since more common -->
    <target>ppc-vx6</target>
    <target>ppc-vx6-solaris</target>
    <target>ppc-vx6-windows</target>
    <target>ppc-vx6-linux</target>
  </targetset>

  <targetset canonical="e500v2-vx6">
    <!-- e500v2-vx6-.* -->
    <target>e500v2-vx6</target>
    <target>e500v2-wrs-vxworks</target>
    <target>e500v2-vx6-solaris</target>
    <target>e500v2-vx6-windows</target>
    <target>e500v2-vx6-linux</target>
  </targetset>

  <!-- ppc-vx653-.*  (vxworks 653) -->
  <targetset canonical="ppc-vx653">
    <target>ppc-vx653</target>
    <target>ppc-vx653-solaris</target>
    <target>ppc-vx653-windows</target>
    <target>powerpc-wrs-vxworksae</target>
  </targetset>

  <!-- e500v2-vx653-.*  (vxworks 653) -->
  <targetset canonical="e500v2-vx653">
    <target>e500v2-vx653</target>
    <target>e500v2-vx653-windows</target>
    <target>e500v2-wrs-vxworksae</target>
  </targetset>

  <!-- aarch64-qnx  -->
  <targetset canonical="aarch64-qnx">
    <target>aarch64-qnx</target>
    <target>aarch64-nto-qnx</target>
  </targetset>

  <!-- aarch64-vx7 (vxworks 7) -->
  <targetset canonical="aarch64-vx7">
    <target>aarch64-vx7</target>
    <target>aarch64-wrs-vxworks7</target>
  </targetset>

  <!-- aarch64-vx7r2 (vxworks 7.2) -->
  <targetset canonical="aarch64-vx7r2">
    <target>aarch64-vx7r2</target>
    <!-- vx7r2cert platforms use the same target triplet as
         the corresponding vx7r2 (non-cert) platform.
         Add them to the same targetset as well (see TB12-012). -->
    <target>aarch64-vx7r2cert</target>
    <target>aarch64-wrs-vxworks7r2</target>
  </targetset>

  <!-- ppc-elf-.*  -->
  <targetset canonical="ppc-elf">
    <target>ppc-elf</target>
    <target>ppc-elf-solaris</target>
    <target>ppc-elf-windows</target>
    <target>powerpc-elf</target>
  </targetset>

  <!-- p55-elf-.*  -->
  <targetset canonical="p55-elf">
    <target>p55-elf</target>
    <target>p55-elf-windows</target>
    <target>powerpc-eabispe</target>
  </targetset>

  <!-- erc32-elf-.*  -->
  <targetset canonical="erc32-elf">
    <target>erc32-elf</target>
    <target>erc32-elf-solaris</target>
    <target>erc32-elf-linux</target>
    <target>erc32-elf.*</target>
  </targetset>

  <!-- leon-elf-.*  -->
  <targetset canonical="leon-elf">
    <target>leon-elf</target>
    <target>leon-elf-solaris</target>
    <target>leon-elf-linux</target>
    <target>leon-elf.*</target>
  </targetset>

  <!-- leon3-elf-.*  -->
  <targetset canonical="leon3-elf">
    <target>leon3-elf</target>
    <target>leon3-elf-linux</target>
    <target>leon3-elf.*</target>
  </targetset>

  <!-- arm-elf-.*  -->
  <targetset canonical="arm-elf">
    <target>arm-elf</target>
    <target>arm-elf-linux</target>
    <target>arm-eabi</target>
    <target>arm-none-eabi</target>
  </targetset>

  <!-- riscv32-elf-.*  -->
  <targetset canonical="riscv32-elf">
    <target>riscv32-elf</target>
    <target>riscv32-none-elf</target>
    <target>riscv32-unknown-elf</target>
  </targetset>

  <!-- riscv64-elf-.*  -->
  <targetset canonical="riscv64-elf">
    <target>riscv64-elf</target>
    <target>riscv64-none-elf</target>
    <target>riscv64-unknown-elf</target>
  </targetset>

  <!-- x86-elf-.*  -->
  <targetset canonical="x86-elf">
    <target>x86-elf</target>
    <target>i686-elf</target>
  </targetset>

  <!-- avr -->
  <targetset canonical="avr-elf">
    <target>avr-elf</target>
    <target>avr-elf-windows</target>
    <target>avr</target>
  </targetset>

  <!-- ia64-openvms -->
  <targetset canonical="ia64-openvms">
    <target>ia64-openvms</target>
    <target>ia64-.*-openvms</target>
  </targetset>

  <!-- arm-android  -->
  <targetset canonical="arm-android">
    <target>arm-android</target>
    <target>arm-linux-androideabi</target>
  </targetset>

  <!-- aarch64-pikeos5  -->

  <targetset canonical="aarch64-pikeos5">
    <target>aarch64-pikeos5</target>
    <target>aarch64-.*-pikeos5</target>
  </targetset>

  <!-- arm-pikeos  -->

  <targetset canonical="arm-pikeos">
    <target>arm-pikeos</target>
    <target>arm-.*-pikeos</target>
  </targetset>

  <!-- arm-pikeos4.2  -->

  <targetset canonical="arm-pikeos4.2">
    <target>arm-pikeos4.2</target>
    <target>arm-.*-pikeos4</target>
  </targetset>

  <!-- arm-pikeos5  -->

  <targetset canonical="arm-pikeos5">
    <target>arm-pikeos5</target>
    <target>arm-.*-pikeos5</target>
  </targetset>

  <!-- ppc-pikeos  -->

  <targetset canonical="ppc-pikeos">
    <target>ppc-pikeos</target>
    <target>powerpc-.*-pikeos</target>
  </targetset>

  <!-- ppc-pikeos5  -->

  <targetset canonical="ppc-pikeos5">
    <target>ppc-pikeos5</target>
    <target>powerpc-.*-pikeos5</target>
  </targetset>

  <!-- x86-pikeos  -->
  <targetset canonical="x86-pikeos">
    <target>x86-pikeos</target>
    <target>i.86-.*-pikeos</target>
  </targetset>

</gprconfig>
tricore-compilers.xml:256:<?xml version="1.0" ?>

<gprconfig>
  <compiler_description>
    <name>TRICOREGCC</name>
    <executable>tricore-gcc</executable>
    <version>4.9.2</version>
    <languages>C</languages>
    <target>tricore</target>
  </compiler_description>
</gprconfig>
tricore-configuration.xml:600:<?xml version="1.0" ?>

<gprconfig>
  <configuration>
    <compilers>
      <compiler name="TRICOREGCC"/>
    </compilers>
    <targets>
      <target name="tricore"/>
    </targets>
    <config>
   package Compiler is
      for Driver ("C") use "tricore-gcc";
      for Leading_Required_Switches   ("C") use
         ("-c", "-x", "c") &amp; Compiler'Leading_Required_Switches ("C");
      for Include_Switches        ("C") use ("-I");
      for Max_Command_Line_Length use "8192";
      for Response_File_Format    ("C") use "GCC_GNU";
   end Compiler;
    </config>
  </configuration>
</gprconfig>
tricore-target.xml:146:<?xml version="1.0" ?>

<gprconfig>
  <!-- tricore -->
  <targetset canonical='tricore'>
    <target>tricore</target>
  </targetset>
</gprconfig>
vxworks.xml:317:<?xml version="1.0" ?>
<gprconfig>
  <!-- This file has been removed on 20170306. Replaced by an empty file
       for bootstrap: otherwise re-installing gprbuild on the same install
       location will not remove the old vxworks.xml. -->
  <configuration>
    <config>
    </config>
  </configuration>
</gprconfig>
windres.xml:714:<?xml version="1.0" ?>
<gprconfig>
   <!--  This package provides the rules to handle Windows resource files -->

   <configuration>
     <compilers>
       <compiler language="WinRes" />
     </compilers>
     <config>
   package Compiler is
      for Driver ("WinRes") use "${PREFIX(WinRes)}windres";
      for Trailing_Required_Switches ("WinRes") use ("-i");
      for Object_File_Suffix ("WinRes") use ".coff";
      for Object_File_Switches ("WinRes") use ("-o", "");
   end Compiler;

   package Naming is
      for Body_Suffix ("WinRes") use ".rc";
   end Naming;

   package Linker is
      for Unconditional_Linking ("WinRes") use "True";
   end Linker;

     </config>
   </configuration>

</gprconfig>
x86-vx6.xml:1183:<?xml version="1.0" ?>
<!DOCTYPE gprconfig [
<!ENTITY % env.ent SYSTEM "env.ent"> %env.ent;
<!ENTITY % shortcuts.ent SYSTEM "shortcuts.ent"> %shortcuts.ent;
<!ENTITY % vxworks.ent SYSTEM "vxworks.ent"> %vxworks.ent;
<!ENTITY % vx6.ent SYSTEM "vx6.ent"> %vx6.ent;

<!-- Local target-specific conditions -->

<!ENTITY this_target 'i586-wrs-vxworks'>
<!ENTITY this_gnu_wrs_suffix 'pentium'>

<!ENTITY if_these_c_compilers
    '<compilers>
       <compiler name="^GCC_Pro$" />
       <compiler name="^GCC-WRS6$" />
       <compiler name="^GCC-WRS6CERT$" />
     </compilers>'>

<!ENTITY if_these_cpp_compilers
    '<compilers>
       <compiler name="^G\+\+-WRS6$" />
       <compiler name="^G\+\+-WRS6CERT$" />
     </compilers>'>

<!ENTITY if_these_gnu_wrs_compilers
    '<compilers>
       <compiler name="^GCC-WRS6$" />
       <compiler name="^G\+\+-WRS6$" />
       <compiler name="^GCC-WRS6CERT$" />
       <compiler name="^G\+\+-WRS6CERT$" />
     </compilers>'>

<!ENTITY this_wrs_rtp_base '0x40000000'>
<!-- For vx6cert -->

<!ENTITY this_cpu_subdir 'pentium/PENTIUM4/common'>
]>
<gprconfig>

  &environment;

  &configurations_vxworks_gpp;

  &configurations_vx6;

</gprconfig>
x86-vx7.xml:889:<?xml version="1.0" ?>
<!DOCTYPE gprconfig [
<!ENTITY % env.ent SYSTEM "env.ent"> %env.ent;
<!ENTITY % shortcuts.ent SYSTEM "shortcuts.ent"> %shortcuts.ent;
<!ENTITY % vxworks.ent SYSTEM "vxworks.ent"> %vxworks.ent;
<!ENTITY % vx7.ent SYSTEM "vx7.ent"> %vx7.ent;

<!-- Local target-specific conditions -->

<!ENTITY this_target 'i586-wrs-vxworks7'>

<!ENTITY if_these_c_compilers
    '<compilers>
       <compiler name="^GCC_Pro$" />
       <compiler name="^GCC-WRS7X86$" />
     </compilers>'>

<!ENTITY if_these_cpp_compilers
    '<compilers>
       <compiler name="^G\+\+_Pro$" />
     </compilers>'>

<!ENTITY if_these_gnu_wrs_compilers
    '<compilers>
       <compiler name="^GCC-WRS7X86$" />
     </compilers>'>

<!ENTITY this_wrs_rtp_base '0x400000'>
]>
<gprconfig>

  &environment;

  &configurations_vxworks_gpp;

  &configurations_vx7;

  &configurations_gnat_ar;

</gprconfig>
x86-vx7r2.xml:887:<?xml version="1.0" ?>
<!DOCTYPE gprconfig [
<!ENTITY % env.ent SYSTEM "env.ent"> %env.ent;
<!ENTITY % shortcuts.ent SYSTEM "shortcuts.ent"> %shortcuts.ent;
<!ENTITY % vxworks.ent SYSTEM "vxworks.ent"> %vxworks.ent;
<!ENTITY % vx7.ent SYSTEM "vx7.ent"> %vx7.ent;

<!-- Local target-specific conditions -->

<!ENTITY this_target 'i586-wrs-vxworks7r2'>

<!ENTITY if_these_c_compilers
    '<compilers>
       <compiler name="^GCC_Pro$" />
       <compiler name="^LLVMC-X86$" />
     </compilers>'>

<!ENTITY if_these_cpp_compilers
    '<compilers>
       <compiler name="^G\+\+_Pro$" />
     </compilers>'>

<!ENTITY if_these_gnu_wrs_compilers
    '<compilers>
       <compiler name="^LLVMC-X86$" />
     </compilers>'>

<!ENTITY this_wrs_rtp_base '0x400000'>
]>
<gprconfig>

  &environment;

  &configurations_vxworks_gpp;

  &configurations_vx7;

  &configurations_gnat_ar;

</gprconfig>
x86_64-vx7.xml:897:<?xml version="1.0" ?>
<!DOCTYPE gprconfig [
<!ENTITY % env.ent SYSTEM "env.ent"> %env.ent;
<!ENTITY % shortcuts.ent SYSTEM "shortcuts.ent"> %shortcuts.ent;
<!ENTITY % vxworks.ent SYSTEM "vxworks.ent"> %vxworks.ent;
<!ENTITY % vx7.ent SYSTEM "vx7.ent"> %vx7.ent;

<!-- Local target-specific conditions -->

<!ENTITY this_target 'x86_64-wrs-vxworks7'>

<!ENTITY if_these_c_compilers
    '<compilers>
       <compiler name="^GCC_Pro$" />
       <compiler name="^GCC-WRS7X86_64$" />
     </compilers>'>

<!ENTITY if_these_cpp_compilers
    '<compilers>
       <compiler name="^G\+\+_Pro$" />
     </compilers>'>

<!ENTITY if_these_gnu_wrs_compilers
    '<compilers>
       <compiler name="^GCC-WRS7X86_64$" />
     </compilers>'>

<!ENTITY this_wrs_rtp_base '0x200000'>
]>
<gprconfig>

  &environment;

  &configurations_vxworks_gpp;

  &configurations_vx7;

  &configurations_gnat_ar;

</gprconfig>
x86_64-vx7r2.xml:895:<?xml version="1.0" ?>
<!DOCTYPE gprconfig [
<!ENTITY % env.ent SYSTEM "env.ent"> %env.ent;
<!ENTITY % shortcuts.ent SYSTEM "shortcuts.ent"> %shortcuts.ent;
<!ENTITY % vxworks.ent SYSTEM "vxworks.ent"> %vxworks.ent;
<!ENTITY % vx7.ent SYSTEM "vx7.ent"> %vx7.ent;

<!-- Local target-specific conditions -->

<!ENTITY this_target 'x86_64-wrs-vxworks7r2'>

<!ENTITY if_these_c_compilers
    '<compilers>
       <compiler name="^GCC_Pro$" />
       <compiler name="^LLVMC-X86_64$" />
     </compilers>'>

<!ENTITY if_these_cpp_compilers
    '<compilers>
       <compiler name="^G\+\+_Pro$" />
     </compilers>'>

<!ENTITY if_these_gnu_wrs_compilers
    '<compilers>
       <compiler name="^LLVMC-X86_64$" />
     </compilers>'>

<!ENTITY this_wrs_rtp_base '0x200000'>
]>
<gprconfig>

  &environment;

  &configurations_vxworks_gpp;

  &configurations_vx7;

  &configurations_gnat_ar;

</gprconfig>
