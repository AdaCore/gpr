# This bit is used to make sure we don't run too many pipelines:
# don't run the branch CI when a merge request is already open for the
# branch.
workflow:
  rules:
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_PIPELINE_SOURCE == "push"
      when: never
    - when: always

variables:
   GIT_CLONE_BASE: https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}:${CI_SERVER_PORT}
   SANDBOX: /it/wave
   HOST: x86_64-linux
   ANOD_DEFAULT_SANDBOX_DIR: /it/wave
   TARGET: ""

# This step defines bash functions that are shared between jobs.
# Note: before_script at toplevel is always executed, unless overriden by the
# various stages, so please don't !

default:
  before_script: |
    echo "before script executing..."

    #######################
    ## colored execution ##
    #######################

    exec() {
       # dark green + $ + command line + grey
       echo -e "\e[0;32m\$ $@\e[0;37m"
       $@
       # save the result
       res=$?
       # back to normal output
       echo -e -n "\e[0m"
       # make sure we translate the exit code
       return $res
    }

    anod_repo_name() {
      # anod repo name for a given project name
      anod_name=$1
      if [ "$anod_name" = "gpr" ]; then
         anod_name=gpr2
      fi
      if [ "$anod_name" = "gprbuild-internal" ]; then
         anod_name=gprbuild_testsuite
      fi
      echo $anod_name
    }

    ########################
    ## SETUP REPOSITORIES ##
    ########################

    setup_repos() {
      # clone subprojects and ensure anod uses them.
      # input: the list of subprojects to clone

      # make sure we use the local branch in anod
      anod_name=`anod_repo_name $CI_PROJECT_NAME`
      exec anod vcs --add-repo $anod_name $CI_PROJECT_DIR

      # ??? Following steps are workarounds waiting for a proper handling of
      # commits dependencies between repositories. This ensures that the latest
      # version of anod scripts and list given as input are used instead of the
      # latest nightly build versions.

      # Use latest anod
      cd /tmp
      exec git clone $GIT_CLONE_BASE/eng/it/anod
      exec anod tune --anod /tmp/anod

      # Setup the anod vcs for all subprojects.
      cd /tmp
      for subproject in $@; do
        exec git clone $GIT_CLONE_BASE/eng/gpr/$subproject
        anod_repo=`anod_repo_name $subproject`
        exec anod vcs --add-repo $anod_repo /tmp/$subproject
      done
      # print final status, for record
      exec anod vcs --list
    }

    #########################
    # PACKAGES INSTALLATION #
    #########################

    install_packages() {
      # input: a list of packages to install in anod
      # Note: TARGET can be set to --target=foo,version,machine to install
      # a cross compiler with up-to-date gprbuild package

      cd $SANDBOX
      exec mkdir -p fingerprints
      for pkg in $@; do
        if [ $pkg = "gnat" -o $pkg = "gnatall" ]; then
          exec anod install $pkg $TARGET
          work_dir=$(anod info install $pkg $TARGET --show working_dir)
          exec tar zxf $CI_PROJECT_DIR/gprbuild.tar.gz -C $work_dir
        else
          exec mkdir -p $HOST/$pkg ;
          exec tar zxf $CI_PROJECT_DIR/$pkg.tar.gz -C $HOST/$pkg
          for json in install download-bin; do
            exec touch fingerprints/$HOST.$pkg.$json.json.assume-unchanged
          done
        fi
      done
      exec rm -f $CI_PROJECT_DIR/*.tar.gz
    }

    ######################
    # RUNNING TESTSUITES #
    ######################

    run_testsuite() {
      # inputs:
      # spec: the anod spec under test
      # args: the anod arguments to use
      # xunit_name: the name under which the testsuite is reported to gitlab

      local spec=$1
      local args=$2
      local xunit_name=$3

      # run the testsuite
      exec anod test $spec $args --minimal

      # generate report for gitlab

      test_output="$(echo $xunit_name | sed -e 's/_//g')_result.xml"
      echo "generating result in $test_output"

      # check for results directory.
      working_dir=$(anod info test $spec --show working_dir $args)
      RESULTS_DIR=$working_dir/results/new

      # translate e3 results into xunit results (and highlight it in yellow)
      echo -e "\e[1;34m"
      e3-testsuite-report \
        --failure-exit-code 1 \
        --xunit-output $CI_PROJECT_DIR/$test_output \
        --xunit-name $xunit_name \
        $RESULTS_DIR || exit 1
      echo -e "\e[0m"
    }

################
# JOB TEMPLATE #
################

.job_template:
  services:
     - image:sandbox
     - cpu:8
     - mem:16

.test_template:
  extends: .job_template
  stage: test
  allow_failure: true
