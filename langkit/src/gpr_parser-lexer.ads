
------------------------------------------------------------------------------
--                                                                          --
--                            GPR PROJECT PARSER                            --
--                                                                          --
--            Copyright (C) 2015-2016, Free Software Foundation, Inc.       --
--                                                                          --
-- This library is free software;  you can redistribute it and/or modify it --
-- under terms of the  GNU General Public License  as published by the Free --
-- Software  Foundation;  either version 3,  or (at your  option) any later --
-- version. This library is distributed in the hope that it will be useful, --
-- but WITHOUT ANY WARRANTY;  without even the implied warranty of MERCHAN- --
-- TABILITY or FITNESS FOR A PARTICULAR PURPOSE.                            --
--                                                                          --
-- As a special exception under Section 7 of GPL version 3, you are granted --
-- additional permissions described in the GCC Runtime Library Exception,   --
-- version 3.1, as published by the Free Software Foundation.               --
--                                                                          --
-- You should have received a copy of the GNU General Public License and    --
-- a copy of the GCC Runtime Library Exception along with this program;     --
-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --
-- <http://www.gnu.org/licenses/>.                                          --
--                                                                          --
------------------------------------------------------------------------------

--  DO NOT EDIT THIS IS AN AUTOGENERATED FILE


with Langkit_Support.Slocs; use Langkit_Support.Slocs;
with Langkit_Support.Text;  use Langkit_Support.Text;
with Langkit_Support.Token_Data_Handlers;

--  This package provides types and primitives to split text streams into lists
--  of tokens.

package GPR_Parser.Lexer is

   

   type Token_Kind is (
      GPR_Termination,
GPR_Lexing_Failure,
GPR_Identifier,
GPR_All,
GPR_Abstract,
GPR_At,
GPR_Case,
GPR_End,
GPR_For,
GPR_Is,
GPR_Limited,
GPR_Null,
GPR_Others,
GPR_Package,
GPR_Renames,
GPR_Type,
GPR_Use,
GPR_When,
GPR_With,
GPR_Project,
GPR_Extends,
GPR_Par_Open,
GPR_Par_Close,
GPR_Semicolon,
GPR_Colon,
GPR_Comma,
GPR_Dot,
GPR_Amp,
GPR_Tick,
GPR_Pipe,
GPR_Assign,
GPR_Arrow,
GPR_String,
GPR_Number,
GPR_Label,
GPR_Char,
GPR_Lex_Fail
   );

   type Token_Data_Type is record
      Kind       : Token_Kind;

      Text       : Text_Access;
      --  Text as found in original source file or null depending on the token
      --  kind (as decided in the lexer specification). For instance: null for
      --  keywords but actual text for identifiers.

      Sloc_Range : Source_Location_Range;
   end record;

   package Token_Data_Handlers is new Langkit_Support.Token_Data_Handlers
     (Token_Data_Type);
   use Token_Data_Handlers;

   Unknown_Charset : exception;
   --  Raised by Lex_From_* functions when the input charset is not supported

   Invalid_Input : exception;
   --  Raised by Lex_From_* functions when the input contains an invalid byte
   --  sequence.

   procedure Lex_From_Filename (Filename, Charset : String;
                                TDH               : in out Token_Data_Handler;
                                With_Trivia       : Boolean);
   --  Extract tokens out of Filename and store them into TDH. Raise a
   --  Name_Error exception if the file could not be open.

   procedure Lex_From_Buffer (Buffer, Charset : String;
                              TDH             : in out Token_Data_Handler;
                              With_Trivia     : Boolean);
   --  Likewise, but extract tokens from an in-memory buffer. This never raises
   --  an exception.

   function Token_Kind_Name (Token_Id : Token_Kind) return String;
   --  Return a human-readable name for a token kind.

   function Image (T : Token_Data_Type) return String is
     (if T.Text = null
      then ""
      else Image (T.Text.all));

end GPR_Parser.Lexer;
