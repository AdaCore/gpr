
------------------------------------------------------------------------------
--                                                                          --
--                            GPR PROJECT PARSER                            --
--                                                                          --
--            Copyright (C) 2015-2016, Free Software Foundation, Inc.       --
--                                                                          --
-- This library is free software;  you can redistribute it and/or modify it --
-- under terms of the  GNU General Public License  as published by the Free --
-- Software  Foundation;  either version 3,  or (at your  option) any later --
-- version. This library is distributed in the hope that it will be useful, --
-- but WITHOUT ANY WARRANTY;  without even the implied warranty of MERCHAN- --
-- TABILITY or FITNESS FOR A PARTICULAR PURPOSE.                            --
--                                                                          --
-- As a special exception under Section 7 of GPL version 3, you are granted --
-- additional permissions described in the GCC Runtime Library Exception,   --
-- version 3.1, as published by the Free Software Foundation.               --
--                                                                          --
-- You should have received a copy of the GNU General Public License and    --
-- a copy of the GCC Runtime Library Exception along with this program;     --
-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --
-- <http://www.gnu.org/licenses/>.                                          --
--                                                                          --
------------------------------------------------------------------------------

--  DO NOT EDIT THIS IS AN AUTOGENERATED FILE




with Ada.Exceptions;                  use Ada.Exceptions;
with Ada.Strings.Wide_Wide_Unbounded; use Ada.Strings.Wide_Wide_Unbounded;
with Ada.Unchecked_Conversion;

with System;

with Interfaces;           use Interfaces;
with Interfaces.C;         use Interfaces.C;
with Interfaces.C.Strings; use Interfaces.C.Strings;

with Langkit_Support.Slocs; use Langkit_Support.Slocs;
with Langkit_Support.Text;  use Langkit_Support.Text;

--  This package defines data types and subprograms to provide the
--  implementation of the exported C API for analysis primitives.
--
--  Unless one wants to deal with C code, it is very likely that one needs to
--  use this package. Please refer to the C header if you want to use the C
--  API.

package GPR_Parser.Analysis.C is

   type gpr_analysis_context is new System.Address;
   --  Context for all source analysis.

   type gpr_analysis_unit is new System.Address;
   --  Context for the analysis of a single compilation unit. References are
   --  ref-counted.

   type gpr_base_node is new System.Address;
   --  Data type for all AST nodes. AST nodes are assembled to make up a tree.
   --  See the AST node primitives below to inspect such trees. References are
   --  ref-counted.

   type gpr_node_kind_enum is new int;
   --  Kind of AST nodes in parse trees.

   type gpr_lexical_env is new System.Address;
   --  Data type for lexical environments.

   --  Helper data structures for source location handling

   type gpr_source_location is record
      Line   : Unsigned_32;
      Column : Unsigned_16;
   end record
     with Convention => C;

   type gpr_source_location_range is record
      Start_S, End_S : gpr_source_location;
   end record
     with Convention => C;

   type gpr_text is record
      Chars  : System.Address;
      --  Address for the content of the string.

      Length : size_t;
      --  Size of the string (in characters).

      Is_Allocated : int;
   end record
     with Convention => C_Pass_By_Copy;
   --  String encoded in UTF-32 (native endianness).

   type gpr_token is record
      Token_Data                : System.Address;
      Token_Index, Trivia_Index : int;

      Kind                      : int;
      Text                      : gpr_text;
      Sloc_Range                : gpr_source_location_range;
   end record
     with Convention => C_Pass_By_Copy;
   --  Reference to a token in an analysis unit.

   type gpr_diagnostic is record
      Sloc_Range : gpr_source_location_range;
      Message    : gpr_text;
      --  When the API returns a diagnostic, it is up to the caller to free the
      --  message string.
   end record
     with Convention => C;
   --  Analysis unit diagnostics.

   type gpr_exception is record
      Is_Fatal    : int;
      --  Whether this exception is fatal for this process. If it is fatal,
      --  then process sanity is no longer guaranteed by Libadalang. If it is
      --  not, performing further processing is safe.

      Information : chars_ptr;
      --  Message and context information associated with this exception.
   end record;
   --  Holder for native exceptions-related information.  Memory management for
   --  this and all the fields is handled by the library: one just has to make
   --  sure not to keep references to it.
   --
   --  TODO: For the moment, this structure contains already formatted
   --  information, but depending on possible future Ada runtime improvements,
   --  this might change.

   type gpr_bool is new Unsigned_8;

      type gpr_bool_Ptr is access gpr_bool;
      type gpr_base_node_Ptr is access gpr_base_node;
      type gpr_lexical_env_Ptr is access gpr_lexical_env;
      type gpr_token_Ptr is access gpr_token;
      type gpr_text_Ptr is access gpr_text;
      type gpr_source_location_Ptr is access gpr_source_location;
      type gpr_source_location_range_Ptr is access gpr_source_location_range;
      type gpr_diagnostic_Ptr is access gpr_diagnostic;
      type gpr_exception_Ptr is access gpr_exception;

   type int_Ptr is access int;

   procedure Free (Address : System.Address)
     with Export        => True,
          Convention    => C,
          External_Name => "gpr_free";
   --  Free dynamically allocated memory.
   --
   --  This is a helper to free objects from dynamic languages.
   --  Helper to free objects in dynamic languages

   procedure gpr_destroy_text (T : gpr_text_Ptr)
     with Export        => True,
          Convention    => C,
          External_Name => "gpr_destroy_text";
   --  If this text object owns the buffer it references, free this buffer.
   --
   --  Note that even though this accepts a pointer to a text object, it does
   --  not deallocates the text object itself but rather the buffer it
   --  references.

   -------------------------
   -- Analysis primitives --
   -------------------------

   function gpr_create_analysis_context
     (Charset : chars_ptr)
      return gpr_analysis_context
      with Export        => True,
           Convention    => C,
           External_name => "gpr_create_analysis_context";
   --  Create a new Analysis_Context. The returned value has a ref-count set to
   --  1. When done with it, invoke Destroy on it, in which case the ref-count
   --  is ignored. If this value is shared with garbage collected languages,
   --  use ref-counting primitives instead so that the context is destroyed
   --  when nobody references it anymore.
   --
   --  Charset will be used as a default charset to decode input sources in
   --  analysis units. Please see GNATCOLL.Iconv for a couple of supported
   --  charsets. Be careful: passing an unsupported charset here is not
   --  guaranteed to raise an error here.
   --
   --  If no charset is provided, take utf-8 as the default.
   --
   --  TODO: Passing an unsupported charset here is not guaranteed to raise an
   --  error right here, but this would be really helpful for users.

   function gpr_context_incref
     (Context : gpr_analysis_context)
      return gpr_analysis_context
      with Export        => True,
           Convention    => C,
           External_name => "gpr_context_incref";
   --  Increase the reference count to an analysis context. Useful for bindings
   --  to garbage collected languages. Return the reference for convenience.

   procedure gpr_context_decref
     (Context : gpr_analysis_context)
      with Export        => True,
           Convention    => C,
           External_name => "gpr_context_decref";
   --  Decrease the reference count to an analysis context. Useful for bindings
   --  to garbage collected languages. Destruction happens when the ref-count
   --  reaches 0.

   procedure gpr_destroy_analysis_context
     (Context : gpr_analysis_context)
      with Export        => True,
           Convention    => C,
           External_name => "gpr_destroy_analysis_context";
   --  Invoke Remove on all the units Context contains and free Context. Thus,
   --  any analysis unit it contains may survive if there are still references
   --  to it elsewhere.

   function gpr_get_analysis_unit_from_file
     (Context           : gpr_analysis_context;
      Filename, Charset : chars_ptr;
      Reparse           : int;
      With_Trivia       : int)
      return gpr_analysis_unit
      with Export        => True,
           Convention    => C,
           External_name =>
              "gpr_get_analysis_unit_from_file";
   --  Create a new analysis unit for Filename or return the existing one if
   --  any. If Reparse is true and the analysis unit already exists, reparse it
   --  from Filename.
   --
   --  The result is owned by the context: the caller must increase its ref-
   --  count in order to keep a reference to it.
   --
   --  Use Charset in order to decode the content of Filename. If Charset is
   --  empty then use the last charset used for this unit, or use the context's
   --  default if creating this unit.
   --
   --  If any failure occurs, such as file opening, decoding, lexing or parsing
   --  failure, return an analysis unit anyway: errors are described as
   --  diagnostics.
   --
   --  When With_Trivia is true, the parsed analysis unit will contain trivias.
   --  Already existing analysis units are reparsed if needed.

   function gpr_get_analysis_unit_from_buffer
     (Context           : gpr_analysis_context;
      Filename, Charset : chars_ptr;
      Buffer            : chars_ptr;
      Buffer_Size       : size_t;
      With_Trivia       : int)
      return gpr_analysis_unit
      with Export        => True,
           Convention    => C,
           External_name =>
              "gpr_get_analysis_unit_from_buffer";
   --  Create a new analysis unit for Filename or return the existing one if
   --  any. Whether the analysis unit already exists or not, (re)parse it from
   --  the source code in Buffer.
   --
   --  The result is owned by the context: the caller must increase its ref-
   --  count in order to keep a reference to it.
   --
   --  Use Charset in order to decode the content of Filename. If Charset is
   --  empty then use the last charset used for this unit, or use the context's
   --  default if creating this unit.
   --
   --  If any failure occurs, such as decoding, lexing or parsing failure,
   --  return an analysis unit anyway: errors are described as diagnostics.
   --
   --  When With_Trivia is true, the parsed analysis unit will contain trivias.
   --  Already existing analysis units are reparsed if needed.

   function gpr_remove_analysis_unit
     (Context  : gpr_analysis_context;
      Filename : chars_ptr) return int
      with Export        => True,
           Convention    => C,
           External_name => "gpr_remove_analysis_unit";
   --  Remove the corresponding analysis unit from this context. If someone
   --  still owns a reference to it, it remains available but becomes context-
   --  less.
   --
   --  Return whether the removal was successful (i.e. whether the analysis
   --  unit existed).

   function gpr_unit_root (Unit : gpr_analysis_unit)
                                           return gpr_base_node
      with Export        => True,
           Convention    => C,
           External_name => "gpr_unit_root";
   --  Return the root AST node for this unit, or NULL if there is none.

   procedure gpr_unit_first_token
     (Unit  : gpr_analysis_unit;
      Token : gpr_token_Ptr)
      with Export        => True,
           Convention    => C,
           External_name => "gpr_unit_first_token";
   --  Return a reference to the first token scanned in this unit.

   procedure gpr_unit_last_token
     (Unit  : gpr_analysis_unit;
      Token : gpr_token_Ptr)
      with Export        => True,
           Convention    => C,
           External_name => "gpr_unit_last_token";
   --  Return a reference to the last token scanned in this unit.

   function gpr_unit_filename
     (Unit : gpr_analysis_unit)
      return chars_ptr
      with Export        => True,
           Convention    => C,
           External_name => "gpr_unit_filename";
   --  Return the filename an unit is associated to.
   --
   --  The returned string is dynamically allocated and the caller must free it
   --  when done with it.

   function gpr_unit_diagnostic_count
     (Unit : gpr_analysis_unit) return unsigned
      with Export        => True,
           Convention    => C,
           External_name => "gpr_unit_diagnostic_count";
   --  Return the number of diagnostics associated to this unit.

   function gpr_unit_diagnostic
     (Unit         : gpr_analysis_unit;
      N            : unsigned;
      Diagnostic_P : gpr_diagnostic_Ptr) return int
      with Export        => True,
           Convention    => C,
           External_name => "gpr_unit_diagnostic";
   --  Get the Nth diagnostic in this unit and store it into *DIAGNOSTIC_P.
   --  Return zero on failure (when N is too big).

   function gpr_node_unit
     (Node : gpr_base_node)
      return gpr_analysis_unit
      with Export        => True,
           Convention    => C,
           External_name => "gpr_node_unit";
   --  Return the unit that owns an AST node.

   function gpr_unit_incref
     (Unit : gpr_analysis_unit) return gpr_analysis_unit
      with Export        => True,
           Convention    => C,
           External_name => "gpr_unit_incref";
   --  Increase the reference count to an analysis unit. Return the reference
   --  for convenience.

   procedure gpr_unit_decref (Unit : gpr_analysis_unit)
      with Export        => True,
           Convention    => C,
           External_name => "gpr_unit_decref";
   --  Decrease the reference count to an analysis unit.

   function gpr_unit_context
     (Unit : gpr_analysis_unit)
      return gpr_analysis_context
      with Export        => True,
           Convention    => C,
           External_name => "gpr_unit_context";
   --  Return the context that owns this unit.

   procedure gpr_unit_reparse_from_file
     (Unit : gpr_analysis_unit; Charset : chars_ptr)
      with Export        => True,
           Convention    => C,
           External_name => "gpr_unit_reparse_from_file";
   --  Reparse an analysis unit from the associated file. If Charset is empty
   --  or NULL, use the last charset successfuly used for this unit, otherwise
   --  use it to decode the content of Filename.
   --
   --  If any failure occurs, such as decoding, lexing or parsing failure,
   --  diagnostic are emitted to explain what happened.

   procedure gpr_unit_reparse_from_buffer
     (Unit        : gpr_analysis_unit;
      Charset     : chars_ptr;
      Buffer      : chars_ptr;
      Buffer_Size : size_t)
      with Export        => True,
           Convention    => C,
           External_name => "gpr_unit_reparse_from_buffer";
   --  Reparse an analysis unit from a buffer. If Charset is empty or NULL, use
   --  the last charset successfuly used for this unit, otherwise use it to
   --  decode the content of Filename.
   --
   --  If any failure occurs, such as decoding, lexing or parsing failure,
   --  diagnostic are emitted to explain what happened.

   procedure gpr_unit_populate_lexical_env
     (Unit : gpr_analysis_unit)
      with Export        => True,
           Convention    => C,
           External_name => "gpr_unit_populate_lexical_env";
   --  Populate the lexical environments for this analysis unit, according to
   --  the specifications given in the language spec.

   ---------------------------------
   -- General AST node primitives --
   ---------------------------------

   function gpr_node_kind (Node : gpr_base_node)
      return gpr_node_kind_enum
      with Export        => True,
           Convention    => C,
           External_name => "gpr_node_kind";
   --  Get the kind of an AST node.

   function gpr_kind_name (Kind : gpr_node_kind_enum)
                                           return gpr_text
      with Export        => True,
           Convention    => C,
           External_name => "gpr_kind_name";
   --  Helper for textual dump: return the name of a node kind. The returned
   --  string is a copy and thus must be free'd by the caller.

   function gpr_node_short_image (Node : gpr_base_node)
                                                  return gpr_text
      with Export        => True,
           Convention    => C,
           External_name => "gpr_node_short_image";
   --  Return a representation of NODE as a string.

   procedure gpr_node_sloc_range
     (Node         : gpr_base_node;
      Sloc_Range_P : gpr_source_location_range_Ptr)
      with Export        => True,
           Convention    => C,
           External_name => "gpr_node_sloc_range";
   --  Get the spanning source location range for an AST node.

   function gpr_lookup_in_node
     (Node : gpr_base_node;
      Sloc : gpr_source_location_Ptr) return gpr_base_node
      with Export        => True,
           Convention    => C,
           External_name => "gpr_lookup_in_node";
   --  Return the bottom-most AST node from NODE that contains SLOC, or NULL if
   --  there is none.

   function gpr_node_child_count (Node : gpr_base_node)
                                                  return unsigned
      with Export        => True,
           Convention    => C,
           External_name => "gpr_node_child_count";
   --  Return the number of AST node in NODE's fields.

   function gpr_node_child
     (Node    : gpr_base_node;
      N       : unsigned;
      Child_P : gpr_base_node_Ptr) return int
      with Export        => True,
           Convention    => C,
           External_name => "gpr_node_child";
   --  Get the Nth child AST node in NODE's fields and store it into *CHILD_P.
   --  Return zero on failure (when N is too big).

   function gpr_text_to_locale_string
     (Text : gpr_text) return System.Address
      with Export        => True,
           Convention    => C,
           External_name => "gpr_text_to_locale_string";
   --  Encode some text using the current locale. The result is dynamically
   --  allocated: it is up to the caller to free it when done with it.
   --
   --  This is a development helper to make it quick and easy to print token
   --  and diagnostic text: it ignores errors (when the locale does not support
   --  some characters). Production code should use real conversion routines
   --  such as libiconv's in order to deal with UTF-32 texts.


   -------------------------
   -- Extensions handling --
   -------------------------

   --  The following functions makes it possible to attach arbitrary data to
   --  AST nodes: these are extensions.  Each data is associated with both an
   --  extension ID and a destructor.  AST nodes can have either none or only
   --  one extension for a given ID.  The destructor is called when the AST
   --  node is about to be destroyed itself.
   --
   --  This mechanism is inteded to ease annotating trees with analysis data
   --  but also to host node wrappers for language bindings.

   type gpr_node_extension_destructor is
      access procedure (Node      : gpr_base_node;
                        Extension : System.Address)
      with Convention => C;
   --  Type for extension destructors.  The parameter are the "node" the
   --  extension was attached to and the "extension" itself.

   function gpr_register_extension (Name : chars_ptr)
      return unsigned
      with Export        => True,
           Convention    => C,
           External_name => "gpr_register_extension";
   --  Register an extension and return its identifier.  Multiple calls with
   --  the same name will return the same identifier.

   function gpr_node_extension
     (Node   : gpr_base_node;
      Ext_Id : unsigned;
      Dtor   : gpr_node_extension_destructor)
      return System.Address
      with Export        => True,
           Convention    => C,
           External_name => "gpr_node_extension";
   --  Create an extension slot in "node".  If this node already contains an
   --  extension for "ext_id", return the existing slot.  If not, create such a
   --  slot, associate the "dtor" destructor to it and initialize the slot to
   --  NULL.  Return a pointer to the slot.
   --
   --  Note that the pointer is not guaranteed to stay valid after further
   --  calls to this function.

   ----------
   -- Misc --
   ----------

   function gpr_get_last_exception return gpr_exception_Ptr
     with Export        => True,
          Convention    => C,
          External_Name => "gpr_get_last_exception";
   --  Return exception information for the last error that happened in the
   --  current thread. Will be automatically allocated on error and free'd on
   --  the next error.

   procedure Clear_Last_Exception;
   --  Free the information contained in Last_Exception

   procedure Set_Last_Exception
     (Exc      : Exception_Occurrence;
      Is_Fatal : Boolean := True);
   --  Free the information contained in Last_Exception and replace it with
   --  newly allocated information from Exc.

   function gpr_token_kind_name (Kind : int) return chars_ptr
      with Export => True,
           Convention => C,
           External_Name => "gpr_token_kind_name";
   --  Return a human-readable name for a token kind.
   --
   --  The returned string is dynamically allocated and the caller must free it
   --  when done with it.
   --
   --  If the given kind is invalid, return NULL and set the last exception
   --  accordingly.

   procedure gpr_token_next
     (Token      : gpr_token_Ptr;
      Next_Token : gpr_token_Ptr)
      with Export        => True,
           Convention    => C,
           External_name => "gpr_token_next";
   --  Return a reference to the next token in the corresponding analysis unit.

   procedure gpr_token_previous
     (Token          : gpr_token_Ptr;
      Previous_Token : gpr_token_Ptr)
      with Export        => True,
           Convention    => C,
           External_name => "gpr_token_previous";
   --  Return a reference to the previous token in the corresponding analysis
   --  unit.

   ------------------------
   -- Conversion helpers --
   ------------------------

   --  The following conversion helpers are use by the various C bindings

   function Wrap (S : Source_Location) return gpr_source_location is
     ((S.Line, S.Column));
   function Unwrap (S : gpr_source_location) return Source_Location is
     ((S.Line, S.Column));

   function Wrap (S : Source_Location_Range) return gpr_source_location_range is
     ((Start_S => (S.Start_Line, S.Start_Column),
       End_S   => (S.End_Line,   S.End_Column)));
   function Unwrap (S : gpr_source_location_range) return Source_Location_Range is
     ((S.Start_S.Line, S.End_S.Line,
       S.Start_S.Column, S.End_S.Column));

   function Wrap (S : Unbounded_Wide_Wide_String) return gpr_text;

   function Wrap_Alloc (S : Text_Type) return gpr_text;

   function Wrap (T : Text_Access) return gpr_text is
     (if T = null
      then (Chars => System.Null_Address, Length => 0, Is_Allocated => 0)
      else (Chars => T.all'Address, Length => T.all'Length, Is_Allocated => 0));

   function Wrap (T : Symbol_Type) return gpr_text is
     (Wrap (Text_Access (T)));

   function Unwrap
     (Unit : Analysis_Unit_Interface;
      Text : gpr_text)
      return Symbol_Type;

   --  The following conversions are used only at the interface between Ada and
   --  C (i.e. as parameters and return types for C entry points) for access
   --  types.  All read/writes for the pointed values are made through the
   --  access values and never through the System.Address values.  Thus, strict
   --  aliasing issues should not arise for these.
   --
   --  See <https://gcc.gnu.org/onlinedocs/gnat_ugn/
   --       Optimization-and-Strict-Aliasing.html>.

   pragma Warnings (Off, "possible aliasing problem for type");

   function Wrap is new Ada.Unchecked_Conversion
     (AST_Envs.Lexical_Env, gpr_lexical_env);
   function Unwrap is new Ada.Unchecked_Conversion
     (gpr_lexical_env, AST_Envs.Lexical_Env);

   function Wrap is new Ada.Unchecked_Conversion
     (Analysis_Context, gpr_analysis_context);
   function Unwrap is new Ada.Unchecked_Conversion
     (gpr_analysis_context, Analysis_Context);

   function Wrap is new Ada.Unchecked_Conversion
     (Analysis_Unit, gpr_analysis_unit);
   function Unwrap is new Ada.Unchecked_Conversion
     (gpr_analysis_unit, Analysis_Unit);
   function Wrap is new Ada.Unchecked_Conversion
     (Analysis_Unit_Interface, gpr_analysis_unit);
   function Unwrap is new Ada.Unchecked_Conversion
     (gpr_analysis_unit, Analysis_Unit_Interface);

   function Wrap is new Ada.Unchecked_Conversion
     (GPR_Node, gpr_base_node);
   function Unwrap is new Ada.Unchecked_Conversion
     (gpr_base_node, GPR_Node);

   function Convert is new Ada.Unchecked_Conversion
     (gpr_node_extension_destructor,
      Extension_Destructor);
   function Convert is new Ada.Unchecked_Conversion
     (chars_ptr, System.Address);

   pragma Warnings (Off, "possible aliasing problem for type");

end GPR_Parser.Analysis.C;
