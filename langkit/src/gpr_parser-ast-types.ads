
------------------------------------------------------------------------------
--                                                                          --
--                            GPR PROJECT PARSER                            --
--                                                                          --
--            Copyright (C) 2015-2016, Free Software Foundation, Inc.       --
--                                                                          --
-- This library is free software;  you can redistribute it and/or modify it --
-- under terms of the  GNU General Public License  as published by the Free --
-- Software  Foundation;  either version 3,  or (at your  option) any later --
-- version. This library is distributed in the hope that it will be useful, --
-- but WITHOUT ANY WARRANTY;  without even the implied warranty of MERCHAN- --
-- TABILITY or FITNESS FOR A PARTICULAR PURPOSE.                            --
--                                                                          --
-- As a special exception under Section 7 of GPL version 3, you are granted --
-- additional permissions described in the GCC Runtime Library Exception,   --
-- version 3.1, as published by the Free Software Foundation.               --
--                                                                          --
-- You should have received a copy of the GNU General Public License and    --
-- a copy of the GCC Runtime Library Exception along with this program;     --
-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --
-- <http://www.gnu.org/licenses/>.                                          --
--                                                                          --
------------------------------------------------------------------------------

--  DO NOT EDIT THIS IS AN AUTOGENERATED FILE











pragma Warnings (Off, "referenced");
with Langkit_Support.Bump_Ptr; use Langkit_Support.Bump_Ptr;
with Langkit_Support.Tokens;   use Langkit_Support.Tokens;
with Langkit_Support.Vectors;
pragma Warnings (On, "referenced");

private with GPR_Parser.AST.List;

--  This package defines all AST node types except the root one (see the
--  AST_Root package) along with the corresponding primitives. It also defines
--  miscellanous types that appear in the AST (stored in nodes or handled in
--  properties).

package GPR_Parser.AST.Types is

   --  Set of supported values for GPR_Node_Type_Kind (see AST_Root):

   List_Kind : constant GPR_Node_Type_Kind := 1;
         Abstract_Present_Kind : constant GPR_Node_Type_Kind :=
            2;
         Attribute_Decl_Kind : constant GPR_Node_Type_Kind :=
            3;
         Attribute_Reference_Kind : constant GPR_Node_Type_Kind :=
            4;
         Case_Construction_Kind : constant GPR_Node_Type_Kind :=
            5;
         Case_Item_Kind : constant GPR_Node_Type_Kind :=
            6;
         Compilation_Unit_Kind : constant GPR_Node_Type_Kind :=
            7;
         Empty_Decl_Kind : constant GPR_Node_Type_Kind :=
            8;
         Prefix_Kind : constant GPR_Node_Type_Kind :=
            9;
         Identifier_Kind : constant GPR_Node_Type_Kind :=
            10;
         Num_Literal_Kind : constant GPR_Node_Type_Kind :=
            11;
         String_Literal_Kind : constant GPR_Node_Type_Kind :=
            12;
         Expr_List_Kind : constant GPR_Node_Type_Kind :=
            13;
         External_Kind : constant GPR_Node_Type_Kind :=
            14;
         External_As_List_Kind : constant GPR_Node_Type_Kind :=
            15;
         External_Name_Kind : constant GPR_Node_Type_Kind :=
            16;
         External_Reference_Kind : constant GPR_Node_Type_Kind :=
            17;
         Others_Designator_Kind : constant GPR_Node_Type_Kind :=
            18;
         Package_Decl_Kind : constant GPR_Node_Type_Kind :=
            19;
         Package_Extension_Kind : constant GPR_Node_Type_Kind :=
            20;
         Package_Renaming_Kind : constant GPR_Node_Type_Kind :=
            21;
         Package_Spec_Kind : constant GPR_Node_Type_Kind :=
            22;
         Project_Kind : constant GPR_Node_Type_Kind :=
            23;
         Project_Declaration_Kind : constant GPR_Node_Type_Kind :=
            24;
         Project_Extension_Kind : constant GPR_Node_Type_Kind :=
            25;
         Project_Qualifier_Kind : constant GPR_Node_Type_Kind :=
            26;
         Project_Reference_Kind : constant GPR_Node_Type_Kind :=
            27;
         Qualifier_Names_Kind : constant GPR_Node_Type_Kind :=
            28;
         String_Literal_At_Kind : constant GPR_Node_Type_Kind :=
            29;
         Term_List_Kind : constant GPR_Node_Type_Kind :=
            30;
         Typed_String_Decl_Kind : constant GPR_Node_Type_Kind :=
            31;
         Variable_Decl_Kind : constant GPR_Node_Type_Kind :=
            32;
         Variable_Reference_Kind : constant GPR_Node_Type_Kind :=
            33;
         With_Decl_Kind : constant GPR_Node_Type_Kind :=
            34;

   -----------------------
   -- Enumeration types --
   -----------------------

   function Image (Value : Boolean) return String is
     (if Value then "True" else "False");


   ----------------------------------------------
   -- Structure types (incomplete declarations --
   ----------------------------------------------


   -----------------------------------------------------
   -- ASTNode derived types (incomplete declarations) --
   -----------------------------------------------------

   

   type Abstract_Present_Type;
   type Abstract_Present is access all Abstract_Present_Type'Class;
   


   

   type Attribute_Decl_Type;
   type Attribute_Decl is access all Attribute_Decl_Type'Class;
   


   

   type Attribute_Reference_Type;
   type Attribute_Reference is access all Attribute_Reference_Type'Class;
   


   

   type Case_Construction_Type;
   type Case_Construction is access all Case_Construction_Type'Class;
   


   

   type Case_Item_Type;
   type Case_Item is access all Case_Item_Type'Class;
   


   

   type Compilation_Unit_Type;
   type Compilation_Unit is access all Compilation_Unit_Type'Class;
   


   

   type Empty_Decl_Type;
   type Empty_Decl is access all Empty_Decl_Type'Class;
   


   

   type Expr_Type;
   type Expr is access all Expr_Type'Class;
   


   

   type Prefix_Type;
   type Prefix is access all Prefix_Type'Class;
   


   

   type Single_Tok_Node_Type;
   type Single_Tok_Node is access all Single_Tok_Node_Type'Class;
   


   

   type Identifier_Type;
   type Identifier is access all Identifier_Type'Class;
   


   

   type Num_Literal_Type;
   type Num_Literal is access all Num_Literal_Type'Class;
   


   

   type String_Literal_Type;
   type String_Literal is access all String_Literal_Type'Class;
   


   

   type Expr_List_Type;
   type Expr_List is access all Expr_List_Type'Class;
   


   

   type External_Type;
   type External is access all External_Type'Class;
   


   

   type External_As_List_Type;
   type External_As_List is access all External_As_List_Type'Class;
   


   

   type External_Name_Type;
   type External_Name is access all External_Name_Type'Class;
   


   

   type External_Reference_Type;
   type External_Reference is access all External_Reference_Type'Class;
   


   

   type Others_Designator_Type;
   type Others_Designator is access all Others_Designator_Type'Class;
   


   

   type Package_Decl_Type;
   type Package_Decl is access all Package_Decl_Type'Class;
   


   

   type Package_Extension_Type;
   type Package_Extension is access all Package_Extension_Type'Class;
   


   

   type Package_Renaming_Type;
   type Package_Renaming is access all Package_Renaming_Type'Class;
   


   

   type Package_Spec_Type;
   type Package_Spec is access all Package_Spec_Type'Class;
   


   

   type Project_Type;
   type Project is access all Project_Type'Class;
   


   

   type Project_Declaration_Type;
   type Project_Declaration is access all Project_Declaration_Type'Class;
   


   

   type Project_Extension_Type;
   type Project_Extension is access all Project_Extension_Type'Class;
   


   

   type Project_Qualifier_Type;
   type Project_Qualifier is access all Project_Qualifier_Type'Class;
   


   

   type Project_Reference_Type;
   type Project_Reference is access all Project_Reference_Type'Class;
   


   

   type Qualifier_Names_Type;
   type Qualifier_Names is access all Qualifier_Names_Type'Class;
   


   

   type String_Literal_At_Type;
   type String_Literal_At is access all String_Literal_At_Type'Class;
   


   

   type Term_List_Type;
   type Term_List is access all Term_List_Type'Class;
   


   

   type Typed_String_Decl_Type;
   type Typed_String_Decl is access all Typed_String_Decl_Type'Class;
   


   

   type Variable_Decl_Type;
   type Variable_Decl is access all Variable_Decl_Type'Class;
   


   

   type Variable_Reference_Type;
   type Variable_Reference is access all Variable_Reference_Type'Class;
   


   

   type With_Decl_Type;
   type With_Decl is access all With_Decl_Type'Class;
   



   

   

   type List_Case_Item_Type is new GPR_Node_Type with private;
   type List_Case_Item is access all List_Case_Item_Type'Class;


   

   

   type List_GPR_Node_Type is new GPR_Node_Type with private;
   type List_GPR_Node is access all List_GPR_Node_Type'Class;


   

   

   type List_String_Literal_Type is new GPR_Node_Type with private;
   type List_String_Literal is access all List_String_Literal_Type'Class;


   

   

   type List_Term_List_Type is new GPR_Node_Type with private;
   type List_Term_List is access all List_Term_List_Type'Class;


   

   

   type List_With_Decl_Type is new GPR_Node_Type with private;
   type List_With_Decl is access all List_With_Decl_Type'Class;



   -----------------------------------------
   -- Structure types (full declarations) --
   -----------------------------------------


   -----------------
   -- Array types --
   -----------------

   --  We implement array types as discriminated records so that binding to C
   --  can be done without copy.

   --  TODO??? This is likely to change in the near future: we would like to
   --  have here pure Ada arrays instead.


   ---------------------------------------------------
   -- ASTNode derived types (complete declarations) --
   ---------------------------------------------------

   --  See AST_Root for primitive operations documentations

   

   

   --
   --  Abstract_Present
   --

   type Abstract_Present_Type is 
      new GPR_Node_Type with private;


      overriding
      function Kind (Node : access Abstract_Present_Type) return GPR_Node_Type_Kind;
      overriding
      function Kind_Name (Node : access Abstract_Present_Type) return String;
      overriding
      function Image (Node : access Abstract_Present_Type) return String;


      overriding
      function Child_Count (Node : access Abstract_Present_Type) return Natural;
      overriding
      procedure Get_Child (Node  : access Abstract_Present_Type;
                           Index : Natural;
                           Exists : out Boolean;
                           Result : out GPR_Node);

      overriding
      procedure Print (Node  : access Abstract_Present_Type;
                       Level : Natural := 0);

      overriding procedure Destroy
        (Node : access Abstract_Present_Type);





   

   

   --
   --  Attribute_Decl
   --

   type Attribute_Decl_Type is 
      new GPR_Node_Type with private;


      overriding
      function Kind (Node : access Attribute_Decl_Type) return GPR_Node_Type_Kind;
      overriding
      function Kind_Name (Node : access Attribute_Decl_Type) return String;
      overriding
      function Image (Node : access Attribute_Decl_Type) return String;


      overriding
      function Child_Count (Node : access Attribute_Decl_Type) return Natural;
      overriding
      procedure Get_Child (Node  : access Attribute_Decl_Type;
                           Index : Natural;
                           Exists : out Boolean;
                           Result : out GPR_Node);

      overriding
      procedure Print (Node  : access Attribute_Decl_Type;
                       Level : Natural := 0);

      overriding procedure Destroy
        (Node : access Attribute_Decl_Type);


       function F_Attr_Name
         (Node : Attribute_Decl) return GPR_Node;
       
       function F_Attr_Index
         (Node : Attribute_Decl) return GPR_Node;
       
       function F_Expr
         (Node : Attribute_Decl) return Term_List;
       



   

   

   --
   --  Attribute_Reference
   --

   type Attribute_Reference_Type is 
      new GPR_Node_Type with private;


      overriding
      function Kind (Node : access Attribute_Reference_Type) return GPR_Node_Type_Kind;
      overriding
      function Kind_Name (Node : access Attribute_Reference_Type) return String;
      overriding
      function Image (Node : access Attribute_Reference_Type) return String;


      overriding
      function Child_Count (Node : access Attribute_Reference_Type) return Natural;
      overriding
      procedure Get_Child (Node  : access Attribute_Reference_Type;
                           Index : Natural;
                           Exists : out Boolean;
                           Result : out GPR_Node);

      overriding
      procedure Print (Node  : access Attribute_Reference_Type;
                       Level : Natural := 0);

      overriding procedure Destroy
        (Node : access Attribute_Reference_Type);


       function F_Attribute_Name
         (Node : Attribute_Reference) return Identifier;
       
       function F_Attribute_Index
         (Node : Attribute_Reference) return GPR_Node;
       



   

   

   --
   --  Case_Construction
   --

   type Case_Construction_Type is 
      new GPR_Node_Type with private;


      overriding
      function Kind (Node : access Case_Construction_Type) return GPR_Node_Type_Kind;
      overriding
      function Kind_Name (Node : access Case_Construction_Type) return String;
      overriding
      function Image (Node : access Case_Construction_Type) return String;


      overriding
      function Child_Count (Node : access Case_Construction_Type) return Natural;
      overriding
      procedure Get_Child (Node  : access Case_Construction_Type;
                           Index : Natural;
                           Exists : out Boolean;
                           Result : out GPR_Node);

      overriding
      procedure Print (Node  : access Case_Construction_Type;
                       Level : Natural := 0);

      overriding procedure Destroy
        (Node : access Case_Construction_Type);


       function F_Var_Ref
         (Node : Case_Construction) return Variable_Reference;
       
       function F_Items
         (Node : Case_Construction) return List_Case_Item;
       



   

   

   --
   --  Case_Item
   --

   type Case_Item_Type is 
      new GPR_Node_Type with private;


      overriding
      function Kind (Node : access Case_Item_Type) return GPR_Node_Type_Kind;
      overriding
      function Kind_Name (Node : access Case_Item_Type) return String;
      overriding
      function Image (Node : access Case_Item_Type) return String;


      overriding
      function Child_Count (Node : access Case_Item_Type) return Natural;
      overriding
      procedure Get_Child (Node  : access Case_Item_Type;
                           Index : Natural;
                           Exists : out Boolean;
                           Result : out GPR_Node);

      overriding
      procedure Print (Node  : access Case_Item_Type;
                       Level : Natural := 0);

      overriding procedure Destroy
        (Node : access Case_Item_Type);


       function F_Choice
         (Node : Case_Item) return List_GPR_Node;
       
       function F_Decls
         (Node : Case_Item) return List_GPR_Node;
       



   

   

   --
   --  Compilation_Unit
   --

   type Compilation_Unit_Type is 
      new GPR_Node_Type with private;


      overriding
      function Kind (Node : access Compilation_Unit_Type) return GPR_Node_Type_Kind;
      overriding
      function Kind_Name (Node : access Compilation_Unit_Type) return String;
      overriding
      function Image (Node : access Compilation_Unit_Type) return String;


      overriding
      function Child_Count (Node : access Compilation_Unit_Type) return Natural;
      overriding
      procedure Get_Child (Node  : access Compilation_Unit_Type;
                           Index : Natural;
                           Exists : out Boolean;
                           Result : out GPR_Node);

      overriding
      procedure Print (Node  : access Compilation_Unit_Type;
                       Level : Natural := 0);

      overriding procedure Destroy
        (Node : access Compilation_Unit_Type);


       function F_Project
         (Node : Compilation_Unit) return Project;
       



   

   

   --
   --  Empty_Decl
   --

   type Empty_Decl_Type is 
      new GPR_Node_Type with private;


      overriding
      function Kind (Node : access Empty_Decl_Type) return GPR_Node_Type_Kind;
      overriding
      function Kind_Name (Node : access Empty_Decl_Type) return String;
      overriding
      function Image (Node : access Empty_Decl_Type) return String;


      overriding
      function Child_Count (Node : access Empty_Decl_Type) return Natural;
      overriding
      procedure Get_Child (Node  : access Empty_Decl_Type;
                           Index : Natural;
                           Exists : out Boolean;
                           Result : out GPR_Node);

      overriding
      procedure Print (Node  : access Empty_Decl_Type;
                       Level : Natural := 0);

      overriding procedure Destroy
        (Node : access Empty_Decl_Type);





   

   

   --
   --  Expr
   --

   type Expr_Type is abstract
      new GPR_Node_Type with private;






   

   

   --
   --  Prefix
   --

   type Prefix_Type is 
      new Expr_Type with private;


      overriding
      function Kind (Node : access Prefix_Type) return GPR_Node_Type_Kind;
      overriding
      function Kind_Name (Node : access Prefix_Type) return String;
      overriding
      function Image (Node : access Prefix_Type) return String;


      overriding
      function Child_Count (Node : access Prefix_Type) return Natural;
      overriding
      procedure Get_Child (Node  : access Prefix_Type;
                           Index : Natural;
                           Exists : out Boolean;
                           Result : out GPR_Node);

      overriding
      procedure Print (Node  : access Prefix_Type;
                       Level : Natural := 0);

      overriding procedure Destroy
        (Node : access Prefix_Type);


       function F_Prefix
         (Node : Prefix) return Expr;
       
       function F_Suffix
         (Node : Prefix) return Expr;
       



   

   

   --
   --  Single_Tok_Node
   --

   type Single_Tok_Node_Type is abstract
      new Expr_Type with private;



       function F_Tok
         (Node : Single_Tok_Node) return Token;
       



   

   

   --
   --  Identifier
   --

   type Identifier_Type is 
      new Single_Tok_Node_Type with private;


      overriding
      function Kind (Node : access Identifier_Type) return GPR_Node_Type_Kind;
      overriding
      function Kind_Name (Node : access Identifier_Type) return String;
      overriding
      function Image (Node : access Identifier_Type) return String;


      overriding
      function Child_Count (Node : access Identifier_Type) return Natural;
      overriding
      procedure Get_Child (Node  : access Identifier_Type;
                           Index : Natural;
                           Exists : out Boolean;
                           Result : out GPR_Node);

      overriding
      procedure Print (Node  : access Identifier_Type;
                       Level : Natural := 0);

      overriding procedure Destroy
        (Node : access Identifier_Type);





   

   

   --
   --  Num_Literal
   --

   type Num_Literal_Type is 
      new Single_Tok_Node_Type with private;


      overriding
      function Kind (Node : access Num_Literal_Type) return GPR_Node_Type_Kind;
      overriding
      function Kind_Name (Node : access Num_Literal_Type) return String;
      overriding
      function Image (Node : access Num_Literal_Type) return String;


      overriding
      function Child_Count (Node : access Num_Literal_Type) return Natural;
      overriding
      procedure Get_Child (Node  : access Num_Literal_Type;
                           Index : Natural;
                           Exists : out Boolean;
                           Result : out GPR_Node);

      overriding
      procedure Print (Node  : access Num_Literal_Type;
                       Level : Natural := 0);

      overriding procedure Destroy
        (Node : access Num_Literal_Type);





   

   

   --
   --  String_Literal
   --

   type String_Literal_Type is 
      new Single_Tok_Node_Type with private;


      overriding
      function Kind (Node : access String_Literal_Type) return GPR_Node_Type_Kind;
      overriding
      function Kind_Name (Node : access String_Literal_Type) return String;
      overriding
      function Image (Node : access String_Literal_Type) return String;


      overriding
      function Child_Count (Node : access String_Literal_Type) return Natural;
      overriding
      procedure Get_Child (Node  : access String_Literal_Type;
                           Index : Natural;
                           Exists : out Boolean;
                           Result : out GPR_Node);

      overriding
      procedure Print (Node  : access String_Literal_Type;
                       Level : Natural := 0);

      overriding procedure Destroy
        (Node : access String_Literal_Type);





   

   

   --
   --  Expr_List
   --

   type Expr_List_Type is 
      new GPR_Node_Type with private;


      overriding
      function Kind (Node : access Expr_List_Type) return GPR_Node_Type_Kind;
      overriding
      function Kind_Name (Node : access Expr_List_Type) return String;
      overriding
      function Image (Node : access Expr_List_Type) return String;


      overriding
      function Child_Count (Node : access Expr_List_Type) return Natural;
      overriding
      procedure Get_Child (Node  : access Expr_List_Type;
                           Index : Natural;
                           Exists : out Boolean;
                           Result : out GPR_Node);

      overriding
      procedure Print (Node  : access Expr_List_Type;
                       Level : Natural := 0);

      overriding procedure Destroy
        (Node : access Expr_List_Type);


       function F_Exprs
         (Node : Expr_List) return List_Term_List;
       



   

   

   --
   --  External
   --

   type External_Type is 
      new GPR_Node_Type with private;


      overriding
      function Kind (Node : access External_Type) return GPR_Node_Type_Kind;
      overriding
      function Kind_Name (Node : access External_Type) return String;
      overriding
      function Image (Node : access External_Type) return String;


      overriding
      function Child_Count (Node : access External_Type) return Natural;
      overriding
      procedure Get_Child (Node  : access External_Type;
                           Index : Natural;
                           Exists : out Boolean;
                           Result : out GPR_Node);

      overriding
      procedure Print (Node  : access External_Type;
                       Level : Natural := 0);

      overriding procedure Destroy
        (Node : access External_Type);





   

   

   --
   --  External_As_List
   --

   type External_As_List_Type is 
      new GPR_Node_Type with private;


      overriding
      function Kind (Node : access External_As_List_Type) return GPR_Node_Type_Kind;
      overriding
      function Kind_Name (Node : access External_As_List_Type) return String;
      overriding
      function Image (Node : access External_As_List_Type) return String;


      overriding
      function Child_Count (Node : access External_As_List_Type) return Natural;
      overriding
      procedure Get_Child (Node  : access External_As_List_Type;
                           Index : Natural;
                           Exists : out Boolean;
                           Result : out GPR_Node);

      overriding
      procedure Print (Node  : access External_As_List_Type;
                       Level : Natural := 0);

      overriding procedure Destroy
        (Node : access External_As_List_Type);





   

   

   --
   --  External_Name
   --

   type External_Name_Type is 
      new GPR_Node_Type with private;


      overriding
      function Kind (Node : access External_Name_Type) return GPR_Node_Type_Kind;
      overriding
      function Kind_Name (Node : access External_Name_Type) return String;
      overriding
      function Image (Node : access External_Name_Type) return String;


      overriding
      function Child_Count (Node : access External_Name_Type) return Natural;
      overriding
      procedure Get_Child (Node  : access External_Name_Type;
                           Index : Natural;
                           Exists : out Boolean;
                           Result : out GPR_Node);

      overriding
      procedure Print (Node  : access External_Name_Type;
                       Level : Natural := 0);

      overriding procedure Destroy
        (Node : access External_Name_Type);





   

   

   --
   --  External_Reference
   --

   type External_Reference_Type is 
      new GPR_Node_Type with private;


      overriding
      function Kind (Node : access External_Reference_Type) return GPR_Node_Type_Kind;
      overriding
      function Kind_Name (Node : access External_Reference_Type) return String;
      overriding
      function Image (Node : access External_Reference_Type) return String;


      overriding
      function Child_Count (Node : access External_Reference_Type) return Natural;
      overriding
      procedure Get_Child (Node  : access External_Reference_Type;
                           Index : Natural;
                           Exists : out Boolean;
                           Result : out GPR_Node);

      overriding
      procedure Print (Node  : access External_Reference_Type;
                       Level : Natural := 0);

      overriding procedure Destroy
        (Node : access External_Reference_Type);


       function F_Kind
         (Node : External_Reference) return GPR_Node;
       
       function F_String_Lit
         (Node : External_Reference) return String_Literal;
       
       function F_Expr
         (Node : External_Reference) return Term_List;
       



   

   

   --
   --  Others_Designator
   --

   type Others_Designator_Type is 
      new GPR_Node_Type with private;


      overriding
      function Kind (Node : access Others_Designator_Type) return GPR_Node_Type_Kind;
      overriding
      function Kind_Name (Node : access Others_Designator_Type) return String;
      overriding
      function Image (Node : access Others_Designator_Type) return String;


      overriding
      function Child_Count (Node : access Others_Designator_Type) return Natural;
      overriding
      procedure Get_Child (Node  : access Others_Designator_Type;
                           Index : Natural;
                           Exists : out Boolean;
                           Result : out GPR_Node);

      overriding
      procedure Print (Node  : access Others_Designator_Type;
                       Level : Natural := 0);

      overriding procedure Destroy
        (Node : access Others_Designator_Type);





   

   

   --
   --  Package_Decl
   --

   type Package_Decl_Type is 
      new GPR_Node_Type with private;


      overriding
      function Kind (Node : access Package_Decl_Type) return GPR_Node_Type_Kind;
      overriding
      function Kind_Name (Node : access Package_Decl_Type) return String;
      overriding
      function Image (Node : access Package_Decl_Type) return String;


      overriding
      function Child_Count (Node : access Package_Decl_Type) return Natural;
      overriding
      procedure Get_Child (Node  : access Package_Decl_Type;
                           Index : Natural;
                           Exists : out Boolean;
                           Result : out GPR_Node);

      overriding
      procedure Print (Node  : access Package_Decl_Type;
                       Level : Natural := 0);

      overriding procedure Destroy
        (Node : access Package_Decl_Type);


       function F_Pkg_Name
         (Node : Package_Decl) return Identifier;
       
       function F_Pkg_Spec
         (Node : Package_Decl) return GPR_Node;
       



   

   

   --
   --  Package_Extension
   --

   type Package_Extension_Type is 
      new GPR_Node_Type with private;


      overriding
      function Kind (Node : access Package_Extension_Type) return GPR_Node_Type_Kind;
      overriding
      function Kind_Name (Node : access Package_Extension_Type) return String;
      overriding
      function Image (Node : access Package_Extension_Type) return String;


      overriding
      function Child_Count (Node : access Package_Extension_Type) return Natural;
      overriding
      procedure Get_Child (Node  : access Package_Extension_Type;
                           Index : Natural;
                           Exists : out Boolean;
                           Result : out GPR_Node);

      overriding
      procedure Print (Node  : access Package_Extension_Type;
                       Level : Natural := 0);

      overriding procedure Destroy
        (Node : access Package_Extension_Type);


       function F_Prj_Name
         (Node : Package_Extension) return Identifier;
       
       function F_Pkg_Name
         (Node : Package_Extension) return Identifier;
       



   

   

   --
   --  Package_Renaming
   --

   type Package_Renaming_Type is 
      new GPR_Node_Type with private;


      overriding
      function Kind (Node : access Package_Renaming_Type) return GPR_Node_Type_Kind;
      overriding
      function Kind_Name (Node : access Package_Renaming_Type) return String;
      overriding
      function Image (Node : access Package_Renaming_Type) return String;


      overriding
      function Child_Count (Node : access Package_Renaming_Type) return Natural;
      overriding
      procedure Get_Child (Node  : access Package_Renaming_Type;
                           Index : Natural;
                           Exists : out Boolean;
                           Result : out GPR_Node);

      overriding
      procedure Print (Node  : access Package_Renaming_Type;
                       Level : Natural := 0);

      overriding procedure Destroy
        (Node : access Package_Renaming_Type);


       function F_Prj_Name
         (Node : Package_Renaming) return Identifier;
       
       function F_Pkg_Name
         (Node : Package_Renaming) return Identifier;
       



   

   

   --
   --  Package_Spec
   --

   type Package_Spec_Type is 
      new GPR_Node_Type with private;


      overriding
      function Kind (Node : access Package_Spec_Type) return GPR_Node_Type_Kind;
      overriding
      function Kind_Name (Node : access Package_Spec_Type) return String;
      overriding
      function Image (Node : access Package_Spec_Type) return String;


      overriding
      function Child_Count (Node : access Package_Spec_Type) return Natural;
      overriding
      procedure Get_Child (Node  : access Package_Spec_Type;
                           Index : Natural;
                           Exists : out Boolean;
                           Result : out GPR_Node);

      overriding
      procedure Print (Node  : access Package_Spec_Type;
                       Level : Natural := 0);

      overriding procedure Destroy
        (Node : access Package_Spec_Type);


       function F_Extension
         (Node : Package_Spec) return Package_Extension;
       
       function F_Decls
         (Node : Package_Spec) return List_GPR_Node;
       
       function F_End_Name
         (Node : Package_Spec) return Identifier;
       



   

   

   --
   --  Project
   --

   type Project_Type is 
      new GPR_Node_Type with private;


      overriding
      function Kind (Node : access Project_Type) return GPR_Node_Type_Kind;
      overriding
      function Kind_Name (Node : access Project_Type) return String;
      overriding
      function Image (Node : access Project_Type) return String;


      overriding
      function Child_Count (Node : access Project_Type) return Natural;
      overriding
      procedure Get_Child (Node  : access Project_Type;
                           Index : Natural;
                           Exists : out Boolean;
                           Result : out GPR_Node);

      overriding
      procedure Print (Node  : access Project_Type;
                       Level : Natural := 0);

      overriding procedure Destroy
        (Node : access Project_Type);


       function F_Context_Clauses
         (Node : Project) return List_With_Decl;
       
       function F_Project_Decl
         (Node : Project) return Project_Declaration;
       



   

   

   --
   --  Project_Declaration
   --

   type Project_Declaration_Type is 
      new GPR_Node_Type with private;


      overriding
      function Kind (Node : access Project_Declaration_Type) return GPR_Node_Type_Kind;
      overriding
      function Kind_Name (Node : access Project_Declaration_Type) return String;
      overriding
      function Image (Node : access Project_Declaration_Type) return String;


      overriding
      function Child_Count (Node : access Project_Declaration_Type) return Natural;
      overriding
      procedure Get_Child (Node  : access Project_Declaration_Type;
                           Index : Natural;
                           Exists : out Boolean;
                           Result : out GPR_Node);

      overriding
      procedure Print (Node  : access Project_Declaration_Type;
                       Level : Natural := 0);

      overriding procedure Destroy
        (Node : access Project_Declaration_Type);


       function F_Qualifier
         (Node : Project_Declaration) return Project_Qualifier;
       
       function F_Project_Name
         (Node : Project_Declaration) return Expr;
       
       function F_Extension
         (Node : Project_Declaration) return Project_Extension;
       
       function F_Decls
         (Node : Project_Declaration) return List_GPR_Node;
       
       function F_End_Name
         (Node : Project_Declaration) return Expr;
       



   

   

   --
   --  Project_Extension
   --

   type Project_Extension_Type is 
      new GPR_Node_Type with private;


      overriding
      function Kind (Node : access Project_Extension_Type) return GPR_Node_Type_Kind;
      overriding
      function Kind_Name (Node : access Project_Extension_Type) return String;
      overriding
      function Image (Node : access Project_Extension_Type) return String;


      overriding
      function Child_Count (Node : access Project_Extension_Type) return Natural;
      overriding
      procedure Get_Child (Node  : access Project_Extension_Type;
                           Index : Natural;
                           Exists : out Boolean;
                           Result : out GPR_Node);

      overriding
      procedure Print (Node  : access Project_Extension_Type;
                       Level : Natural := 0);

      overriding procedure Destroy
        (Node : access Project_Extension_Type);


       function F_Is_All
         (Node : Project_Extension) return Boolean;
       
       function F_Path_Name
         (Node : Project_Extension) return String_Literal;
       



   

   

   --
   --  Project_Qualifier
   --

   type Project_Qualifier_Type is 
      new GPR_Node_Type with private;


      overriding
      function Kind (Node : access Project_Qualifier_Type) return GPR_Node_Type_Kind;
      overriding
      function Kind_Name (Node : access Project_Qualifier_Type) return String;
      overriding
      function Image (Node : access Project_Qualifier_Type) return String;


      overriding
      function Child_Count (Node : access Project_Qualifier_Type) return Natural;
      overriding
      procedure Get_Child (Node  : access Project_Qualifier_Type;
                           Index : Natural;
                           Exists : out Boolean;
                           Result : out GPR_Node);

      overriding
      procedure Print (Node  : access Project_Qualifier_Type;
                       Level : Natural := 0);

      overriding procedure Destroy
        (Node : access Project_Qualifier_Type);


       function F_Qualifier
         (Node : Project_Qualifier) return GPR_Node;
       



   

   

   --
   --  Project_Reference
   --

   type Project_Reference_Type is 
      new GPR_Node_Type with private;


      overriding
      function Kind (Node : access Project_Reference_Type) return GPR_Node_Type_Kind;
      overriding
      function Kind_Name (Node : access Project_Reference_Type) return String;
      overriding
      function Image (Node : access Project_Reference_Type) return String;


      overriding
      function Child_Count (Node : access Project_Reference_Type) return Natural;
      overriding
      procedure Get_Child (Node  : access Project_Reference_Type;
                           Index : Natural;
                           Exists : out Boolean;
                           Result : out GPR_Node);

      overriding
      procedure Print (Node  : access Project_Reference_Type;
                       Level : Natural := 0);

      overriding procedure Destroy
        (Node : access Project_Reference_Type);


       function F_Attr_Ref
         (Node : Project_Reference) return Attribute_Reference;
       



   

   

   --
   --  Qualifier_Names
   --

   type Qualifier_Names_Type is 
      new GPR_Node_Type with private;


      overriding
      function Kind (Node : access Qualifier_Names_Type) return GPR_Node_Type_Kind;
      overriding
      function Kind_Name (Node : access Qualifier_Names_Type) return String;
      overriding
      function Image (Node : access Qualifier_Names_Type) return String;


      overriding
      function Child_Count (Node : access Qualifier_Names_Type) return Natural;
      overriding
      procedure Get_Child (Node  : access Qualifier_Names_Type;
                           Index : Natural;
                           Exists : out Boolean;
                           Result : out GPR_Node);

      overriding
      procedure Print (Node  : access Qualifier_Names_Type;
                       Level : Natural := 0);

      overriding procedure Destroy
        (Node : access Qualifier_Names_Type);


       function F_Qualifier_Id1
         (Node : Qualifier_Names) return Identifier;
       
       function F_Qualifier_Id2
         (Node : Qualifier_Names) return Identifier;
       



   

   

   --
   --  String_Literal_At
   --

   type String_Literal_At_Type is 
      new GPR_Node_Type with private;


      overriding
      function Kind (Node : access String_Literal_At_Type) return GPR_Node_Type_Kind;
      overriding
      function Kind_Name (Node : access String_Literal_At_Type) return String;
      overriding
      function Image (Node : access String_Literal_At_Type) return String;


      overriding
      function Child_Count (Node : access String_Literal_At_Type) return Natural;
      overriding
      procedure Get_Child (Node  : access String_Literal_At_Type;
                           Index : Natural;
                           Exists : out Boolean;
                           Result : out GPR_Node);

      overriding
      procedure Print (Node  : access String_Literal_At_Type;
                       Level : Natural := 0);

      overriding procedure Destroy
        (Node : access String_Literal_At_Type);


       function F_Str_Lit
         (Node : String_Literal_At) return String_Literal;
       
       function F_At_Lit
         (Node : String_Literal_At) return Num_Literal;
       



   

   

   --
   --  Term_List
   --

   type Term_List_Type is 
      new GPR_Node_Type with private;


      overriding
      function Kind (Node : access Term_List_Type) return GPR_Node_Type_Kind;
      overriding
      function Kind_Name (Node : access Term_List_Type) return String;
      overriding
      function Image (Node : access Term_List_Type) return String;


      overriding
      function Child_Count (Node : access Term_List_Type) return Natural;
      overriding
      procedure Get_Child (Node  : access Term_List_Type;
                           Index : Natural;
                           Exists : out Boolean;
                           Result : out GPR_Node);

      overriding
      procedure Print (Node  : access Term_List_Type;
                       Level : Natural := 0);

      overriding procedure Destroy
        (Node : access Term_List_Type);


       function F_Terms
         (Node : Term_List) return List_GPR_Node;
       



   

   

   --
   --  Typed_String_Decl
   --

   type Typed_String_Decl_Type is 
      new GPR_Node_Type with private;


      overriding
      function Kind (Node : access Typed_String_Decl_Type) return GPR_Node_Type_Kind;
      overriding
      function Kind_Name (Node : access Typed_String_Decl_Type) return String;
      overriding
      function Image (Node : access Typed_String_Decl_Type) return String;


      overriding
      function Child_Count (Node : access Typed_String_Decl_Type) return Natural;
      overriding
      procedure Get_Child (Node  : access Typed_String_Decl_Type;
                           Index : Natural;
                           Exists : out Boolean;
                           Result : out GPR_Node);

      overriding
      procedure Print (Node  : access Typed_String_Decl_Type;
                       Level : Natural := 0);

      overriding procedure Destroy
        (Node : access Typed_String_Decl_Type);


       function F_Type_Id
         (Node : Typed_String_Decl) return Identifier;
       
       function F_String_Literals
         (Node : Typed_String_Decl) return List_String_Literal;
       



   

   

   --
   --  Variable_Decl
   --

   type Variable_Decl_Type is 
      new GPR_Node_Type with private;


      overriding
      function Kind (Node : access Variable_Decl_Type) return GPR_Node_Type_Kind;
      overriding
      function Kind_Name (Node : access Variable_Decl_Type) return String;
      overriding
      function Image (Node : access Variable_Decl_Type) return String;


      overriding
      function Child_Count (Node : access Variable_Decl_Type) return Natural;
      overriding
      procedure Get_Child (Node  : access Variable_Decl_Type;
                           Index : Natural;
                           Exists : out Boolean;
                           Result : out GPR_Node);

      overriding
      procedure Print (Node  : access Variable_Decl_Type;
                       Level : Natural := 0);

      overriding procedure Destroy
        (Node : access Variable_Decl_Type);


       function F_Var_Name
         (Node : Variable_Decl) return Identifier;
       
       function F_Var_Type
         (Node : Variable_Decl) return Expr;
       
       function F_Expr
         (Node : Variable_Decl) return Term_List;
       



   

   

   --
   --  Variable_Reference
   --

   type Variable_Reference_Type is 
      new GPR_Node_Type with private;


      overriding
      function Kind (Node : access Variable_Reference_Type) return GPR_Node_Type_Kind;
      overriding
      function Kind_Name (Node : access Variable_Reference_Type) return String;
      overriding
      function Image (Node : access Variable_Reference_Type) return String;


      overriding
      function Child_Count (Node : access Variable_Reference_Type) return Natural;
      overriding
      procedure Get_Child (Node  : access Variable_Reference_Type;
                           Index : Natural;
                           Exists : out Boolean;
                           Result : out GPR_Node);

      overriding
      procedure Print (Node  : access Variable_Reference_Type;
                       Level : Natural := 0);

      overriding procedure Destroy
        (Node : access Variable_Reference_Type);


       function F_Variable_Name1
         (Node : Variable_Reference) return Identifier;
       
       function F_Variable_Name2
         (Node : Variable_Reference) return Identifier;
       
       function F_Attribute_Ref
         (Node : Variable_Reference) return Attribute_Reference;
       



   

   

   --
   --  With_Decl
   --

   type With_Decl_Type is 
      new GPR_Node_Type with private;


      overriding
      function Kind (Node : access With_Decl_Type) return GPR_Node_Type_Kind;
      overriding
      function Kind_Name (Node : access With_Decl_Type) return String;
      overriding
      function Image (Node : access With_Decl_Type) return String;


      overriding
      function Child_Count (Node : access With_Decl_Type) return Natural;
      overriding
      procedure Get_Child (Node  : access With_Decl_Type;
                           Index : Natural;
                           Exists : out Boolean;
                           Result : out GPR_Node);

      overriding
      procedure Print (Node  : access With_Decl_Type;
                       Level : Natural := 0);

      overriding procedure Destroy
        (Node : access With_Decl_Type);


       function F_Is_Limited
         (Node : With_Decl) return Boolean;
       
       function F_Path_Names
         (Node : With_Decl) return List_String_Literal;
       




private

   

   

   type Abstract_Present_Type is 
      new GPR_Node_Type with

      null record;


      overriding
      function Lookup_Children (Node : access Abstract_Present_Type;
                                Sloc : Source_Location;
                                Snap : Boolean := False)
        return GPR_Node;

      package Abstract_Present_Alloc is
        new Tagged_Alloc (Abstract_Present_Type);


   

   

   type Attribute_Decl_Type is 
      new GPR_Node_Type with

      record
            F_Attr_Name : aliased GPR_Node
               := null;
            
            F_Attr_Index : aliased GPR_Node
               := null;
            
            F_Expr : aliased Term_List
               := null;
            
         

      end record;


      overriding
      function Lookup_Children (Node : access Attribute_Decl_Type;
                                Sloc : Source_Location;
                                Snap : Boolean := False)
        return GPR_Node;

      package Attribute_Decl_Alloc is
        new Tagged_Alloc (Attribute_Decl_Type);


   

   

   type Attribute_Reference_Type is 
      new GPR_Node_Type with

      record
            F_Attribute_Name : aliased Identifier
               := null;
            
            F_Attribute_Index : aliased GPR_Node
               := null;
            
         

      end record;


      overriding
      function Lookup_Children (Node : access Attribute_Reference_Type;
                                Sloc : Source_Location;
                                Snap : Boolean := False)
        return GPR_Node;

      package Attribute_Reference_Alloc is
        new Tagged_Alloc (Attribute_Reference_Type);


   

   

   type Case_Construction_Type is 
      new GPR_Node_Type with

      record
            F_Var_Ref : aliased Variable_Reference
               := null;
            
            F_Items : aliased List_Case_Item
               := null;
            
         

      end record;


      overriding
      function Lookup_Children (Node : access Case_Construction_Type;
                                Sloc : Source_Location;
                                Snap : Boolean := False)
        return GPR_Node;

      package Case_Construction_Alloc is
        new Tagged_Alloc (Case_Construction_Type);


   

   

   type Case_Item_Type is 
      new GPR_Node_Type with

      record
            F_Choice : aliased List_GPR_Node
               := null;
            
            F_Decls : aliased List_GPR_Node
               := null;
            
         

      end record;


      overriding
      function Lookup_Children (Node : access Case_Item_Type;
                                Sloc : Source_Location;
                                Snap : Boolean := False)
        return GPR_Node;

      package Case_Item_Alloc is
        new Tagged_Alloc (Case_Item_Type);


   

   

   type Compilation_Unit_Type is 
      new GPR_Node_Type with

      record
            F_Project : aliased Project
               := null;
            
         

      end record;


      overriding
      function Lookup_Children (Node : access Compilation_Unit_Type;
                                Sloc : Source_Location;
                                Snap : Boolean := False)
        return GPR_Node;

      package Compilation_Unit_Alloc is
        new Tagged_Alloc (Compilation_Unit_Type);


   

   

   type Empty_Decl_Type is 
      new GPR_Node_Type with

      null record;


      overriding
      function Lookup_Children (Node : access Empty_Decl_Type;
                                Sloc : Source_Location;
                                Snap : Boolean := False)
        return GPR_Node;

      package Empty_Decl_Alloc is
        new Tagged_Alloc (Empty_Decl_Type);


   

   

   type Expr_Type is abstract
      new GPR_Node_Type with

      null record;



   

   

   type Prefix_Type is 
      new Expr_Type with

      record
            F_Prefix : aliased Expr
               := null;
            
            F_Suffix : aliased Expr
               := null;
            
         

      end record;


      overriding
      function Lookup_Children (Node : access Prefix_Type;
                                Sloc : Source_Location;
                                Snap : Boolean := False)
        return GPR_Node;

      package Prefix_Alloc is
        new Tagged_Alloc (Prefix_Type);


   

   

   type Single_Tok_Node_Type is abstract
      new Expr_Type with

      record
            F_Tok : aliased Token
               := No_Token;
            
         

      end record;



   

   

   type Identifier_Type is 
      new Single_Tok_Node_Type with

      null record;


      overriding
      function Lookup_Children (Node : access Identifier_Type;
                                Sloc : Source_Location;
                                Snap : Boolean := False)
        return GPR_Node;

      package Identifier_Alloc is
        new Tagged_Alloc (Identifier_Type);


   

   

   type Num_Literal_Type is 
      new Single_Tok_Node_Type with

      null record;


      overriding
      function Lookup_Children (Node : access Num_Literal_Type;
                                Sloc : Source_Location;
                                Snap : Boolean := False)
        return GPR_Node;

      package Num_Literal_Alloc is
        new Tagged_Alloc (Num_Literal_Type);


   

   

   type String_Literal_Type is 
      new Single_Tok_Node_Type with

      null record;


      overriding
      function Lookup_Children (Node : access String_Literal_Type;
                                Sloc : Source_Location;
                                Snap : Boolean := False)
        return GPR_Node;

      package String_Literal_Alloc is
        new Tagged_Alloc (String_Literal_Type);


   

   

   type Expr_List_Type is 
      new GPR_Node_Type with

      record
            F_Exprs : aliased List_Term_List
               := null;
            
         

      end record;


      overriding
      function Lookup_Children (Node : access Expr_List_Type;
                                Sloc : Source_Location;
                                Snap : Boolean := False)
        return GPR_Node;

      package Expr_List_Alloc is
        new Tagged_Alloc (Expr_List_Type);


   

   

   type External_Type is 
      new GPR_Node_Type with

      null record;


      overriding
      function Lookup_Children (Node : access External_Type;
                                Sloc : Source_Location;
                                Snap : Boolean := False)
        return GPR_Node;

      package External_Alloc is
        new Tagged_Alloc (External_Type);


   

   

   type External_As_List_Type is 
      new GPR_Node_Type with

      null record;


      overriding
      function Lookup_Children (Node : access External_As_List_Type;
                                Sloc : Source_Location;
                                Snap : Boolean := False)
        return GPR_Node;

      package External_As_List_Alloc is
        new Tagged_Alloc (External_As_List_Type);


   

   

   type External_Name_Type is 
      new GPR_Node_Type with

      null record;


      overriding
      function Lookup_Children (Node : access External_Name_Type;
                                Sloc : Source_Location;
                                Snap : Boolean := False)
        return GPR_Node;

      package External_Name_Alloc is
        new Tagged_Alloc (External_Name_Type);


   

   

   type External_Reference_Type is 
      new GPR_Node_Type with

      record
            F_Kind : aliased GPR_Node
               := null;
            
            F_String_Lit : aliased String_Literal
               := null;
            
            F_Expr : aliased Term_List
               := null;
            
         

      end record;


      overriding
      function Lookup_Children (Node : access External_Reference_Type;
                                Sloc : Source_Location;
                                Snap : Boolean := False)
        return GPR_Node;

      package External_Reference_Alloc is
        new Tagged_Alloc (External_Reference_Type);


   

   

   type Others_Designator_Type is 
      new GPR_Node_Type with

      null record;


      overriding
      function Lookup_Children (Node : access Others_Designator_Type;
                                Sloc : Source_Location;
                                Snap : Boolean := False)
        return GPR_Node;

      package Others_Designator_Alloc is
        new Tagged_Alloc (Others_Designator_Type);


   

   

   type Package_Decl_Type is 
      new GPR_Node_Type with

      record
            F_Pkg_Name : aliased Identifier
               := null;
            
            F_Pkg_Spec : aliased GPR_Node
               := null;
            
         

      end record;


      overriding
      function Lookup_Children (Node : access Package_Decl_Type;
                                Sloc : Source_Location;
                                Snap : Boolean := False)
        return GPR_Node;

      package Package_Decl_Alloc is
        new Tagged_Alloc (Package_Decl_Type);


   

   

   type Package_Extension_Type is 
      new GPR_Node_Type with

      record
            F_Prj_Name : aliased Identifier
               := null;
            
            F_Pkg_Name : aliased Identifier
               := null;
            
         

      end record;


      overriding
      function Lookup_Children (Node : access Package_Extension_Type;
                                Sloc : Source_Location;
                                Snap : Boolean := False)
        return GPR_Node;

      package Package_Extension_Alloc is
        new Tagged_Alloc (Package_Extension_Type);


   

   

   type Package_Renaming_Type is 
      new GPR_Node_Type with

      record
            F_Prj_Name : aliased Identifier
               := null;
            
            F_Pkg_Name : aliased Identifier
               := null;
            
         

      end record;


      overriding
      function Lookup_Children (Node : access Package_Renaming_Type;
                                Sloc : Source_Location;
                                Snap : Boolean := False)
        return GPR_Node;

      package Package_Renaming_Alloc is
        new Tagged_Alloc (Package_Renaming_Type);


   

   

   type Package_Spec_Type is 
      new GPR_Node_Type with

      record
            F_Extension : aliased Package_Extension
               := null;
            
            F_Decls : aliased List_GPR_Node
               := null;
            
            F_End_Name : aliased Identifier
               := null;
            
         

      end record;


      overriding
      function Lookup_Children (Node : access Package_Spec_Type;
                                Sloc : Source_Location;
                                Snap : Boolean := False)
        return GPR_Node;

      package Package_Spec_Alloc is
        new Tagged_Alloc (Package_Spec_Type);


   

   

   type Project_Type is 
      new GPR_Node_Type with

      record
            F_Context_Clauses : aliased List_With_Decl
               := null;
            
            F_Project_Decl : aliased Project_Declaration
               := null;
            
         

      end record;


      overriding
      function Lookup_Children (Node : access Project_Type;
                                Sloc : Source_Location;
                                Snap : Boolean := False)
        return GPR_Node;

      package Project_Alloc is
        new Tagged_Alloc (Project_Type);


   

   

   type Project_Declaration_Type is 
      new GPR_Node_Type with

      record
            F_Qualifier : aliased Project_Qualifier
               := null;
            
            F_Project_Name : aliased Expr
               := null;
            
            F_Extension : aliased Project_Extension
               := null;
            
            F_Decls : aliased List_GPR_Node
               := null;
            
            F_End_Name : aliased Expr
               := null;
            
         

      end record;


      overriding
      function Lookup_Children (Node : access Project_Declaration_Type;
                                Sloc : Source_Location;
                                Snap : Boolean := False)
        return GPR_Node;

      package Project_Declaration_Alloc is
        new Tagged_Alloc (Project_Declaration_Type);


   

   

   type Project_Extension_Type is 
      new GPR_Node_Type with

      record
            F_Is_All : aliased Boolean
               := false;
            
            F_Path_Name : aliased String_Literal
               := null;
            
         

      end record;


      overriding
      function Lookup_Children (Node : access Project_Extension_Type;
                                Sloc : Source_Location;
                                Snap : Boolean := False)
        return GPR_Node;

      package Project_Extension_Alloc is
        new Tagged_Alloc (Project_Extension_Type);


   

   

   type Project_Qualifier_Type is 
      new GPR_Node_Type with

      record
            F_Qualifier : aliased GPR_Node
               := null;
            
         

      end record;


      overriding
      function Lookup_Children (Node : access Project_Qualifier_Type;
                                Sloc : Source_Location;
                                Snap : Boolean := False)
        return GPR_Node;

      package Project_Qualifier_Alloc is
        new Tagged_Alloc (Project_Qualifier_Type);


   

   

   type Project_Reference_Type is 
      new GPR_Node_Type with

      record
            F_Attr_Ref : aliased Attribute_Reference
               := null;
            
         

      end record;


      overriding
      function Lookup_Children (Node : access Project_Reference_Type;
                                Sloc : Source_Location;
                                Snap : Boolean := False)
        return GPR_Node;

      package Project_Reference_Alloc is
        new Tagged_Alloc (Project_Reference_Type);


   

   

   type Qualifier_Names_Type is 
      new GPR_Node_Type with

      record
            F_Qualifier_Id1 : aliased Identifier
               := null;
            
            F_Qualifier_Id2 : aliased Identifier
               := null;
            
         

      end record;


      overriding
      function Lookup_Children (Node : access Qualifier_Names_Type;
                                Sloc : Source_Location;
                                Snap : Boolean := False)
        return GPR_Node;

      package Qualifier_Names_Alloc is
        new Tagged_Alloc (Qualifier_Names_Type);


   

   

   type String_Literal_At_Type is 
      new GPR_Node_Type with

      record
            F_Str_Lit : aliased String_Literal
               := null;
            
            F_At_Lit : aliased Num_Literal
               := null;
            
         

      end record;


      overriding
      function Lookup_Children (Node : access String_Literal_At_Type;
                                Sloc : Source_Location;
                                Snap : Boolean := False)
        return GPR_Node;

      package String_Literal_At_Alloc is
        new Tagged_Alloc (String_Literal_At_Type);


   

   

   type Term_List_Type is 
      new GPR_Node_Type with

      record
            F_Terms : aliased List_GPR_Node
               := null;
            
         

      end record;


      overriding
      function Lookup_Children (Node : access Term_List_Type;
                                Sloc : Source_Location;
                                Snap : Boolean := False)
        return GPR_Node;

      package Term_List_Alloc is
        new Tagged_Alloc (Term_List_Type);


   

   

   type Typed_String_Decl_Type is 
      new GPR_Node_Type with

      record
            F_Type_Id : aliased Identifier
               := null;
            
            F_String_Literals : aliased List_String_Literal
               := null;
            
         

      end record;


      overriding
      function Lookup_Children (Node : access Typed_String_Decl_Type;
                                Sloc : Source_Location;
                                Snap : Boolean := False)
        return GPR_Node;

      package Typed_String_Decl_Alloc is
        new Tagged_Alloc (Typed_String_Decl_Type);


   

   

   type Variable_Decl_Type is 
      new GPR_Node_Type with

      record
            F_Var_Name : aliased Identifier
               := null;
            
            F_Var_Type : aliased Expr
               := null;
            
            F_Expr : aliased Term_List
               := null;
            
         

      end record;


      overriding
      function Lookup_Children (Node : access Variable_Decl_Type;
                                Sloc : Source_Location;
                                Snap : Boolean := False)
        return GPR_Node;

      package Variable_Decl_Alloc is
        new Tagged_Alloc (Variable_Decl_Type);


   

   

   type Variable_Reference_Type is 
      new GPR_Node_Type with

      record
            F_Variable_Name1 : aliased Identifier
               := null;
            
            F_Variable_Name2 : aliased Identifier
               := null;
            
            F_Attribute_Ref : aliased Attribute_Reference
               := null;
            
         

      end record;


      overriding
      function Lookup_Children (Node : access Variable_Reference_Type;
                                Sloc : Source_Location;
                                Snap : Boolean := False)
        return GPR_Node;

      package Variable_Reference_Alloc is
        new Tagged_Alloc (Variable_Reference_Type);


   

   

   type With_Decl_Type is 
      new GPR_Node_Type with

      record
            F_Is_Limited : aliased Boolean
               := false;
            
            F_Path_Names : aliased List_String_Literal
               := null;
            
         

      end record;


      overriding
      function Lookup_Children (Node : access With_Decl_Type;
                                Sloc : Source_Location;
                                Snap : Boolean := False)
        return GPR_Node;

      package With_Decl_Alloc is
        new Tagged_Alloc (With_Decl_Type);



   

   

   package Lists_Case_Item is new List
     (Node_Type   => Case_Item_Type,
      Node_Access => Case_Item);

   type List_Case_Item_Type is
      new Lists_Case_Item.List_Type with null record;

   type List_Case_Item_Access is access all List_Case_Item_Type;

   package List_Case_Item_Alloc is
     new Tagged_Alloc (List_Case_Item_Type);

   function Get
     (Node    : List_Case_Item;
      Index   : Natural;
      Or_Null : Boolean := False) return GPR_Node
   is
     (if Index < Node.Child_Count
      then GPR_Node (Lists_Case_Item.Node_Vectors.Get_At_Index (Node.Vec, Index))
      else (if Or_Null then null else raise Property_Error));


   

   

   package Lists_GPR_Node is new List
     (Node_Type   => GPR_Node_Type,
      Node_Access => GPR_Node);

   type List_GPR_Node_Type is
      new Lists_GPR_Node.List_Type with null record;

   type List_GPR_Node_Access is access all List_GPR_Node_Type;

   package List_GPR_Node_Alloc is
     new Tagged_Alloc (List_GPR_Node_Type);

   function Get
     (Node    : List_GPR_Node;
      Index   : Natural;
      Or_Null : Boolean := False) return GPR_Node
   is
     (if Index < Node.Child_Count
      then GPR_Node (Lists_GPR_Node.Node_Vectors.Get_At_Index (Node.Vec, Index))
      else (if Or_Null then null else raise Property_Error));


   

   

   package Lists_String_Literal is new List
     (Node_Type   => String_Literal_Type,
      Node_Access => String_Literal);

   type List_String_Literal_Type is
      new Lists_String_Literal.List_Type with null record;

   type List_String_Literal_Access is access all List_String_Literal_Type;

   package List_String_Literal_Alloc is
     new Tagged_Alloc (List_String_Literal_Type);

   function Get
     (Node    : List_String_Literal;
      Index   : Natural;
      Or_Null : Boolean := False) return GPR_Node
   is
     (if Index < Node.Child_Count
      then GPR_Node (Lists_String_Literal.Node_Vectors.Get_At_Index (Node.Vec, Index))
      else (if Or_Null then null else raise Property_Error));


   

   

   package Lists_Term_List is new List
     (Node_Type   => Term_List_Type,
      Node_Access => Term_List);

   type List_Term_List_Type is
      new Lists_Term_List.List_Type with null record;

   type List_Term_List_Access is access all List_Term_List_Type;

   package List_Term_List_Alloc is
     new Tagged_Alloc (List_Term_List_Type);

   function Get
     (Node    : List_Term_List;
      Index   : Natural;
      Or_Null : Boolean := False) return GPR_Node
   is
     (if Index < Node.Child_Count
      then GPR_Node (Lists_Term_List.Node_Vectors.Get_At_Index (Node.Vec, Index))
      else (if Or_Null then null else raise Property_Error));


   

   

   package Lists_With_Decl is new List
     (Node_Type   => With_Decl_Type,
      Node_Access => With_Decl);

   type List_With_Decl_Type is
      new Lists_With_Decl.List_Type with null record;

   type List_With_Decl_Access is access all List_With_Decl_Type;

   package List_With_Decl_Alloc is
     new Tagged_Alloc (List_With_Decl_Type);

   function Get
     (Node    : List_With_Decl;
      Index   : Natural;
      Or_Null : Boolean := False) return GPR_Node
   is
     (if Index < Node.Child_Count
      then GPR_Node (Lists_With_Decl.Node_Vectors.Get_At_Index (Node.Vec, Index))
      else (if Or_Null then null else raise Property_Error));



end GPR_Parser.AST.Types;
