
------------------------------------------------------------------------------
--                                                                          --
--                            GPR PROJECT PARSER                            --
--                                                                          --
--            Copyright (C) 2015-2016, Free Software Foundation, Inc.       --
--                                                                          --
-- This library is free software;  you can redistribute it and/or modify it --
-- under terms of the  GNU General Public License  as published by the Free --
-- Software  Foundation;  either version 3,  or (at your  option) any later --
-- version. This library is distributed in the hope that it will be useful, --
-- but WITHOUT ANY WARRANTY;  without even the implied warranty of MERCHAN- --
-- TABILITY or FITNESS FOR A PARTICULAR PURPOSE.                            --
--                                                                          --
-- As a special exception under Section 7 of GPL version 3, you are granted --
-- additional permissions described in the GCC Runtime Library Exception,   --
-- version 3.1, as published by the Free Software Foundation.               --
--                                                                          --
-- You should have received a copy of the GNU General Public License and    --
-- a copy of the GCC Runtime Library Exception along with this program;     --
-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --
-- <http://www.gnu.org/licenses/>.                                          --
--                                                                          --
------------------------------------------------------------------------------

--  DO NOT EDIT THIS IS AN AUTOGENERATED FILE




with Ada.Unchecked_Conversion;

with Interfaces.C; use Interfaces.C;

package body GPR_Parser.AST.C is

   ----------
   -- Wrap --
   ----------

   function Wrap (Token : Token_Type) return gpr_token is
      function Convert is new Ada.Unchecked_Conversion
        (Token_Data_Handler_Access, System.Address);

   begin
      if Token = No_Token then
         return (Token_Data   => System.Null_Address,
                 Token_Index  => -1,
                 Trivia_Index => -1,
                 others       => <>);
      end if;

      declare
         D : constant Token_Data_Type := Data (Token);
         K : Token_Kind := D.Kind;
      begin
         return (Token_Data   => Convert (Token.TDH),
                 Token_Index  => int (Token.Token),
                 Trivia_Index => int (Token.Trivia),
                 Kind         => K'Enum_Rep,
                 Text         => Wrap (D.Text),
                 Sloc_Range   => Wrap (D.Sloc_Range));
      end;
   end Wrap;

   ------------
   -- Unwrap --
   ------------

   function Unwrap (Token : gpr_token) return Token_Type is
      use System;

      function Convert is new Ada.Unchecked_Conversion
        (System.Address, Token_Data_Handler_Access);
   begin
      return (if Token.Token_Data = Null_Address
              then No_Token
              else (TDH    => Convert (Token.Token_Data),
                    Token  => Token_Index (Token.Token_Index),
                    Trivia => Token_Index (Token.Trivia_Index)));
   end Unwrap;

   



procedure gpr_gpr_node_array_dec_ref (A : GPR_Node_Array_Access) is
   A_Var : GPR_Node_Array_Access := A;
begin
   Dec_Ref (A_Var);
end gpr_gpr_node_array_dec_ref;



   



procedure gpr_lexical_env_array_dec_ref (A : Lexical_Env_Array_Access) is
   A_Var : Lexical_Env_Array_Access := A;
begin
   Dec_Ref (A_Var);
end gpr_lexical_env_array_dec_ref;



   function gpr_lexical_env_parent
     (Env : gpr_lexical_env)
      return gpr_lexical_env
   is
      E : constant AST_Envs.Lexical_Env := Unwrap (Env);
   begin
      return Wrap (E.Parent);
   end gpr_lexical_env_parent;

   function gpr_lexical_env_node
     (Env : gpr_lexical_env)
      return gpr_base_node
   is
      E : constant AST_Envs.Lexical_Env := Unwrap (Env);
   begin
      return Wrap (E.Node);
   end gpr_lexical_env_node;

   function gpr_lexical_env_get
     (Env  : gpr_lexical_env;
      Name : gpr_text)
      return Env_Element_Array_Access
   is
      E : constant AST_Envs.Lexical_Env := Unwrap (Env);
   begin
      --  TODO??? The root environment is not tied to any node, so we cannot
      --  get a symbol to look it up. We should probably solve this
      --  automatically creating an anonymous unit to embed the root
      --  environment.
      if E.Node = null then
         raise Property_Error with "LexicalEnv.Get on null LexicalEnv";
      end if;

      declare
         U : constant Analysis_Unit_Interface := E.Node.Unit;
         N : constant Symbol_Type := Unwrap (U, Name);
      begin
         return Create (if N = null
                        then (1 .. 0 => <>)
                        else AST_Envs.Get (E, N));
      end;
   end gpr_lexical_env_get;

   procedure gpr_lexical_env_dec_ref
     (Env : gpr_lexical_env)
   is
      E : AST_Envs.Lexical_Env := Unwrap (Env);
   begin
      Dec_Ref (E);
   end gpr_lexical_env_dec_ref;

end GPR_Parser.AST.C;
