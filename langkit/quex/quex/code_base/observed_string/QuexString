#ifndef __QUEX_INCLUDE_GUARD__OBSERVED_STRING__QUEX_STRING
#define __QUEX_INCLUDE_GUARD__OBSERVED_STRING__QUEX_STRING
/*  
 *  [ y == 23 ) { print 34; }]
 *    |    |      |     |
 *    |    |      |     \.. str0
 *    |    |      \........ str1
 *    |    \............... str2
 *    \.................... str3
 *
 *  QuexStrings are located in token.
 *
 * /                   
typedef struct {
    QUEX_TYPE_CHARACTER* begin;
    QUEX_TYPE_CHARACTER* end;
} QuexString; 

QuexString_construct(QuexString*, ...);
QuexString_destruct(QuexString*);
QuexString_strcmp(QuexString*, QUEX_TYPE_CHARACTER*);
QuexString_strcmpx(QuexString*, QUEX_TYPE_CHARACTER*);
QuexString_strlen(QuexString*);
QuexString_find(QuexString*, QUEX_TYPE_CHARACTER*);
QuexString_findx(QuexString*, QuexString*);
QuexString_atoi(QuexString*);
QuexString_atof(QuexString*);


typedef struct QuexStringPointerList_tag* next_list {
    QuexString** begin;
    QuexString** end;
    QuexString** memory_end;

    struct QuexStringPointerList_tag* next_list;
} QuexStringPointerList;

QuexStringPointerList_append(QuexStringPointerList*, QuexString*);
QuexStringPointerList_destruct(QuexStringPointerList*);

typedef struct {
   QuexStringPointerList  head;
} QuexStringObserver;

QuexStringObserver_observe(QuexStringObserver*, QuexString*);
QuexStringObserver_release(QuexStringObserver*, QuexString*);
QuexStringObserver_relocate(QuexStringObserver*);


int
QuexString_cmp(QuexString* A, AStr* B)
{
   QUEX_TYPE_CHARACTER* it0 = A->begin;
   QUEX_TYPE_CHARACTER* it0 = A->begin;
   QUEX_TYPE_CHARACTER* it1 = B->begin;
   QUEX_TYPE_CHARACTER* it1 = B->begin;

    for(; *it0 == *it1; ++it0, ++it1) {
        /* Both letters are the same and == 0?
         * => both reach terminall zero without being different. */
        if( *it0 == 0 ) return 0;
    }
    return (size_t)(*it0) - (size_t)(*it1);
}

QuexString*
QuexString_construct(QuexString*           qstr,   QuexStringObserver*  observer, 
                     QUEX_TYPE_CHARACTER*  LBegin, QUEX_TYPE_CHARACTER* LEnd)
{
    if( me->end == me->memory_end ) { 
        QuexStringObserver_get_new_list();
    }
    qstr->begin = LBegin;
    qstr->end   = LEnd;
    me->end     = qstr;
    ++(me->end);
}

QuexStringObserver_StringList_new()
{
    QuexStringList* result   = MemMan_QuexStringList_allocate();
    result->begin      = MemMan_QstrArray_allocate();
    result->end        = result->begin;
    result->memory_end = result->begin + size;
}

#endif /* __QUEX_INCLUDE_GUARD__OBSERVED_STRING__QUEX_STRING */
