#ifdef    QUEX_OPTION_COMPUTED_GOTOS_DISABLED
#   undef QUEX_OPTION_COMPUTED_GOTOS
#endif
#ifdef    QUEX_OPTION_BUFFER_BASED_ANALYZIS_DISABLED
#   undef QUEX_OPTION_BUFFER_BASED_ANALYZIS
#endif
#ifdef    __QUEX_OPTION_ON_ENTRY_HANDLER_PRESENT_DISABLED
#   undef __QUEX_OPTION_ON_ENTRY_HANDLER_PRESENT
#endif
#ifdef    __QUEX_OPTION_ON_EXIT_HANDLER_PRESENT_DISABLED
#   undef __QUEX_OPTION_ON_EXIT_HANDLER_PRESENT
#endif
#ifdef    QUEX_OPTION_CONVERTER_ICONV_DISABLED
#   undef QUEX_OPTION_CONVERTER_ICONV
#endif
#ifdef    QUEX_OPTION_CONVERTER_ICU_DISABLED
#   undef QUEX_OPTION_CONVERTER_ICU
#endif
#ifdef     __QUEX_OPTION_SUPPORT_BEGIN_OF_LINE_PRE_CONDITION_DISABLED
#   undef  __QUEX_OPTION_SUPPORT_BEGIN_OF_LINE_PRE_CONDITION
#endif
#ifdef    QUEX_OPTION_INCLUDE_STACK_DISABLED
#   undef QUEX_OPTION_INCLUDE_STACK
#endif
#ifdef    QUEX_OPTION_STRING_ACCUMULATOR_DISABLED
#   undef QUEX_OPTION_STRING_ACCUMULATOR
#endif
#ifdef QUEX_OPTION_DEBUG_QUEX_PATTERN_MATCHES_DISABLED
#   undef QUEX_OPTION_DEBUG_QUEX_PATTERN_MATCHES
#endif
#ifdef    QUEX_OPTION_DEBUG_SHOW_MODES_DISABLED
#   undef QUEX_OPTION_DEBUG_SHOW_MODES
#endif
#ifdef    QUEX_OPTION_DEBUG_TOKEN_SENDING_DISABLED
#   undef QUEX_OPTION_DEBUG_TOKEN_SENDING
#endif
#if    ! defined(QUEX_OPTION_AUTOMATIC_ANALYSIS_CONTINUATION_ON_MODE_CHANGE_DISABLED) 
#        define QUEX_OPTION_AUTOMATIC_ANALYSIS_CONTINUATION_ON_MODE_CHANGE
#endif
#ifdef    QUEX_OPTION_RUNTIME_MODE_TRANSITION_CHECK_DISABLED
#   undef QUEX_OPTION_RUNTIME_MODE_TRANSITION_CHECK
#endif
#ifdef    QUEX_OPTION_RUNTIME_MODE_TRANSITION_CHECK_DISABLED
#   undef QUEX_OPTION_POST_CATEGORIZER
#endif
#ifdef    QUEX_OPTION_COLUMN_NUMBER_COUNTING_DISABLED
#   undef QUEX_OPTION_COLUMN_NUMBER_COUNTING
#endif
#ifdef    QUEX_OPTION_LINE_NUMBER_COUNTING_DISABLED
#   undef QUEX_OPTION_LINE_NUMBER_COUNTING
#endif

#if defined(QUEX_OPTION_TOKEN_POLICY_QUEUE)
#   define __QUEX_PURE_RETURN   do { return; } while(0)
#else
#   define __QUEX_PURE_RETURN   do { return __self_result_token_id; } while(0)
#endif

#if  ! defined (QUEX_SETTING_BUFFER_MIN_FALLBACK_N)
#   if ! defined (QUEX_SETTING_BUFFER_SIZE) 
#      error "QUEX_SETTING_BUFFER_SIZE not defined at this place."
    /* If your compiler brings you here to this position, then this may be because
     * you defined the QUEX_SETTING_BUFFER_SIZE with something different than just
     * an integer number. Indeed something like
     *
     *   #define QUEX_SETTING_BUFFER_SIZE  (size_t)4096
     *
     * would be propper, but does not allow to do some math. So, please erase whatever
     * is not a number in the definition (e.g. delete the '(size_t)' type cast.        */
#   elif      QUEX_SETTING_BUFFER_SIZE >= 1024
#      define QUEX_SETTING_BUFFER_MIN_FALLBACK_N  (256)
#   elif      QUEX_SETTING_BUFFER_SIZE >= 16
#      define QUEX_SETTING_BUFFER_MIN_FALLBACK_N  (size_t)(QUEX_SETTING_BUFFER_SIZE >> 5)
#   else
#      define QUEX_SETTING_BUFFER_MIN_FALLBACK_N  (0)
#   endif
#endif

/* Tokens may be 'stamped' with the line an column number automatically.
 * This happens by means of the option 
 *      
 *       QUEX_OPTION_TOKEN_STAMPING_WITH_LINE_AND_COLUMN_DISABLED
 *
 * It is active by default only for queue token policies, because after
 * a call to .receive(), the lexical analyzer maintains only the position
 * of the last token in the queue. The positions of other tokens would
 * not be accessible once they are in the queue. 
 * 
 * The token policy 'users_token' only communicates one token at a time
 * and the line and column numbers in the lexical analyzer are those
 * of the last token. Thus, in this case the tokens do not need to be 
 * stamped with the position in the file.                                */
#ifdef         QUEX_OPTION_TOKEN_STAMPING_WITH_LINE_AND_COLUMN_DISABLED
#    ifdef     QUEX_OPTION_TOKEN_STAMPING_WITH_LINE_AND_COLUMN
#        undef QUEX_OPTION_TOKEN_STAMPING_WITH_LINE_AND_COLUMN
#    endif
#else
#    ifndef    QUEX_OPTION_TOKEN_STAMPING_WITH_LINE_AND_COLUMN
#       define QUEX_OPTION_TOKEN_STAMPING_WITH_LINE_AND_COLUMN
#    endif
#endif

#ifdef  QUEX_OPTION_TOKEN_REPETITION_SUPPORT
#   define __QUEX_IF_TOKEN_REPETITION_SUPPORT(EXPRESSION)          EXPRESSION
#   define __QUEX_IF_TOKEN_REPETITION_SUPPORT_DISABLED(EXPRESSION) /* empty */
#else
#   define __QUEX_IF_TOKEN_REPETITION_SUPPORT(EXPRESSION)          /* empty */
#   define __QUEX_IF_TOKEN_REPETITION_SUPPORT_DISABLED(EXPRESSION) EXPRESSION
#endif

#if defined (QUEX_OPTION_TOKEN_POLICY_QUEUE)
#   define __QUEX_TYPE_ANALYZER_RETURN_VALUE            void
#   define __QUEX_RETURN                                return
#   define QUEX_SETTING_AFTER_SEND_CONTINUE_OR_RETURN() CONTINUE
#else 
#   define __QUEX_TYPE_ANALYZER_RETURN_VALUE            QUEX_TYPE_TOKEN_ID
#   define __QUEX_RETURN                                return __self_result_token_id
#   define QUEX_SETTING_AFTER_SEND_CONTINUE_OR_RETURN() RETURN
#endif

#if defined(QUEX_OPTION_CONVERTER_ICONV) || defined(QUEX_OPTION_CONVERTER_ICU)
#   ifndef    __QUEX_OPTION_CONVERTER
#      define __QUEX_OPTION_CONVERTER
#   endif
#   if defined(__QUEX_OPTION_ENGINE_RUNNING_ON_CODEC)
#      error "Cannot specify QUEX_OPTION_CONVERTER_ICU or QUEX_OPTION_CONVERTER_ICU if the engine is running directly on a codec."
#   endif
#endif
#if ! defined(QUEX_SETTING_BUFFER_FILLERS_CONVERTER_NEW)
#   if   defined (QUEX_OPTION_CONVERTER_ICONV)
#        define  QUEX_SETTING_BUFFER_FILLERS_CONVERTER_NEW  QUEX_NAME(Converter_IConv_new)
#   elif defined (QUEX_OPTION_CONVERTER_ICU)
#        define  QUEX_SETTING_BUFFER_FILLERS_CONVERTER_NEW  QUEX_NAME(Converter_ICU_new)
#   else
#        define  QUEX_SETTING_BUFFER_FILLERS_CONVERTER_NEW  QUEX_NAME(__Converter_EMPTY_new)
#   endif
#endif

#ifndef    __QUEX_OPTION_CONVERTER_HELPER
#   if    defined(QUEX_OPTION_INFORMATIVE_BUFFER_OVERFLOW_MESSAGE) \
       || defined(QUEX_OPTION_CONVERTER_ICU)                       \
       || defined(QUEX_OPTION_CONVERTER_ICONV) 
#   define __QUEX_OPTION_CONVERTER_HELPER
#   endif
#endif

#if defined (QUEX_OPTION_ASSERTS) && ! defined(__QUEX_OPTION_PLAIN_C)
#    define QUEX_TYPE_CHARACTER_POSITION     QUEX_NAME(MemoryPositionMimiker)
#else
#    define QUEX_TYPE_CHARACTER_POSITION     QUEX_TYPE_CHARACTER*
#endif

#if    defined(QUEX_OPTION_LINE_NUMBER_COUNTING)   \
    || defined(QUEX_OPTION_COLUMN_NUMBER_COUNTING) \
    || defined(QUEX_OPTION_INDENTATION_TRIGGER)       
#     define  __QUEX_OPTION_COUNTER
#     define  __QUEX_IF_COUNT(EXPRESSION)             EXPRESSION
#     define  __QUEX_IF_COUNT_IF(EXPRESSION)          if( EXPRESSION )
#     define  __QUEX_IF_COUNT_SHIFT_VALUES()  \
              __QUEX_COUNTER_SHIFT_COLUMNS(); \
              __QUEX_COUNTER_SHIFT_LINES();
#else
#     if defined(__QUEX_OPTION_COUNTER)  
#        undef   __QUEX_OPTION_COUNTER
#     endif
#     define  __QUEX_IF_COUNT(EXPRESSION)             /* empty */
#     define  __QUEX_IF_COUNT_IF(EXPRESSION)          /* empty */
#     define  __QUEX_IF_COUNT_SHIFT_VALUES()          /* empty */
#endif

#if defined(QUEX_OPTION_LINE_NUMBER_COUNTING)   
#   define     __QUEX_IF_COUNT_LINES(EXPRESSION)      EXPRESSION
#   define     __QUEX_IF_COUNT_LINES_IF(EXPRESSION)   if( EXPRESSION )
#   define     __QUEX_IF_COUNT_LINES_ADD(X)                      \
               do {                                              \
                   me->counter._line_number_at_end   += (X);     \
                   __quex_debug_counter();                       \
               } while(0) 
#   define     __QUEX_COUNTER_SHIFT_LINES() \
               me->counter._line_number_at_begin = me->counter._line_number_at_end; 

#else
#   define     __QUEX_IF_COUNT_LINES(EXPRESSION)      /* empty */
#   define     __QUEX_IF_COUNT_LINES_IF(EXPRESSION)   /* empty */
#   define     __QUEX_IF_COUNT_LINES_ADD(X)           /* empty */
#   define     __QUEX_COUNTER_SHIFT_LINES()           /* empty */
#endif

#if defined(QUEX_OPTION_COLUMN_NUMBER_COUNTING)   
#   define     __QUEX_IF_COUNT_COLUMNS(EXPRESSION)    EXPRESSION
#   define     __QUEX_IF_COUNT_COLUMNS_SET(X) \
               do {                                              \
                   me->counter._column_number_at_end   = (X);    \
                   __quex_debug_counter();                       \
               } while(0) 
#   define     __QUEX_IF_COUNT_COLUMNS_ADD(X) \
               do {                                              \
                   me->counter._column_number_at_end   += (X);   \
                   __quex_debug_counter();                       \
               } while(0) 
#   define     __QUEX_COUNTER_SHIFT_COLUMNS() \
               me->counter._column_number_at_begin = me->counter._column_number_at_end; 

#else
#   define     __QUEX_IF_COUNT_COLUMNS(EXPRESSION)     /* empty */
#   define     __QUEX_IF_COUNT_COLUMNS_SET(X)          /* empty */
#   define     __QUEX_IF_COUNT_COLUMNS_ADD(X)          /* empty */
#   define     __QUEX_COUNTER_SHIFT_COLUMNS()          /* empty */
#endif

#if defined(QUEX_OPTION_INDENTATION_TRIGGER)
#   ifndef    QUEX_OPTION_INDENTATION_DEFAULT_HANDLER_DISABLED
#      define QUEX_OPTION_INDENTATION_DEFAULT_HANDLER
#   endif
#   define    __QUEX_IF_COUNT_INDENTATION(EXPRESSION) EXPRESSION
#else
#   define    __QUEX_IF_COUNT_INDENTATION(EXPRESSION) /* empty */
#endif

/* Default Counter Rules */
#if ! defined(__QUEX_COUNTER_RULES)
    /* NOTE: 'x - x % 4' == 'x with the last two bits deleted'
     *                   == 'x & (~3)'                          */
#   if QUEX_SETTING_CHAR_CODEC == utf8
#       define __QUEX_COUNTER_RULES(counter, iterator)                    \
               switch( (int)(*iterator) ) {                               \
               case (int)(QUEX_TYPE_CHARACTER)'\t':                       \
                   (counter)._column_number_at_end &= (~(size_t)0x3) + 4; \
                   ++(iterator);                                          \
                   break;                                                 \
               case (int)(QUEX_TYPE_CHARACTER)'\n':                       \
                   (counter)._line_number_at_end   += 1;                  \
                   (counter)._column_number_at_end  = 1;                  \
                   ++(iterator);                                          \
                   break;                                                 \
               default:                                                   \
                   if     ( (*iterator & 0x80) == 0 ) { iterator += 1; } /* 1byte character */ \
                   /* NOT ( (*iterator & 0x40) == 0 ) { iterator += 2; }    2byte character */ \
                   else if( (*iterator & 0x20) == 0 ) { iterator += 2; } /* 3byte character */ \
                   else if( (*iterator & 0x10) == 0 ) { iterator += 3; } /* 3byte character */ \
                   else if( (*iterator & 0x08) == 0 ) { iterator += 4; } /* 4byte character */ \
                   else if( (*iterator & 0x04) == 0 ) { iterator += 5; } /* 5byte character */ \
                   else if( (*iterator & 0x02) == 0 ) { iterator += 6; } /* 6byte character */ \
                   else if( (*iterator & 0x01) == 0 ) { iterator += 7; } /* 7byte character */ \
                   else                               { iterator += 1; } /* default 1       */ \
                   (counter)._column_number_at_end += 1;                  \
                   break;                                                 \
               }
#   elif QUEX_SETTING_CHAR_CODEC == utf16
#       define __QUEX_COUNTER_RULES(counter, iterator) \
               switch( (int)(QUEX_TYPE_CHARACTER)(*iterator) ) {         \
               case (int)(QUEX_TYPE_CHARACTER)'\t':                      \
                   (counter)._column_number_at_end &= (~(size_t)0x3) + 4;\
                   ++(iterator);                            \
                   break;                                   \
               case (int)(QUEX_TYPE_CHARACTER)'\n':         \
                   (counter)._line_number_at_end  += 1;     \
                   (counter)._column_number_at_end  = 1;    \
                   ++(iterator);                            \
                   break;                                   \
               default:                                     \
                   if     ( *iterator < 0xD800 )  { iterator += 1; } /* 1 chunk character */  \
                   else if( *iterator > 0xDBFF )  { iterator += 1; } /* 1 chunk character */  \
                   else                           { iterator += 2; } /* 2 chunk character */  \
                   (counter)._column_number_at_end += 1;    \
                   break;                                   \
               }
#   else
#       define __QUEX_COUNTER_RULES(counter, iterator) \
               switch( (int)(*iterator) ) {                                      \
               case (int)(QUEX_TYPE_CHARACTER)'\t':    \
                   (counter)._column_number_at_end &= (~(size_t)0x3) + 4; break; \
               case (int)(QUEX_TYPE_CHARACTER)'\n':    \
                   (counter)._line_number_at_end   += 1;                         \
                   (counter)._column_number_at_end  = 1;                  break; \
               default:                                \
                   (counter)._column_number_at_end += 1;                  break; \
               }                                                                 \
               ++(iterator);
#   endif

#endif

/* Special Case MinGW: At the time of this writing (2009y09m23d) it does 
 * not support 'wchart_t'.                                                */
#if      (defined (__GLIBCPP__) || defined(__GLIBCXX__)) \
    && ! defined  (_GLIBCXX_USE_WCHAR_T)
#   define  __QUEX_OPTION_WCHAR_T_DISABLED
#endif
#ifndef     __QUEX_OPTION_WCHAR_T_DISABLED
#   define  __QUEX_OPTION_WCHAR_T
#endif

/* If you have a different setup, define the macros QUEX_SETTING_WCHAR_CODEC
 * and QUEX_SETTING_CHAR_CODEC before the inclusion of this file.
 *
 * NOTE: '8' stands for UTF8, '16' stands for UTF16, and '32' for UTF32.
 *       Do not add anything around those numbers, otherwise the macros
 *       will not trigger the right mappings.                             */
#if ! defined(QUEX_SETTING_WCHAR_CODEC)
#   if defined(_WIN32) || defined(_WIN64)
       /* Default: Map 'wchar' to 'utf16' */
#      define QUEX_SETTING_WCHAR_CODEC  16
#   else
       /* Default: Map 'wchar' to 'utf32' */
#      define QUEX_SETTING_WCHAR_CODEC  32
#   endif
#endif

/* Default: Map 'char' to 'utf8' */
#if ! defined(QUEX_SETTING_CHAR_CODEC)
#   define    QUEX_SETTING_CHAR_CODEC   utf8
#endif

#if ! defined(__QUEX_OPTION_PLAIN_C)
    /* Cannot/must not go through '__QUEX_APPEND'. QUEX_FUNCTION_PREFIX ends 
     * with '::'. No '##' is required for concatination.                     */
#   define QUEX_FUNCTION_DEF(NAME)                      NAME
#   define QUEX_FUNCTION(NAME)                          QUEX_FUNCTION_PREFIX NAME

#   define QUEX_SIGNATURE(CLASS, FUNCTION)              CLASS  ## :: ## FUNCTION
#   define QUEX_THIS_IS_ME(C)                           C* me = this;
#   define QUEX_MEMBERF(C, F)                           QUEX_SIGNATURE(C, F)()
#   define QUEX_MEMBERF1(C, F, ARG0)                    QUEX_SIGNATURE(C, F)(ARG0)
#   define QUEX_MEMBERF2(C, F, ARG0, ARG1)              QUEX_SIGNATURE(C, F)(ARG0, ARG1)
#   define QUEX_MEMBERF3(C, F, ARG0, ARG1, ARG2)        QUEX_SIGNATURE(C, F)(ARG0, ARG1, ARG2)
#   define QUEX_MEMBERF4(C, F, ARG0, ARG1, ARG2, ARG3)  QUEX_SIGNATURE(C, F)(ARG0, ARG1, ARG2, ARG3)
#else
    /* Go through '__QUEX_APPEND' to ensure macro expansion, before concatination. */
#   define QUEX_FUNCTION_DEF(NAME)                      __QUEX_APPEND(QUEX_FUNCTION_DEF_PREFIX, NAME)
#   define QUEX_FUNCTION(NAME)                          __QUEX_APPEND(QUEX_FUNCTION_PREFIX, NAME)

#   define QUEX_SIGNATURE(CLASS, FUNCTION)              CLASS    ## _ ## FUNCTION
#   define QUEX_THIS(C)                                 struct C ## _tag* me
#   define QUEX_THIS_IS_ME(C)                           /* Nothing To Do */
#   define QUEX_MEMBERF(C, F)                           QUEX_SIGNATURE(C, F)(QUEX_THIS(C))
#   define QUEX_MEMBERF1(C, F, ARG0)                    QUEX_SIGNATURE(C, F)(QUEX_THIS(C), ARG0)
#   define QUEX_MEMBERF2(C, F, ARG0, ARG1)              QUEX_SIGNATURE(C, F)(QUEX_THIS(C), ARG0, ARG1)
#   define QUEX_MEMBERF3(C, F, ARG0, ARG1, ARG2)        QUEX_SIGNATURE(C, F)(QUEX_THIS(C), ARG0, ARG1, ARG2)
#   define QUEX_MEMBERF4(C, F, ARG0, ARG1, ARG2, ARG3)  QUEX_SIGNATURE(C, F)(QUEX_THIS(C), ARG0, ARG1, ARG2, ARG3)
#endif

#define QUEX_A_MEMBERF (FUNCTION)                          QUEX_MEMBERF(QUEX_TYPE0_ANALYZER, FUNCTION)
#define QUEX_A_MEMBERF1(FUNCTION, ARG0)                    QUEX_MEMBERF1(QUEX_TYPE0_ANALYZER, FUNCTION, ARG0)
#define QUEX_A_MEMBERF2(FUNCTION, ARG0, ARG1)              QUEX_MEMBERF2(QUEX_TYPE0_ANALYZER, FUNCTION, ARG0, ARG1)
#define QUEX_A_MEMBERF3(FUNCTION, ARG0, ARG1, ARG2)        QUEX_MEMBERF3(QUEX_TYPE0_ANALYZER, FUNCTION, ARG0, ARG1, ARG2)
#define QUEX_A_MEMBERF4(FUNCTION, ARG0, ARG1, ARG2, ARG3)  QUEX_MEMBERF4(QUEX_TYPE0_ANALYZER, FUNCTION, ARG0, ARG1, ARG2, ARG3)
                                                           
#define QUEX_T_MEMBERF (FUNCTION)                          QUEX_MEMBERF(QUEX_NAME_COMPLETE_TOKEN, FUNCTION)
#define QUEX_T_MEMBERF1(FUNCTION, ARG0)                    QUEX_MEMBERF1(QUEX_NAME_COMPLETE_TOKEN, FUNCTION, ARG0)
#define QUEX_T_MEMBERF2(FUNCTION, ARG0, ARG1)              QUEX_MEMBERF2(QUEX_NAME_COMPLETE_TOKEN, FUNCTION, ARG0, ARG1)
#define QUEX_T_MEMBERF3(FUNCTION, ARG0, ARG1, ARG2)        QUEX_MEMBERF3(QUEX_NAME_COMPLETE_TOKEN, FUNCTION, ARG0, ARG1, ARG2)
#define QUEX_T_MEMBERF4(FUNCTION, ARG0, ARG1, ARG2, ARG3)  QUEX_MEMBERF4(QUEX_NAME_COMPLETE_TOKEN, FUNCTION, ARG0, ARG1, ARG2, ARG3)

/* For function definitions, the 'namespace::' is not required. => QUEX_FUNCTION0 */
#define __QUEX_CONVERTER_CHAR_DEF(FROM, TO)    QUEX_FUNCTION_DEF(FROM ## _to_ ## TO ## _character)
#define __QUEX_CONVERTER_STRING_DEF(FROM, TO)  QUEX_FUNCTION_DEF(FROM ## _to_ ## TO)
#define QUEX_CONVERTER_CHAR_DEF(FROM, TO)      __QUEX_CONVERTER_CHAR_DEF(FROM, TO)
#define QUEX_CONVERTER_STRING_DEF(FROM, TO)    __QUEX_CONVERTER_STRING_DEF(FROM, TO)

/* For function calls, the 'namespace::' IS required. => QUEX_FUNCTION */
#define __QUEX_CONVERTER_CHAR(FROM, TO)    QUEX_FUNCTION(FROM ## _to_ ## TO ## _character)
#define __QUEX_CONVERTER_STRING(FROM, TO)  QUEX_FUNCTION(FROM ## _to_ ## TO)
#define QUEX_CONVERTER_CHAR(FROM, TO)      __QUEX_CONVERTER_CHAR(FROM, TO)
#define QUEX_CONVERTER_STRING(FROM, TO)    __QUEX_CONVERTER_STRING(FROM, TO)

/* If '--token-class-only' we need to restore overwritten macros. */
#define __QUEX_CONVERTER_CHAR_DEF_BACKUP(FROM, TO)    QUEX_FUNCTION_DEF(FROM ## _to_ ## TO ## _character)
#define __QUEX_CONVERTER_STRING_DEF_BACKUP(FROM, TO)  QUEX_FUNCTION_DEF(FROM ## _to_ ## TO)
#define QUEX_CONVERTER_CHAR_DEF_BACKUP(FROM, TO)      __QUEX_CONVERTER_CHAR_DEF(FROM, TO)
#define QUEX_CONVERTER_STRING_DEF_BACKUP(FROM, TO)    __QUEX_CONVERTER_STRING_DEF(FROM, TO)
#define __QUEX_CONVERTER_CHAR_BACKUP(FROM, TO)        QUEX_FUNCTION(FROM ## _to_ ## TO ## _character)
#define __QUEX_CONVERTER_STRING_BACKUP(FROM, TO)      QUEX_FUNCTION(FROM ## _to_ ## TO)
#define QUEX_CONVERTER_CHAR_BACKUP(FROM, TO)          __QUEX_CONVERTER_CHAR(FROM, TO)
#define QUEX_CONVERTER_STRING_BACKUP(FROM, TO)        __QUEX_CONVERTER_STRING(FROM, TO)

#if defined (QUEX_OPTION_ASSERTS) 
#   define __QUEX_IF_ASSERT(X)  X
#else
#   define __QUEX_IF_ASSERT(X)  /* Ignore */
#endif

