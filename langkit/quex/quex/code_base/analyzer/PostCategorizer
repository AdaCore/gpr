/* -*- C++ -*-   vim:set syntax=cpp:
 * __QUEX_INCLUDE_GUARD__ANALYZER__POST_CATEGORIZER may be undefined in case
 *    that multiple lexical analyzers are used.                                       */
#ifndef __QUEX_INCLUDE_GUARD__ANALYZER__POST_CATEGORIZER
#define __QUEX_INCLUDE_GUARD__ANALYZER__POST_CATEGORIZER

#ifdef  QUEX_OPTION_POST_CATEGORIZER

QUEX_NAMESPACE_MAIN_OPEN

    /*________________________________________________________________________________
     * Post Categorization of Lexemes:
     *
     * The implementation of the categorization tree is a little more efficient
     * than the STL map, since we do not iterator over the content.
     *________________________________________________________________________________*/
    typedef struct QUEX_NAME(DictionaryNode_tag) {
        /* Store the first character separately from the remainder. This might
         * help to avoid loading 'remotely allocated' strings into the cache if
         * they do not fit anyway (because of their first character).                 */ 
        QUEX_TYPE_CHARACTER          name_first_character;
        const QUEX_TYPE_CHARACTER*   name_remainder;

        QUEX_TYPE_TOKEN_ID           token_id;

        struct QUEX_NAME(DictionaryNode_tag)*   lesser;
        struct QUEX_NAME(DictionaryNode_tag)*   greater;

    } QUEX_NAME(DictionaryNode);

    typedef struct {
        QUEX_NAME(DictionaryNode)*  root;

#       ifndef __QUEX_OPTION_PLAIN_C
        void                enter(const QUEX_TYPE_CHARACTER* Lexeme, 
                                  const QUEX_TYPE_TOKEN_ID TokenID);
        void                remove(const QUEX_TYPE_CHARACTER* Lexeme);
        QUEX_TYPE_TOKEN_ID  get_token_id(const QUEX_TYPE_CHARACTER* Lexeme) const;
        void                clear();
        void                print_this();
#       endif

    } QUEX_NAME(Dictionary);

    QUEX_INLINE  QUEX_NAME(DictionaryNode)*  
    QUEX_NAME(PostCategorizer_allocate_node)(size_t RemainderL);

    QUEX_INLINE  void 
    QUEX_NAME(PostCategorizer_free_node)(QUEX_NAME(DictionaryNode)* node);

    QUEX_INLINE void
    QUEX_NAME(PostCategorizer_construct)(QUEX_NAME(Dictionary)* me);

    QUEX_INLINE void
    QUEX_NAME(PostCategorizer_destruct)(QUEX_NAME(Dictionary)* me);

    QUEX_INLINE int
    QUEX_NAME(PostCategorizer_compare)(QUEX_NAME(DictionaryNode)*  me, 
                                       QUEX_TYPE_CHARACTER         FirstCharacter, 
                                       const QUEX_TYPE_CHARACTER*  Remainder);

    QUEX_INLINE void
    QUEX_NAME(PostCategorizer_enter)(QUEX_NAME(Dictionary)*  me, 
                                     const QUEX_TYPE_CHARACTER*   EntryName, 
                                     QUEX_TYPE_TOKEN_ID           TokenID);

    QUEX_INLINE QUEX_NAME(DictionaryNode)*
    QUEX_NAME(PostCategorizer_find)(const QUEX_NAME(Dictionary)* me, 
                                    const QUEX_TYPE_CHARACTER*   EntryName);

    QUEX_INLINE void
    QUEX_NAME(PostCategorizer_insert)(QUEX_NAME(Dictionary)* me, 
                                      const QUEX_TYPE_CHARACTER*  EntryName, 
                                      QUEX_TYPE_TOKEN_ID          TokenID);

    QUEX_INLINE void
    QUEX_NAME(PostCategorizer_remove)(QUEX_NAME(Dictionary)* me, 
                                      const QUEX_TYPE_CHARACTER*  EntryName);

    QUEX_INLINE void
    QUEX_NAME(PostCategorizer_clear)(QUEX_NAME(Dictionary)* me);

    QUEX_INLINE void
    QUEX_NAME(PostCategorizer_print_this)(QUEX_NAME(Dictionary)* me);

QUEX_NAMESPACE_MAIN_CLOSE

#endif /* QUEX_OPTION_POST_CATEGORIZER */

#endif /* __QUEX_INCLUDE_GUARD__ANALYZER__POSTCATEGORIZER */
