/* -*- C++ -*- vim:set syntax=cpp: 
 * (C) Frank-Rene Schaefer    
 * ABSOLUTELY NO WARRANTY                    */
#ifndef __QUEX_INCLUDE_GUARD__AUX_STRING_I
#define __QUEX_INCLUDE_GUARD__AUX_STRING_I

#include <quex/code_base/definitions>

#ifndef  QUEX_CHARACTER_CONVERTER_DECLARED
#    error "A character converter must have been included before this file." 
/*   This file is unable to include the character converters since they 
 *   may change or may even be autogenerated. So, wheresover this fils is 
 *   included, a converter file must have been included before.                
 *   
 *   Consider files in "code_base/converter_helper/"                         */
#endif

QUEX_NAMESPACE_MAIN_OPEN

QUEX_INLINE size_t 
QUEX_NAME(strlen)(const QUEX_TYPE_CHARACTER* Str)
{
    const QUEX_TYPE_CHARACTER* iterator = Str;
    while( *iterator != 0 ) ++iterator; 
    return (size_t)(iterator - Str);
}

QUEX_INLINE size_t 
QUEX_NAME(strcmp)(const QUEX_TYPE_CHARACTER* it0, 
                  const QUEX_TYPE_CHARACTER* it1)
{
    for(; *it0 == *it1; ++it0, ++it1) {
        /* Both letters are the same and == 0?
         * => both reach terminall zero without being different. */
        if( *it0 == 0 ) return 0;
    }
    return (size_t)(*it0) - (size_t)(*it1);
}

QUEX_INLINE void
QUEX_NAME(to_utf8)(const QUEX_TYPE_CHARACTER** source_p, const QUEX_TYPE_CHARACTER* SourceEnd,
                   uint8_t**                   drain_p,  const uint8_t*             DrainEnd)
{
    QUEX_CONVERTER_STRING(QUEX_SETTING_CHARACTER_CODEC,utf8)(
                          source_p, SourceEnd, drain_p, DrainEnd);
}

QUEX_INLINE void
QUEX_NAME(to_utf16)(const QUEX_TYPE_CHARACTER** source_p, const QUEX_TYPE_CHARACTER* SourceEnd,
                    uint16_t**                  drain_p,  const uint16_t*            DrainEnd)
{
    QUEX_CONVERTER_STRING(QUEX_SETTING_CHARACTER_CODEC,utf16)(
                          source_p, SourceEnd, drain_p, DrainEnd);
}

QUEX_INLINE void
QUEX_NAME(to_utf32)(const QUEX_TYPE_CHARACTER** source_p, const QUEX_TYPE_CHARACTER* SourceEnd,
                    uint32_t**                  drain_p,  const uint32_t*            DrainEnd)
{
    QUEX_CONVERTER_STRING(QUEX_SETTING_CHARACTER_CODEC,utf32)(
                          source_p, SourceEnd, drain_p, DrainEnd);
}

QUEX_INLINE void
QUEX_NAME(to_char)(const QUEX_TYPE_CHARACTER** source_p, const QUEX_TYPE_CHARACTER* SourceEnd,
                   char**                      drain_p,  const char*                DrainEnd)
{
    QUEX_CONVERTER_STRING(QUEX_SETTING_CHARACTER_CODEC,char)(
                          source_p, SourceEnd, drain_p, DrainEnd);
}

#if ! defined(__QUEX_OPTION_WCHAR_T_DISABLED)
QUEX_INLINE void
QUEX_NAME(to_wchar)(const QUEX_TYPE_CHARACTER** source_p, const QUEX_TYPE_CHARACTER* SourceEnd,
                    wchar_t**                   drain_p,  const wchar_t*             DrainEnd)
{
    QUEX_CONVERTER_STRING(QUEX_SETTING_CHARACTER_CODEC,wchar)(
                          source_p, SourceEnd, drain_p, DrainEnd);
}
#endif

QUEX_NAMESPACE_MAIN_CLOSE

#endif /* __QUEX_INCLUDE_GUARD__AUX_STRING_I */
