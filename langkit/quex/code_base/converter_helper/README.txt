Converter Helpers
-------------------------------------------------------------------------------

The functions provided in this component shall help to convert a string
into one of the following target codings:

    -- UTF 8
    -- UTF 16
    -- UTF 32
    -- 'char' or 'wchar_t' (relying on one of the above)

(1) Character Converters ____________________________________________________

All string converters are built upon character converters which are implemented
each for its particular translation. That means, that for each translation
from a codec to a codec there is a character converter as

    QUEX_CONVERTER_CHAR(from, to)(in_type** source_p, out_type** drain_p)

which increments the input and output pointer according to the characters that
have been consumed and written. Those basic character converter functions are
provided at the head of each 'from-*' file. The converter files are grouped
by their source encoding (that's why they start with 'from').
The basic character converters from utf8 to other formats are the following

    QUEX_CONVERTER_CHAR(utf8, utf8)(...)
    QUEX_CONVERTER_CHAR(utf8, utf16)(...)
    QUEX_CONVERTER_CHAR(utf8, utf32)(...)

All basic character converters follow this scheme. Those functions are written
in a way, so that they do neither depend on the analyzer, nor on the systems
definition of 'char' and 'wchar_t'. Based on their definition the converters
towards 'char' and 'wchar_t' are derived through the generator file

    './generator/character-converter-to-char-wchar.gi'


(2) String Converters _______________________________________________________

String converters are implemented automatically through generator files.
They rely on the correspondent character converters being implemented. 
Two string converters are defined for each translation

    QUEX_INLINE void
    QUEX_CONVERTER_STRING(from, to)(const in_type**  source_pp, 
                                      const in_type*   SourceEnd, 
                                      out_type**       drain_pp,  
                                      const out_type*  DrainEnd);

    QUEX_INLINE std::basic_string<in_type>
    QUEX_CONVERTER_STRING(buffer, to)(const std::basic_string<in_type>& Source);

where the second convenient string converter is only available in C++.
As said, the string converters are built upon the character converters
and generated automatically. Each one is generated by 

    './generator/string-converter.gi'


(3) Buffer Specific Converters ______________________________________________

To help directly transforming a string from the analyzer's buffer a set of
functions is provided that carry 'buffer' as the 'from' name, i.e. for 
example

    QUEX_CONVERTER_STRING(buffer, utf16)(...)

converts a string from the analyzer's buffer to UTF-16 without the user having
to think about the particular buffer's type and codec. Internally, those
functions are routed to the correspondent converter functions from the 
aforementioned function block. All those functions are available in 

   'from-unicode-buffer.i'


(4) Codec Specific Converters _______________________________________________

Quex is able to run a whole engine on a codec different from unicode. Then,
converters come handy that translate the buffer's content into a more popular
codec such as UTF-8. This is done as follows:

   -- Quex uses the file 'TXT-from-codec-buffer.i' as a template and
      generates character converters towards UTF-8, UTF-16, and UTF-32.

   -- From inside the generated files the generator 
    
      './generator/character-converter-to-char-wchar.gi'

      is called to generate character converters towards 'char' and 'wchar_t'.

   -- Based on the now present character converters the 


(4) Namespaces and Include Guards ___________________________________________ 

Namespaces exist to avoid name clashes. The general scheme in quex is from
general to specific. A function 'func()' in namespace 'space' is accessed in
C++ via 'space::func() and in C via 'space_func()'. 

The current strategy is that all functions are located in the analyzer's
namespace. Their include guards are undone upon inclusion of another
analyzer, in the assumption that different analyzers have to live in 
separate namespaces.

-- Universal Functions:

    The basic converters from and to UTF8, UTF16, and UTF32 are absolutely
    independent of the analyzer or even the system (provided it has a 
    'stdint.h' implementation). 

-- System Dependent Functions:

    The converters towards 'char' and 'wchar_t' are system dependent. Name
    clashes are only significant if the functions appear in the same application.
    Thus, without restricting generality, those functions can be considered
    'universal'. 
    
-- Unicode Buffer Functions:
-- Customized Codec Buffer Functions:

    Any converter function that translates content from the analyzer's buffer 
    IS DEPENDENT on the analyzer. Those are the functions with the 'buffer'
    in the 'from' field. In particular their implementation depends on 
    
        QUEX_TYPE_CHARACTER
        QUEX_SETTING_CHARACTER_SIZE 
        QUEX_SETTING_CHARACTER_CODEC

NOTE: The include guard undo happens in file: 'quex/code_base/include-guard-undef'

