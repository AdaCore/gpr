stages:
  - check
  - build
  - test

# Don't run CIs on branches without merge requests, except on important branches
# The latter is important to get automatic comparison on failing tests
workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: $CI_PIPELINE_SOURCE == "push" && ($CI_COMMIT_REF_NAME == "master" || $CI_COMMIT_REF_NAME == "main")
      when: always
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: always
    - if: $CI_PIPELINE_SOURCE == "web"
      when: always
    - when: never

include:
  ###############
  # BUILD STAGE #
  ###############

  # Issue check
  - component: $CI_SERVER_FQDN/eng/gitlab-templates/check-issue@~latest

  # pre-commit: TODO come up with a proper config
  # - component: $CI_SERVER_FQDN/eng/gitlab-templates/pre-commit@~latest
  #   inputs:
  #     on-diff: true

  # regular build
  - component: $CI_SERVER_FQDN/eng/gitlab-templates/build@~latest
    inputs:
      job-name: build
      anod-args: run build
      save-component: true
      cpus: 16
      disk: 80
      windows: true
      windows-cpus: 8
      windows-mem: 16
      needs: []
      windows-needs: []
      rules:
        - allow_failure: false

  # debug build
  - component: $CI_SERVER_FQDN/eng/gitlab-templates/build@~latest
    inputs:
      job-name: build_debug
      anod-args: run build_debug
      save-component: false
      cpus: 16
      disk: 80
      needs: ["build:linux"]
      rules:
        - allow_failure: false

  # bootstrap build
  - component: $CI_SERVER_FQDN/eng/gitlab-templates/build@~latest
    inputs:
      job-name: build_gnat_bootstrap
      anod-args: run build_gnat_bootstrap
      save-component: true
      cpus: 16
      disk: 80
      needs: ["build:linux"]
      windows: true
      windows-cpus: 8
      windows-mem: 16
      windows-needs: ["build:windows"]
      rules:
        - allow_failure: false

  # libgpr2 users build
  - component: $CI_SERVER_FQDN/eng/gitlab-templates/build@~latest
    inputs:
      job-name: build_gpr2_users
      anod-args: run build_libgpr2_users
      save-component: false
      cpus: 16
      disk: 80
      needs: ["build_gnat_bootstrap:linux"]
      rules:
        - allow_failure: true

  ##############
  # TEST STAGE #
  ##############

  # gpr2 testsuite
  - component: $CI_SERVER_FQDN/eng/gitlab-templates/test@~latest
    inputs:
      job-name: test_gpr2
      anod-args: run test_gpr2
      disk: 80
      save-anod-logs: true
      needs: ["build:linux"]
      windows: true
      windows-cpus: 8
      windows-mem: 16
      windows-needs: ["build:windows"]
      artifacts: ["xunit-*.xml"]
      rules:
        - allow_failure: true

  # gpr2 testsuite with coverage
  - component: $CI_SERVER_FQDN/eng/gitlab-templates/test@~latest
    inputs:
      # do not make it visible to allow actual job to have multiple
      # extends (from this template but also from the coverage postprocessing
      # template)
      job-name: .test_gpr2_cov
      anod-args: run test_gpr2_cov
      disk: 80
      save-anod-logs: true
      needs: ["build:linux"]
      windows: true
      windows-cpus: 8
      windows-mem: 16
      windows-needs: ["build:windows"]
      rules:
        - allow_failure: true

  # gpr2 testsuite with valgrind
  - component: $CI_SERVER_FQDN/eng/gitlab-templates/test@~latest
    inputs:
      job-name: test_gpr2_valgrind
      anod-args: run test_gpr2_valgrind
      disk: 80
      save-anod-logs: true
      needs: ["build:linux"]
      rules:
        - allow_failure: true

  # gprbuild testsuite with gpr2build
  - component: $CI_SERVER_FQDN/eng/gitlab-templates/test@~latest
    inputs:
      job-name: test_gpr2build
      anod-args: run test_gpr2build
      disk: 80
      save-anod-logs: true
      needs: ["build:linux"]
      windows: true
      windows-needs: ["build:windows"]
      rules:
        - allow_failure: true

   # gprbuild testsuite with gpr2build for armhf-linux
  - component: $CI_SERVER_FQDN/eng/gitlab-templates/test@~latest
    inputs:
      job-name: test_gpr2build:armhf_linux
      anod-args: run test_gpr2build_armhf_linux
      disk: 80
      save-anod-logs: true
      needs: ["build:linux"]
      rules:
        - allow_failure: true

# Make some jobs optional

# on windows, considering the machines we have for the CI (the fast-startup
# ones have only 2 CPUs), the testsuites may take a long time to run, so
# let's make them optional and activate them manually on windows-impacting
# MRs.

build_gnat_bootstrap:windows:
  when: manual
  rules:
    - allow_failure: true

test_gpr2build:windows:
  when: manual

# windows coverage don't differ much from the linux result, so make the test
# optional. Can be useful though in some circumstances, so we still make
# it available.

.test_gpr2_cov:windows:
  when: manual

# full bootstrap is clearly a very long build, and will certainly need to be
# removed once everyone will have moved to gpr2...

build_gpr2_users:linux:
  when: manual

# The nightly run already catches the failures for this long running CI, so
# it should be optional. Use it when coming up with some specific objects life
# cycle management.

test_gpr2_valgrind:linux:
  when: manual

# Cross-testing is not ready yet for gpr2. Working on it, in the mean time the
# result shows errors.

test_gpr2build:armhf_linux:linux:
  when: manual

# Extend the coverage script to make actual use of the cov results

.cov_postprocess:
  variables:
    RUNNER_AFTER_SCRIPT_TIMEOUT: 10m
  after_script: |
    # Source the env prepared by generic_anod_ci
    cat /tmp/ci_env.sh
    . /tmp/ci_env.sh

    # get the current host
    HOST=$(anod info gpr2 --show platform)

    # get the test workspace
    BUILD_SPACE=$(anod info test gpr2 -Qcoverage --show working_dir)
    RESULTS_DIR=${BUILD_SPACE}/results/new

    mkdir -v $CI_PROJECT_DIR/coverage

    # save coverage results
    mv $RESULTS_DIR/coverage-cobertura/cobertura.xml $CI_PROJECT_DIR/coverage/cobertura-${HOST}.xml

    # display coverage stats for global reporting
    echo_coverage_stats --coverage-file $RESULTS_DIR/coverage-xml/index.xml

    # export to gitlab pages
    if [[ ${HOST} = "x86_64-linux" ]]; then
      host_subdir=""
    else
      host_subdir=/${HOST}
    fi
    if [[ $CI_PIPELINE_SOURCE = "merge_request_event" ]]; then
      target_subdir=MRs/$CI_MERGE_REQUEST_IID
    else
      target_subdir=$CI_COMMIT_BRANCH
    fi
    publish-pages $RESULTS_DIR/coverage-dhtml/ --target-subdir ${target_subdir}${host_subdir} --expires 30

  coverage: '/Stmt Coverage:\s+(?:\d+\.\d+)%/'
  artifacts:
    when: always
    paths:
      - coverage/cobertura-*.xml
    reports:
      junit: xunit-*.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-*.xml

test_gpr2_cov:linux:
  extends:
    - .test_gpr2_cov:linux
    - .cov_postprocess

test_gpr2_cov:windows:
  extends:
    - .test_gpr2_cov:windows
    - .cov_postprocess
