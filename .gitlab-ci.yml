include:
  - project: eng/gpr/gpr-issues
    file: /.gitlab/.gitlab-ci-shared.yml

stages:
  - build
  - test
  - post

.gpr2_test_template:
  extends: .test_template
  cache:
    - key: $CI_COMMIT_REF_SLUG
      fallback_keys:
        - next
      policy: pull
      paths:
        - cache

###########
## BUILD ##
###########

build:
  extends: .job_template
  stage: build
  variables:
    JOB_SUBPROJECTS: eng/gpr/gprconfig_kb
  cache:
    - key: $CI_COMMIT_REF_SLUG
      fallback_keys:
        - next
      paths:
        - cache
  script:
    # Tune to use our build & test plan
    - anod tune --plan $CI_PROJECT_DIR/.ci.plan

    # if a cached sandbox exists, use it, except for the daily schedule
    # where we want to start anew
    - if [[ $CI_PIPELINE_SOURCE != "schedule" ]]; then
        install_cache full ;
      else
        rm -rf $CI_PROJECT_DIR/cache ;
      fi

    # (re)build gpr2
    - anod run build

    # Save gpr builds in cache to speed up a re-build
    - mkdir -p $CI_PROJECT_DIR/cache
    - rsync -a $SANDBOX/$HOST/*gpr2* $CI_PROJECT_DIR/cache/

######################
## DEBUG MODE BUILD ##
######################

debug_build:
  extends: .job_template
  stage: build
  variables:
    JOB_SUBPROJECTS: eng/gpr/gprconfig_kb
  script:

    # Tune to use our build & test plan
    - anod tune --plan $CI_PROJECT_DIR/.ci.plan

    # build libgpr2 in debug mode without rebuilding dependencies
    - anod run debug_build


####################
## GPR2 TESTSUITE ##
####################

test_gpr2:
  extends: .gpr2_test_template
  script:
    - install_cache
    - run_testsuite gpr2 "" test_gpr2
  artifacts:
    when:
      always
    paths:
      - testgpr2_result.xml
    reports:
      junit: testgpr2_result.xml

##################
## MEMORY LEAKS ##
##################

test_gpr2_valgrind:
  extends: .test_template
  needs: []
  script:
    - run_testsuite gpr2 -Qvalgrind test_gpr2_vg
  artifacts:
    when:
      always
    paths:
      - testgpr2vg_result.xml
    reports:
      junit: testgpr2vg_result.xml

##############
## COVERAGE ##
##############

test_gpr2_cov:
  extends: .test_template
  needs: []
  script: |
    exec anod build gpr2 -Qcoverage

    # do a normal testsuite run but save the exit code instead of just exiting
    # so that coverage artifacts can be saved and used.
    result=0
    run_testsuite gpr2 -Qcoverage test_gpr2_cov || result=$?

    mkdir $CI_PROJECT_DIR/coverage

    # save coverage results
    exec mv $RESULTS_DIR/coverage-cobertura/cobertura.xml $CI_PROJECT_DIR/coverage/
    exec mv $RESULTS_DIR/coverage-dhtml $CI_PROJECT_DIR/coverage/dhtml

    # export to gitlab pages
    if [[ $CI_PIPELINE_SOURCE = "merge_request_event" ]]; then
      target_subdir=MRs/$CI_MERGE_REQUEST_IID
    else
      target_subdir=$CI_COMMIT_BRANCH
    fi
    exec publish-pages $CI_PROJECT_DIR/coverage/dhtml/ --target-subdir $target_subdir --expires 30
    echo "Coverage report: https://pages.gitlab.adacore-it.com/eng/gpr/gpr/$target_subdir/index.html"

    # display coverage stats for global reporting
    echo_coverage_stats --coverage-file $RESULTS_DIR/coverage-xml/index.xml

    # report initial test status code
    exit $result

  coverage: '/^Stmt Coverage:\s+(\d+\.\d+\%) \(\d+ \/ \d+\)$/'
  artifacts:
    when:
      always
    paths:
      - coverage/cobertura.xml
      - coverage/dhtml
      - testgpr2cov_result.xml
    reports:
      junit: testgpr2cov_result.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura.xml

###############################
# CHECK WE CAN BOOTSTRAP GNAT #
###############################

test_bootstrap:
  services:
     - image:e3
     - cpu:16
  extends: .gpr2_test_template
  allow_failure: false
  variables:
    JOB_SUBPROJECTS: eng/gpr/gprconfig_kb eng/gpr/gprname
  cache:
    - key: $CI_COMMIT_REF_SLUG
      policy: pull
      paths:
        - cache
    - key: bootstrap-$CI_COMMIT_REF_SLUG
      fallback_keys:
        - bootstrap-next
      paths:
        - bootstrap_cache
  script:
    - install_cache full
    - if [[ $CI_PIPELINE_SOURCE != "schedule" && -d $CI_PROJECT_DIR/bootstrap_cache ]]; then
        exec rsync -a $CI_PROJECT_DIR/bootstrap_cache/* $SANDBOX/$HOST/ ;
      fi
    - rm -rf $CI_PROJECT_DIR/bootstrap_cache ;
    # JOB_SUBPROJECTS and repos identified by a "depends-on" in the MR are
    # locally cloned and used by anod. However git don't preserve timestamps
    # which lead to very long rebuild times (gprbuild then considers all sources
    # as being modified), so caching the builds is highly ineffective.
    # So in order to have a reasonable rebuild, we install a wrapper to gprbuild
    # ensuring that -m is enforced for all packages.
    - install_build_wrapper() {
        bindir=$(anod info install $* --show working_dir)/install/bin ;
        exec mv $bindir/gprbuild $bindir/gprbuild-saved ;
        echo '#!'$SHELL > $bindir/gprbuild ;
        echo 'gprbuild-saved -m $@' >> $bindir/gprbuild ;
        exec cat $bindir/gprbuild ;
        exec chmod a+x $bindir/gprbuild ;
      }
    - anod tune --plan $CI_PROJECT_DIR/.ci.plan
    - result=0
    # Install gprbuild wrappers for the gprbuild bootstrap part
    - anod install gprbuild -Qstable
    - install_build_wrapper gprbuild -Qstable
    # and run the gnat bootstrap
    - anod build gnat || result=$?
    - mkdir -p $CI_PROJECT_DIR/bootstrap_cache
    # save build for packages that take a long time to build: only a re-build
    # will be performed on following runs, which assumably will be faster
    # (than the time it takes to save/restore them).
    # ??? the build space name is forged in stone here, while we know it can
    # change anytime: maybe a hard to maintain choice
    - for pkg in libadalang-internal laltools ; do
        rsync -a $SANDBOX/$HOST/$pkg $CI_PROJECT_DIR/bootstrap_cache/ ;
      done
    - exit $result

###################################################
## CHECK USERS OF THE LIBGPR2 LIBRARY (optional) ##
###################################################

test_gpr2_users:
  services:
     - image:e3
     - cpu:16
  extends: .gpr2_test_template
  when: manual
  variables:
    JOB_SUBPROJECTS: eng/gpr/gprconfig_kb eng/gpr/gprname
  cache:
    - key: $CI_COMMIT_REF_SLUG
      policy: pull
      paths:
        - cache
  script:
    - install_cache full
    - anod tune --plan $CI_PROJECT_DIR/.ci.plan
    - anod run libgpr2_users

####################
## POSTPROCESSING ##
####################

post:
  extends: .job_template
  stage: post
  when: always
  services:
    - cpu:1
    - image:pe-base
  script:
    # generate badge
    - cd $CI_PROJECT_DIR
    - rm -f test-count.svg
    - if ls test*_result.xml &> /dev/null; then
        create_xunit_badge --xunit_reports test*_result.xml ;
      else
        anybadge -l "Tests Passing" -v "Error" -f test-count.svg -c red ;
      fi
  artifacts:
    when:
      always
    paths:
      - test-count.svg
