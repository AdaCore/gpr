include: '/.gitlab-ci-shared.yml'

stages:
  - build
  - test
  - post

###########
## BUILD ##
###########

build:
  extends: .job_template
  stage: build
  script:
    # Tune to use our build & test plan
    - anod tune --plan $CI_PROJECT_DIR/.ci.plan

    # Just build gprbuild/libgpr2/gpr2-bindings
    # Full gnat bootstrap is tested though, but in the testing phase
    - anod run build

    # generate packages to be used at test stages.
    # Note: we can't package the full gnat or gnatall install as the size seems
    # to reach some limits for the saved artifacts. So we package gprbuild and
    # co and will amend the toolchains for testing..
    - for pkg in gprbuild gpr2 libgpr2 libgpr2-bare gpr2-bindings gpr1build; do
        echo "packaging $SANDBOX/$HOST/$pkg/install/" ;
        tar czf $CI_PROJECT_DIR/$pkg.tar.gz -C $SANDBOX/$HOST/$pkg/ install/ ;
      done
    - cd $CI_PROJECT_DIR
    - ls -l *.tar.gz

  artifacts:
    paths:
      - gprbuild.tar.gz
      - gpr2.tar.gz
      - gpr2-bindings.tar.gz
      - libgpr2.tar.gz
      - libgpr2-bare.tar.gz
      - gpr1build.tar.gz

###############################
# CHECK WE CAN BOOTSTRAP GNAT #
###############################

test_bootstrap:
  extends: .job_template
  stage: test
  script:
    - install_packages libgpr2 libgpr2-bare
    - anod tune --plan $CI_PROJECT_DIR/.ci.plan --full
    - anod run bootstrap || exit 1

####################
## GPR2 TESTSUITE ##
####################

test_gpr2:
  extends: .test_template
  script:
    - install_packages gnat gpr2 libgpr2
    - run_testsuite gpr2 -Qfrom_gnat test_gpr2
  artifacts:
    when:
      always
    paths:
      - testgpr2_result.xml
    reports:
      junit: testgpr2_result.xml

##############
## COVERAGE ##
##############

test_gpr2_cov:
  extends: .test_template
  script:
    - install_packages libgpr2-bare
    - anod tune --full
    - anod build gpr2 -Qcoverage
    # do a normal testsuite run but save the exit code instead of just exiting
    # so that coverage artifacts can be saved and used.
    - result=0
    - run_testsuite gpr2 -Qcoverage test_gpr2_cov || result=$?

    - mkdir $CI_PROJECT_DIR/coverage

    # save coverage results
    - mv $RESULTS_DIR/coverage-cobertura/cobertura.xml $CI_PROJECT_DIR/coverage/
    - mv $RESULTS_DIR/coverage-dhtml $CI_PROJECT_DIR/coverage/dhtml

    # display coverage stats for global reporting
    - echo_coverage_stats --coverage-file $RESULTS_DIR/coverage-xml/index.xml

    # report initial test status code
    - exit $result

  coverage: '/^Stmt Coverage:\s+(\d+\.\d+\%) \(\d+ \/ \d+\)$/'
  artifacts:
    when:
      always
    paths:
      - coverage/cobertura.xml
      - coverage/dhtml
      - testgpr2cov_result.xml
    reports:
      junit: testgpr2cov_result.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura.xml

########################
## GPRBUILD TESTSUITE ##
########################

test_gprbuild:
  extends: .test_template
  script:
    - install_packages gnatall
    - run_testsuite gprbuild -QAdaCC++_Auto test_gprbuild
  artifacts:
    when:
      always
    paths:
      - testgprbuild_result.xml
    reports:
      junit: testgprbuild_result.xml

#########################
## GPRCONFIG TESTSUITE ##
#########################

test_gprconfig:
  extends: .test_template
  script:
    - install_packages gprbuild
    - run_testsuite gprconfig "" test_gprconfig
  artifacts:
    when:
      always
    paths:
      - testgprconfig_result.xml
    reports:
      junit: testgprconfig_result.xml

######################
## GPR2LS TESTSUITE ##
######################

test_gpr2ls:
  extends: .test_template
  script:
    - install_packages gnatall gpr1build
    - run_testsuite gprbuild "-QAdaCC++_Auto -Qcheck-gpr2ls" test_gpr2ls
  artifacts:
    when:
      always
    paths:
      - testgpr2ls_result.xml
    reports:
      junit: testgpr2ls_result.xml

#############################
## GPR2 BINDINGS TESTSUITE ##
#############################

test_gpr2bindings:
  extends: .test_template
  script:
    - install_packages gpr2-bindings

    - anod test gpr2-bindings --minimal
    # TODO: adjust this when this testsuite supports e3-testsuite-report
    - work_dir=$(anod info test gpr2-bindings --show working_dir)
    - OUTPUT=$(sed $work_dir/results/results -e '/.*PASSED$/d' -e '/.*XFAIL$/d' -e '/^$/d')
    - if [ -n "$OUTPUT" ] ; then
         echo "the following tests fail:" ;
         echo "$OUTPUT" ;
         exit 1 ;
      fi

####################
## POSTPROCESSING ##
####################

post:
  extends: .job_template
  stage: post
  when: always
  script:
    # generate badge
    - cd $CI_PROJECT_DIR
    - rm -f test-count.svg
    - if ls test*_result.xml &> /dev/null; then
        create_xunit_badge --xunit_reports test*_result.xml ;
      else
        anybadge -l "Tests Passing" -v "Error" -f test-count.svg -c red ;
      fi
  artifacts:
    when:
      always
    paths:
      - test-count.svg
