# This bit is used to make sure we don't run too many pipelines:
# don't run the branch CI when a merge request is already open for the
# branch.
workflow:
  rules:
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_PIPELINE_SOURCE == "push"
      when: never
    - when: always

variables:
   GIT_CLONE_BASE: https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}:${CI_SERVER_PORT}
   SANDBOX: /it/wave
   HOST: x86_64-linux
   ANOD_DEFAULT_SANDBOX_DIR: /it/wave

stages:
  - build
  - test

########################
## SETUP REPOSITORIES ##
########################

.setup: &setup_repos
    # This script expects $packages to be set to the list of packages to
    # retrieve from the build phase, and $subprojects to be set to the list
    # of subprojects to install in /tmp to be used by anod.

    # unpack the packages
    - cd $SANDBOX
    - mkdir -p fingerprints
    - for pkg in $packages; do
        if [ $pkg = "gnat" -o $pkg = "gnatall" ]; then
           anod install $pkg ;
           tar zxf $CI_PROJECT_DIR/gprbuild.tar.gz -C $HOST/$pkg ;
        else
           mkdir -p $HOST/$pkg ;
           tar zxf $CI_PROJECT_DIR/$pkg.tar.gz -C $HOST/$pkg ;
        fi ;
        touch fingerprints/$HOST.$pkg.install.json.assume-unchanged ;
        touch fingerprints/$HOST.$pkg.download-bin.json.assume-unchanged ;
      done
    - rm -f $CI_PROJECT_DIR/*.tar.gz

    # Setup the 'anod vcs' for this repo
    - anod vcs --add-repo gpr2-next $CI_PROJECT_DIR

    # Figure out if we're on a sync branch
    - BRANCH=master
    - if [[ $CI_COMMIT_BRANCH =~ ^sync/ ]]; then
         BRANCH=$CI_COMMIT_BRANCH;
      elif [[ $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ ^sync/ ]]; then
         BRANCH=$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME;
      fi

    # Setup the anod vcs for all subprojects.
    # For each repo, check if a branch with the same name as
    # $BRANCH exists; if so, use it.
    - for subproject in $subprojects ; do
         cd /tmp ;
         git clone $GIT_CLONE_BASE/eng/gpr/$subproject ;
         cd $subproject ;
         if `git show-ref $BRANCH > /dev/null` ; then
            git checkout $BRANCH ;
         fi ;
         if [ $subproject = "gprbuild-internal" ]; then
            anodrepo=gprbuild_testsuite ;
         else
            anodrepo=$subproject ;
         fi ;
         anod vcs --add-repo $anodrepo /tmp/$subproject ;
      done

    # Make sure we use the latest version of anod scripts. This is a
    # workaround waiting for proper support of dependencies towards
    # MRs in the anod repo.
    # ??? /it/anod seems readonly, so we need to clone the scripts again
    - cd /tmp
    - git clone $GIT_CLONE_BASE/eng/it/anod
    - anod tune --anod /tmp/anod

###########
## BUILD ##
###########

build:
  services:
     - image:sandbox
     - cpu:8
     - mem:16
  stage: build
  script:
    # setup submodules
    - packages=""
    - subprojects="gprconfig_kb"
    - *setup_repos

    # Tune to use our build & test plan
    - anod tune --plan $CI_PROJECT_DIR/.ci.plan
    - anod run build

    # generate packages to be used at test stages.
    # Note: we can't package the full gnat or gnatall install as the size seems
    # to reach some limits for the saved artifacts. So we package gprbuild and
    # co and will amend the toolchains for testing..
    - for pkg in gpr2-next libgpr2-next-bare; do
        echo "packaging $SANDBOX/$HOST/$pkg/install/" ;
        tar czf $CI_PROJECT_DIR/$pkg.tar.gz -C $SANDBOX/$HOST/$pkg/ install/ ;
      done
    - cd $CI_PROJECT_DIR
    - ls -l *.tar.gz

  artifacts:
    paths:
      - gpr2-next.tar.gz
      - libgpr2-next-bare.tar.gz

####################
## GPR2 TESTSUITE ##
####################

test_gpr2:
  services:
     - image:sandbox
     - cpu:8
     - mem:16
  stage: test
  allow_failure: true
  script:
    - packages="gpr2-next libgpr2-next-bare"
    - subprojects=""
    - *setup_repos

    - anod test gpr2 -Qnext --minimal
    - e3-testsuite-report
        --failure-exit-code 1
        --xunit-output $CI_PROJECT_DIR/testgpr2_result.xml
        --xunit-name test_gpr2
        $SANDBOX/$HOST/gpr2-test-next/results/new/ || exit 1
  artifacts:
    when:
      always
    paths:
      - testgpr2_result.xml
    reports:
      junit: testgpr2_result.xml

##############
## COVERAGE ##
##############

test_gpr2_cov:
  services:
     - image:sandbox
     - cpu:8
     - mem:16
  stage: test
  allow_failure: true
  script:
    - packages=""
    - subprojects=""
    - *setup_repos

    - anod build gpr2 -Qcoverage -Qnext
    - anod test gpr2 -Qcoverage -Qnext --minimal
    - mkdir $CI_PROJECT_DIR/coverage
    - cov_dir=$SANDBOX/$HOST/gpr2-test-cov-stmt-next/results/new
    - mv $cov_dir/coverage-cobertura/cobertura.xml $CI_PROJECT_DIR/coverage/
    - mv $cov_dir/coverage-dhtml $CI_PROJECT_DIR/coverage/dhtml
    - echo_coverage_stats --coverage-file $cov_dir/coverage-xml/index.xml
    - e3-testsuite-report
        --failure-exit-code 1
        --xunit-output $CI_PROJECT_DIR/testgpr2cov_result.xml
        --xunit-name test_gpr2_cov
        $SANDBOX/$HOST/gpr2-test-cov-stmt/results/new/ || exit 1
  coverage: '/^Stmt Coverage:\s+(\d+\.\d+\%) \(\d+ \/ \d+\)$/'
  artifacts:
    when:
      always
    paths:
      - coverage/cobertura.xml
      - coverage/dhtml
      - testgpr2cov_result.xml
    reports:
      junit: testgpr2cov_result.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura.xml
