--
--  Copyright (C) 2024, AdaCore
--
--  SPDX-License-Identifier: Apache-2.0 WITH LLVM-Exception
--

with GPR2.Build.Signature;
with GPR2.Path_Name;
with GPR2.Path_Name.Set;
with GPR2.Project.Registry.Attribute;

with GNATCOLL.OS.Process;

private with GPR2.View_Ids;

package GPR2.Build.Actions.Link is

   package PRA renames GPR2.Project.Registry.Attribute;

   type Link_Id (<>) is new Actions.Action_Id with private;

   overriding function Image (Self : Link_Id) return String;

   overriding function Db_Filename
     (Self : Link_Id) return Simple_Name;

   overriding function "<" (L, R : Link_Id) return Boolean;

   type Object is new Actions.Object with private;
   --  Action responsible for linking Ada sources

   Undefined : constant Object;

   overriding function UID (Self : Object) return Actions.Action_Id'Class;

   overriding function Valid_Signature (Self : Object) return Boolean;

   function Is_Defined (Self : Object) return Boolean;

   procedure Initialize
     (Self             : in out Object;
      Executable       : GPR2.Path_Name.Object;
      Main_Object_File : GPR2.Path_Name.Object;
      Context          : GPR2.Project.View.Object);
   --  Initialize a link action.
   --  Self : ???
   --  Executable : ???
   --  Main_Object_File : ???
   --  Context : ???

   overriding function View (Self : Object) return GPR2.Project.View.Object;

   procedure Add_Object_File
     (Self : in out Object; Obj : GPR2.Path_Name.Object);
   --  Add the object file Obj to the list of object files to link

   procedure Add_Option (Self : in out Object; Option : String);
   --  Add an option to the linking command line

   function Output_Executable (Self : Object) return GPR2.Path_Name.Object;
   --  Return the executable generated by the link

   function Input_Object_Files (Self : Object)
     return GPR2.Path_Name.Set.Object;
   --  Return all the object files used by the link

   overriding procedure On_Tree_Insertion
     (Self     : in out Object;
      Db       : in out GPR2.Build.Tree_Db.Object;
      Messages : in out GPR2.Log.Object);

   overriding procedure Compute_Signature (Self : in out Object);

   overriding procedure Compute_Command
     (Self : in out Object;
      Args : out GNATCOLL.OS.Process.Argument_List;
      Env  : out GNATCOLL.OS.Process.Environment_Dict);

   overriding function Working_Directory
     (Self : Object) return Path_Name.Object;

private

   use type GPR2.View_Ids.View_Id;

   type Link_Id (Name_Len : Natural) is new Actions.Action_Id
     with record
      Ctxt       : GPR2.Project.View.Object;
      Exec_Name  : Name_Type (1 .. Name_Len);
   end record;

   overriding function Image (Self : Link_Id) return String is
     ("Link: " & String (Self.Exec_Name) &
        " (" & String (Self.Ctxt.Path_Name.Simple_Name) & ")");

   overriding function Db_Filename
     (Self : Link_Id) return Simple_Name is
     (Simple_Name ("link_" & To_Lower (Self.Exec_Name) & "_"
      & To_Lower (Self.Ctxt.Name) & ".json"));

   overriding function "<" (L, R : Link_Id) return Boolean is
     (if L.Ctxt.Id = R.Ctxt.Id then L.Exec_Name < R.Exec_Name
      else L.Ctxt.Id < R.Ctxt.Id);

   package String_Vectors is new Ada.Containers.Indefinite_Vectors
    (Index_Type => Positive, Element_Type => String);

   type Object is new Actions.Object with record
      Object_Files    : GPR2.Path_Name.Set.Object :=
                          GPR2.Path_Name.Set.Empty_Set;
      --  Object files used by the linker to produce the executable

      Executable      : GPR2.Path_Name.Object;
      --  Executable produced by the linker

      Ctxt            : GPR2.Project.View.Object;
      --  ??? What is the relationship between view and executable ?

      Static_Options : String_Vectors.Vector := String_Vectors.Empty_Vector;
      --  Command line options added manually with the Add_Option procedure

   end record;

   function Output_Executable (Self : Object) return GPR2.Path_Name.Object is
     (Self.Executable);

   function Input_Object_Files (Self : Object)
     return GPR2.Path_Name.Set.Object is
     (Self.Object_Files);

   overriding function View (Self : Object) return GPR2.Project.View.Object is
     (Self.Ctxt);

   overriding function Valid_Signature (Self : Object) return Boolean is
     (Self.Signature.Valid);

   Undefined : constant Object := (others => <>);

   function Is_Defined (Self : Object) return Boolean is
     (Self /= Undefined);

   overriding function Working_Directory
     (Self : Object) return Path_Name.Object is
     (if Self.Ctxt.Is_Library then Self.Ctxt.Library_Directory
      else Self.Ctxt.Executable_Directory);

end GPR2.Build.Actions.Link;
