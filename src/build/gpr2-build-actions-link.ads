--
--  Copyright (C) 2024, AdaCore
--
--  SPDX-License-Identifier: Apache-2.0 WITH LLVM-Exception
--

with GPR2.Build.Artifacts.Files;
with GPR2.Build.Artifacts.Library;
with GPR2.Build.Compilation_Unit.Maps;
with GPR2.Build.Tree_Db;
with GPR2.Path_Name;
with GPR2.Project.Attribute_Index;
with GPR2.Project.Registry.Attribute;

package GPR2.Build.Actions.Link is

   type Link_Id (<>) is new Actions.Action_Id with private;

   function Create
     (View       : GPR2.Project.View.Object;
      Output     : Simple_Name;
      Is_Library : Boolean) return Link_Id;

   type Object is new Actions.Object with private;
   --  Action responsible for linking Ada sources

   Undefined : constant Object;

   overriding function UID (Self : Object) return Actions.Action_Id'Class;

   function Is_Defined (Self : Object) return Boolean;

   procedure Initialize_Executable
     (Self     : in out Object;
      Src      : Compilation_Unit.Unit_Location;
      No_Rpath : Boolean;
      Output   : Filename_Optional := "");
   --  Initialize a link action

   procedure Initialize_Library
     (Self     : in out Object;
      Context  : GPR2.Project.View.Object;
      No_Rpath : Boolean);
   --  Initialize a link action to link a library

   procedure Initialize_Global_Archive
     (Self    : in out Object;
      Context : GPR2.Project.View.Object);
   --  Initialize global archive of foreign objects

   overriding function View (Self : Object) return GPR2.Project.View.Object;

   procedure Add_Option (Self : in out Object; Option : String);
   --  Add an option to the linking command line

   function Is_Library (Self : Object) return Boolean;

   function Is_Static_Library (Self : Object) return Boolean;

   function Interface_Units
     (Self : Object) return Compilation_Unit.Maps.Map
     with Pre => Self.View.Is_Library;
   --  Return the complete list of Ada units that are exposed by this library.
   --  For regular libraries this will be the list of units owned by the view
   --  or the aggregated views (aggregate library case).
   --  For standalone libraries this will be the list of units listed by the
   --  Library_Interface or Interfaces attributes complimented by their
   --  dependencies.

   function Output (Self : Object) return Artifacts.Files.Object'Class;
   --  Return the executable or library generated by the link

   function Embedded_Objects
     (Self : Object) return Build.Tree_Db.Artifact_Sets.Set;
   --  List of objects embedded in this library or executable.
   --  This includes the objects coming from embedded libraries.

   function Library_Dependencies
     (Self : Object) return Actions.Action_Id_Vectors.Vector;
   --  List of libraries this action uses

   overriding function On_Tree_Insertion
     (Self : Object;
      Db   : in out GPR2.Build.Tree_Db.Object) return Boolean;

   overriding function On_Ready_State
     (Self : in out Object) return Boolean;

   overriding procedure Compute_Command
     (Self           : in out Object;
      Slot           : Positive;
      Cmd_Line       : in out GPR2.Build.Command_Line.Object;
      Signature_Only : Boolean);

   overriding function Pre_Command
     (Self : in out Object) return Boolean;

   overriding function Post_Command
     (Self   : in out Object;
      Status : Execution_Status) return Boolean;

   overriding function Skip (Self : Object) return Boolean;

   overriding function Working_Directory
     (Self : Object) return Path_Name.Object;

private

   package PRA renames GPR2.Project.Registry.Attribute;
   package PAI renames GPR2.Project.Attribute_Index;

   type Link_Id (Name_Len : Natural) is new Actions.Action_Id
   with record
      Is_Static_Lib : Boolean := False;
      View          : GPR2.Project.View.Object;
      Exec_Name     : Filename_Type (1 .. Name_Len);
   end record;

   overriding function View (Self : Link_Id) return Project.View.Object is
     (Self.View);

   overriding function Action_Class (Self : Link_Id) return Value_Type is
     (if Self.Is_Static_Lib
      then "Archive"
      else "Link");

   overriding function Language (Self : Link_Id) return Language_Id is
     (No_Language);

   overriding function Action_Parameter (Self : Link_Id) return Value_Type
   is (Value_Type (Self.Exec_Name));

   function Create (View       : GPR2.Project.View.Object;
                    Output     : Simple_Name;
                    Is_Library : Boolean) return Link_Id is
     (Output'Length, Is_Library, View, Output);

   type Object is new Actions.Object with record
      Is_Library     : Boolean := False;
      Is_Static      : Boolean := True;
      In_Obj         : Boolean := False;

      Executable     : Artifacts.Files.Object;
      --  Executable produced by the linker

      Main_Src       : Compilation_Unit.Unit_Location;
      --  Source of the Main when an executable is produced

      Library        : Artifacts.Library.Object;
      --  Library produced by the linker

      Ctxt           : GPR2.Project.View.Object;
      --  The view defining the Main, or the library

      Static_Options : Containers.Value_List :=
                         Containers.Empty_Value_List;
      --  Command line options added manually with the Add_Option procedure

      Extra_Intf      : GPR2.Build.Compilation_Unit.Maps.Map;
      --  Extra units needed to have a complete interface

      No_Rpath        : Boolean := False;
      --  When set, the RPATH will not be set for shared libraries resolution
   end record;

   overriding procedure Compute_Signature
     (Self      : in out Object;
      Load_Mode : Boolean);

   overriding function Extended (Self : Object) return Object is
     (raise Internal_Error with "This action is not extending");

   function Check_Archive_Driver (Self : Object) return Boolean;
   --  True if the archive driver is found

   function Check_Linker_Driver (Self : Object) return Boolean;
   --  True if the linker driver is found

   function Is_Library (Self : Object) return Boolean is
     (Self.Is_Library);

   function Is_Static_Library (Self : Object) return Boolean is
     (Self.Is_Library and then Self.Is_Static);

   function Output (Self : Object) return Artifacts.Files.Object'Class is
     (if Self.Is_Library then Self.Library else Self.Executable);

   overriding function View (Self : Object) return GPR2.Project.View.Object is
     (Self.Ctxt);

   Undefined : constant Object := (others => <>);

   function Is_Defined (Self : Object) return Boolean is
     (Self /= Undefined);

   function Check_Archive_Driver (Self : Object) return Boolean is
     (Self.View.Attribute (PRA.Archive_Builder).Is_Defined
      and then not Self.View.Attribute (PRA.Archive_Builder).Values.Is_Empty);

   function Check_Linker_Driver (Self : Object) return Boolean is
     (Self.View.Attribute (PRA.Linker.Driver).Is_Defined
      and then Self.View.Attribute (PRA.Linker.Driver).Value.Text'Length > 0);

   overriding function Skip (Self : Object) return Boolean is
     ((Self.Is_Static_Library and then not Self.Check_Archive_Driver) or else
      not Self.Check_Linker_Driver);

   overriding function Working_Directory
     (Self : Object) return Path_Name.Object is
     (if Self.In_Obj
      then Self.Ctxt.Object_Directory
      elsif Self.Ctxt.Is_Library
      then Self.Ctxt.Library_Directory
      else Self.Ctxt.Executable_Directory);

end GPR2.Build.Actions.Link;
