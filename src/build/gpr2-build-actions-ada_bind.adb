--
--  Copyright (C) 2024, AdaCore
--
--  SPDX-License-Identifier: Apache-2.0 WITH LLVM-Exception
--

with GPR2.Build.Artifacts.Files;
with GPR2.Build.Tree_Db;
with Ada.Strings.Fixed;
with Ada.Strings;
with Ada.Text_IO;

package body GPR2.Build.Actions.Ada_Bind is

   ---------------------
   -- Compute_Command --
   ---------------------

   overriding procedure Compute_Command
     (Self : in out Object;
      Args : out GNATCOLL.OS.Process.Argument_List;
      Env  : out GNATCOLL.OS.Process.Environment_Dict)
   is
      pragma Unreferenced (Env);
   begin
      Args.Append ("gnatbind");
      Args.Append  (Self.Main_Ali.String_Value);
      Args.Append ("-o");

      --  Directories separator are not allowed. We must be in the correct
      --  directory and only use the source base name with extension.

      Args.Append (String (Self.BN));
   end Compute_Command;

   -----------------------
   -- Compute_Signature --
   -----------------------

   overriding procedure Compute_Signature (Self : in out Object) is
      use GPR2.Build.Signature;
   begin

      Self.Signature.Clear;
      declare
         Spec : constant Artifacts.Files.Object :=
                  Artifacts.Files.Create (Self.Generated_Spec);
         Impl : constant Artifacts.Files.Object :=
                  Artifacts.Files.Create (Self.Generated_Body);
      begin
         Self.Signature.Update_Artifact
           (Spec.UID, Spec.Image, Spec.Checksum);
         Self.Signature.Update_Artifact
           (Impl.UID, Impl.Image, Impl.Checksum);
      end;

      for Ali of Self.Ali_Files loop
         declare
               Art : constant Artifacts.Files.Object :=
                       Artifacts.Files.Create (Ali);
         begin
            Self.Signature.Update_Artifact (Art.UID, Art.Image, Art.Checksum);
         end;
      end loop;

      Self.Signature.Store
        (Self.Tree.Db_Filename_Path (Object'Class (Self).UID));
   end Compute_Signature;

   ------------------------
   -- Get_Linker_Options --
   ------------------------

   function Get_Linker_Options
     (Self : Object) return GNATCOLL.OS.Process.Argument_List
   is
      use Ada.Text_IO;
      use Ada.Strings;
      use Ada.Strings.Fixed;

      procedure Process_Option_Or_Object_Line (Line : String);
      --  Pass options to the linker. Do not pass object file lines,
      --  as the objects to link are already obtained by parsing ALI files.

      Cmd_Line : GNATCOLL.OS.Process.Argument_List;

      -----------------------------------
      -- Process_Option_Or_Object_Line --
      -----------------------------------

      procedure Process_Option_Or_Object_Line (Line : String) is
         Switch_Index : Natural := Index (Line, "--");
      begin
         if Switch_Index = 0 then
            raise Program_Error
              with "Failed parsing line " & Line & " from " &
              Self.Generated_Body.String_Value;
         end if;

         --  Skip the "--" comment prefix

         Switch_Index := Switch_Index + 2;

         declare
            Trimed_Line : constant String :=
                            Trim (Line (Switch_Index .. Line'Last), Both);
         begin
            --  Pass only options to the link action (??? to be assessed)
            if Trimed_Line (Trimed_Line'First) = '-' then
               Cmd_Line.Append (Trimed_Line);
            end if;
         end;
      end Process_Option_Or_Object_Line;

      Src_File     : File_Type;
      Reading      : Boolean         := False;
      Begin_Marker : constant String := "--  BEGIN Object file/option list";
      End_Marker   : constant String := "--  END Object file/option list";

   begin
      pragma Assert
        (Self.Valid_Signature,
         "Get_Linker_Options error: binder has not run successfully");

      Self.Traces.Trace
        ("Parsing file '" & Self.Generated_Body.String_Value &
           "' generated by " & Self.UID.Image &
           " to obtain linker options");

      Open
        (File => Src_File,
         Mode => In_File,
         Name => Self.Generated_Body.String_Value);

      while not End_Of_File (Src_File) loop
         declare
            Line : constant String := Get_Line (Src_File);
         begin
            if Index (Line, Begin_Marker) = Line'First then
               Reading := True;
            elsif Index (Line, End_Marker) = Line'First then
               Reading := False;
               exit;
            elsif Reading then
               Process_Option_Or_Object_Line (Line);
            end if;
         end;
      end loop;

      Close (Src_File);

      return Cmd_Line;
   end Get_Linker_Options;

   ----------------
   -- Initialize --
   ----------------

   procedure Initialize
     (Self     : in out Object;
      Main_Ali : GPR2.Path_Name.Object;
      Context  : GPR2.Project.View.Object)
   is
   begin
      Self.Ctxt := Context;
      Self.Main_Ali := Main_Ali;
      Self.Ali_Files.Insert (Main_Ali);
      Self.Traces := Create ("ACTION_ADA_BIND");
   end Initialize;

   -----------------------
   -- On_Tree_Insertion --
   -----------------------

   overriding procedure On_Tree_Insertion
     (Self     : in out Object;
      Db       : in out GPR2.Build.Tree_Db.Object;
      Messages : in out GPR2.Log.Object)
   is
      UID       : constant Actions.Action_Id'Class := Object'Class (Self).UID;
      Post_Bind : Actions.Post_Bind.Object;

   begin
      Db.Add_Output
        (UID,
         Artifacts.Files.Create (Self.Generated_Spec),
         Messages);
      Db.Add_Output
        (UID,
         Artifacts.Files.Create (Self.Generated_Body),
         Messages);

      for Ali_File of Self.Ali_Files loop
         Db.Add_Input
           (UID,
            Artifacts.Files.Create (Ali_File),
            True);
      end loop;

      Post_Bind := Actions.Post_Bind.Create (Self.Generated_Body, Self.View);
      Db.Add_Action (Post_Bind, Messages);
      Self.Post_Bind := Actions.Post_Bind.Post_Bind_Id (Post_Bind.UID);
   end On_Tree_Insertion;

   ---------
   -- UID --
   ---------

   overriding function UID (Self : Object) return Actions.Action_Id'Class is
      Result : constant Ada_Bind_Id :=
                 (Name_Len  => Self.Main_Ali.Base_Name'Length,
                  Ali_Name  => Self.Main_Ali.Base_Name,
                  Ctxt      => Self.Ctxt);
   begin
      return Result;
   end UID;

end GPR2.Build.Actions.Ada_Bind;
