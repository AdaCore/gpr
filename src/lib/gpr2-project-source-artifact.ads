------------------------------------------------------------------------------
--                                                                          --
--                           GPR2 PROJECT MANAGER                           --
--                                                                          --
--                       Copyright (C) 2019, AdaCore                        --
--                                                                          --
-- This is  free  software;  you can redistribute it and/or modify it under --
-- terms of the  GNU  General Public License as published by the Free Soft- --
-- ware  Foundation;  either version 3,  or (at your option) any later ver- --
-- sion.  This software is distributed in the hope  that it will be useful, --
-- but WITHOUT ANY WARRANTY;  without even the implied warranty of MERCHAN- --
-- TABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public --
-- License for more details.  You should have received  a copy of the  GNU  --
-- General Public License distributed with GNAT; see file  COPYING. If not, --
-- see <http://www.gnu.org/licenses/>.                                      --
--                                                                          --
------------------------------------------------------------------------------

--  The artifacts that are generated by the compilation of a source file of a
--  given project.

with Ada.Containers.Ordered_Maps;

with GPR2.Path_Name.Set;
with GPR2.Project.Source;
with GPR2.Project.View;

package GPR2.Project.Source.Artifact is

   type Object is tagged private;

   Undefined : constant Object;

   function Is_Defined (Self : Object) return Boolean;
   --  Returns true if Self is defined

   function Create (Source : Project.Source.Object) return Artifact.Object
     with Pre => Source.Is_Defined;
   --  Constructor for Object defining the artifacts for the given Source

   function Source (Self : Object) return Project.Source.Object
     with Pre => Self.Is_Defined;
   --  The project's source used to generate the artifacts

   function Has_Object_Code
     (Self : Object; Index : Natural := 1) return Boolean
     with Pre => Self.Is_Defined;
   --  Returns True if an object-code path is defined

   function Object_Code
     (Self : Object; Index : Natural := 1) return Path_Name.Object
     with Pre => Self.Is_Defined;
   --  The target-dependent code (generally .o or .obj). Note that the first
   --  one (Index = 1) is the one to be used by the installer.

   function Has_Dependency
     (Self : Object; Index : Natural := 1) return Boolean
     with Pre => Self.Is_Defined;
   --  Returns True if a dependency path is defined

   function Dependency
     (Self : Object; Index : Natural := 1) return Path_Name.Object
     with Pre => Self.Is_Defined;
   --  A file containing information (.ali for GNAT, .d for GCC) like
   --  cross-reference, units used by the source, etc.

   function Has_Preprocessed_Source (Self : Object) return Boolean
     with Pre => Self.Is_Defined;
   --  Returns True if a preprocessed-source is defined

   function Preprocessed_Source (Self : Object) return Path_Name.Object
     with Pre => Self.Is_Defined;
   --  Returns the file containing the pre-processed source

   function List (Self : Object) return Path_Name.Set.Object
     with Pre => Self.Is_Defined;
   --  Returns all artifacts

private

   use type Path_Name.Object;

   package Index_Path_Name_Map is new Ada.Containers.Ordered_Maps
     (Positive, Path_Name.Object);

   type Object is tagged record
      Source           : Project.Source.Object;
      Object_Files     : Index_Path_Name_Map.Map;
      Dependency_Files : Index_Path_Name_Map.Map;
      Switches         : Path_Name.Object;
      Preprocessed_Src : Path_Name.Object;
   end record;

   Undefined : constant Object := (others => <>);

   function Is_Defined (Self : Object) return Boolean is
     (Self /= Undefined);

   function Has_Object_Code
     (Self : Object; Index : Natural := 1) return Boolean is
     (Self.Object_Files.Contains (Index));

   function Has_Dependency
     (Self : Object; Index : Natural := 1) return Boolean is
     (Self.Dependency_Files.Contains (Index));

   function Has_Preprocessed_Source (Self : Object) return Boolean is
     (Self.Preprocessed_Src.Is_Defined);

end GPR2.Project.Source.Artifact;
